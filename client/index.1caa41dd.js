import{S as e,i as t,s as n,e as a,t as r,c as i,a as o,b as s,d as c,f as l,g as m,h as p,n as u,j as f,k as d,l as h,m as y,o as v,p as g,r as $,q as b,u as O,v as j,w as S,x as I,y as x,z as w,A as E,B as P,C as A,D as C,E as N,F as k,G as R,H as T,I as D,J as q,K as M,L as V,M as L}from"./client.0174c724.js";var J=function(e,t){return function n(){null==t&&(t=e.length);var a=[].slice.call(arguments);return a.length>=t?e.apply(this,a):function(){return n.apply(this,a.concat([].slice.call(arguments)))}}};var U="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function _(e,t,n){return e(n={path:t,exports:{},require:function(e,t){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==t&&n.path)}},n.exports),n.exports}var F=_((function(e,t){var n;n={},("object"==typeof window&&window||U).PubSub=n,function(e){var t={},n=-1,a="*";function r(e){var t;for(t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!0;return!1}function i(e){return function(){throw e}}function o(e,t,n){try{e(t,n)}catch(e){setTimeout(i(e),0)}}function s(e,t,n){e(t,n)}function c(e,n,a,r){var i,c=t[n],l=r?s:o;if(Object.prototype.hasOwnProperty.call(t,n))for(i in c)Object.prototype.hasOwnProperty.call(c,i)&&l(c[i],e,a)}function l(e,t,n){return function(){var r=String(e),i=r.lastIndexOf(".");for(c(e,e,t,n);-1!==i;)i=(r=r.substr(0,i)).lastIndexOf("."),c(e,r,t,n);c(e,a,t,n)}}function m(e){var n=String(e);return Boolean(Object.prototype.hasOwnProperty.call(t,n)&&r(t[n]))}function p(e){for(var t=String(e),n=m(t)||m(a),r=t.lastIndexOf(".");!n&&-1!==r;)r=(t=t.substr(0,r)).lastIndexOf("."),n=m(t);return n}function u(e,t,n,a){var r=l(e="symbol"==typeof e?e.toString():e,t,a);return!!p(e)&&(!0===n?r():setTimeout(r,0),!0)}e.publish=function(t,n){return u(t,n,!1,e.immediateExceptions)},e.publishSync=function(t,n){return u(t,n,!0,e.immediateExceptions)},e.subscribe=function(e,a){if("function"!=typeof a)return!1;e="symbol"==typeof e?e.toString():e,Object.prototype.hasOwnProperty.call(t,e)||(t[e]={});var r="uid_"+String(++n);return t[e][r]=a,r},e.subscribeAll=function(t){return e.subscribe(a,t)},e.subscribeOnce=function(t,n){var a=e.subscribe(t,(function(){e.unsubscribe(a),n.apply(this,arguments)}));return e},e.clearAllSubscriptions=function(){t={}},e.clearSubscriptions=function(e){var n;for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&0===n.indexOf(e)&&delete t[n]},e.countSubscriptions=function(e){var n,a,r=0;for(n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&0===n.indexOf(e)){for(a in t[n])r++;break}return r},e.getSubscriptions=function(e){var n,a=[];for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&0===n.indexOf(e)&&a.push(n);return a},e.unsubscribe=function(n){var a,r,i,o=function(e){var n;for(n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&0===n.indexOf(e))return!0;return!1},s="string"==typeof n&&(Object.prototype.hasOwnProperty.call(t,n)||o(n)),c=!s&&"string"==typeof n,l="function"==typeof n,m=!1;if(!s){for(a in t)if(Object.prototype.hasOwnProperty.call(t,a)){if(r=t[a],c&&r[n]){delete r[n],m=n;break}if(l)for(i in r)Object.prototype.hasOwnProperty.call(r,i)&&r[i]===n&&(delete r[i],m=!0)}return m}e.clearSubscriptions(n)}}(n),void 0!==e&&e.exports&&(t=e.exports=n),t.PubSub=n,e.exports=t=n}));F.PubSub;var z=function(e,t){if(e=e.trim(),(t=t.trim()).startsWith("about:"))return t;const n=function(e){const t={host:"",path:"",query:"",protocol:""};let n=e,a=e.indexOf("//");t.protocol=n.substring(0,a),a+=2;const r=e.indexOf("/",a),i=e.indexOf("?"),o=e.indexOf("#");-1!==o&&(n=n.substring(0,o));if(-1!==i){const e=n.substring(i);t.query=e,n=n.substring(0,i)}if(-1!==r){const e=n.substring(0,r);t.host=e,n=n.substring(r),t.path=n}else t.host=n;return t}(e),a=function(e){const t={href:e,hash:"",query:"",netPath:!1,absolutePath:!1,relativePath:!1};if(G.test(e))return t.netPath=!0,t;"/"===e[0]?t.absolutePath=!0:""!==e&&(t.relativePath=!0);let n=e;const a=e.indexOf("?"),r=e.indexOf("#");if(-1!==r){const e=n.substring(r);t.hash=e,n=n.substring(0,r)}if(-1!==a){const e=n.substring(a);t.query=e,n=n.substring(0,a)}return t.path=n,t}(t);if(!n.protocol&&!a.netPath)throw new Error("Error, protocol is not specified");if(a.netPath)return a.href.startsWith("//")&&(a.href=n.protocol+a.href),function(e){const t=e.indexOf("//")+2,n=!e.includes("/",t),a=!e.includes("?",t),r=!e.includes("#",t);return n&&a&&r}(a.href)?B(a.href):a.href;if(a.absolutePath){const{path:e,query:t,hash:r}=a;return n.host+K(e)+t+r}if(a.relativePath){const{path:e,query:t,hash:r}=a;let i,o=n.path,s=n.host;return 0===e.length?i=o:(o=o.substring(0,o.lastIndexOf("/")),i=K(o+"/"+e)),s+=""!==i||t||r?i+t+r:"/",s}{const{host:e,path:t,query:r}=n;return t||r?e+t+r+a.hash:B(e)}};function B(e){return e+("/"===e[e.length-1]?"":"/")}function K(e){let t=e.split("/");""===t[0]&&(t=t.slice(1));let n=[];return t.forEach(((e,a)=>{"."!==e&&(".."===e?n.pop():""===e&&a!==t.length-1||n.push(e))})),"/"+n.join("/")}const G=new RegExp("^([a-z][a-z0-9+.-]*:)?//","i");const Z={null:e=>null===e,boolean:e=>"boolean"==typeof e,object:e=>"object"==typeof e&&!Array.isArray(e)&&null!==e,array:e=>Array.isArray(e),number:e=>"number"==typeof e,integer:e=>Number.isInteger(e),string:e=>"string"==typeof e},H=e=>{const t=e.indexOf("#"),n=-1===t?e.length:t,a=e.slice(0,n),r=e.slice(n+1);return[decodeURI(a),decodeURI(r)]},W=e=>{const t=e.match(/^(.+):\/\//);return t?t[1]:""};var X={jsonTypeOf:(e,t)=>Z[t](e),splitUrl:H,safeResolveUrl:(e,t)=>{const n=z(e,t),a=H(e)[0];if(a&&"file"===W(n)&&"file"!==W(a))throw Error(`Can't access file '${n}' resource from network context '${e}'`);return n}};const Q=e=>{if(e.length>0&&"/"!==e[0])throw Error("Invalid JSON Pointer");return e.split("/").slice(1).map(ie)},Y=(e,t,n,a)=>{if(0===e.length)return n;if(e.length>1){const r=e.shift();return{...t,[r]:Y(e,se(t,r,a),n,ae(r,a))}}if(Array.isArray(t)){const a=[...t];return a[oe(t,e[0])]=n,a}return"object"==typeof t&&null!==t?{...t,[e[0]]:n}:se(t,e[0],a)},ee=(e,t,n,a)=>{if(0!==e.length)if(1!==e.length||ce(t)){const r=e.shift();ee(e,se(t,r,a),n,ae(r,a))}else{t[oe(t,e[0])]=n}},te=(e,t,n)=>{if(0!=e.length){if(e.length>1){const a=e.shift(),r=se(t,a,n);return{...t,[a]:te(e,r,ae(a,n))}}if(Array.isArray(t))return t.filter(((t,n)=>n!=e[0]));if("object"==typeof t&&null!==t){const{[e[0]]:n,...a}=t;return a}return se(t,e[0],n)}},ne=(e,t,n)=>{if(0!==e.length)if(e.length>1){const a=e.shift(),r=se(t,a,n);ne(e,r,ae(a,n))}else Array.isArray(t)?t.splice(e[0],1):"object"==typeof t&&null!==t?delete t[e[0]]:se(t,e[0],n)},ae=J(((e,t)=>t+"/"+re(e))),re=e=>e.toString().replace(/~/g,"~0").replace(/\//g,"~1"),ie=e=>e.toString().replace(/~1/g,"/").replace(/~0/g,"~"),oe=(e,t)=>Array.isArray(e)&&"-"===t?e.length:t,se=(e,t,n="")=>{if(void 0===e)throw TypeError(`Value at '${n}' is undefined and does not have property '${t}'`);if(null===e)throw TypeError(`Value at '${n}' is null and does not have property '${t}'`);if(ce(e))throw TypeError(`Value at '${n}' is a ${typeof e} and does not have property '${t}'`);return e[oe(e,t)]},ce=e=>null===e||"object"!=typeof e;var le={nil:"",append:ae,get:(e,t)=>{const n=Q(e),a=e=>n.reduce((([e,t],n)=>[se(e,n,t),ae(n,t)]),[e,""])[0];return void 0===t?a:a(t)},set:(e,t,n)=>{const a=Q(e),r=J(((e,t)=>Y(a,e,t,"")));return void 0===t?r:r(t,n)},assign:(e,t,n)=>{const a=Q(e),r=J(((e,t)=>ee(a,e,t,"")));return void 0===t?r:r(t,n)},unset:(e,t)=>{const n=Q(e),a=e=>te(n,e,"");return void 0===t?a:a(t)},delete:(e,t)=>{const n=Q(e),a=e=>ne(n,e,"");return void 0===t?a:a(t)}};le.nil,le.append,le.get,le.set,le.assign,le.unset;const me=Symbol("$__value"),pe=Symbol("$__href");var ue=(e,t)=>Object.freeze({[pe]:e,[me]:t}),fe=e=>e&&void 0!==e[pe],de=e=>e[pe],he=e=>e[me];const{jsonTypeOf:ye}=X,ve=Object.freeze({id:"",pointer:"",instance:void 0,value:void 0}),ge=e=>fe(e.value)?he(e.value):e.value,$e=J(((e,t)=>ye(ge(e),t))),be=(e,t)=>Object.freeze({...t,pointer:le.append(e,t.pointer),value:ge(t)[e]}),Oe=J(((e,t)=>ge(t).map(((n,a,r,i)=>e(be(a,t),a,r,i))))),je=J(((e,t)=>ge(t).map(((e,n,a,r)=>be(n,t))).filter(((t,n,a,r)=>e(t,n,a,r))))),Se=J(((e,t,n)=>ge(n).reduce(((t,a,r)=>e(t,be(r,n),r)),t))),Ie=J(((e,t)=>ge(t).every(((n,a,r,i)=>e(be(a,t),a,r,i))))),xe=J(((e,t)=>ge(t).some(((n,a,r,i)=>e(be(a,t),a,r,i)))));var we={cons:(e,t="")=>Object.freeze({...ve,id:t,instance:e,value:e}),uri:e=>`${e.id}#${encodeURI(e.pointer)}`,value:ge,has:(e,t)=>e in ge(t),typeOf:$e,step:be,entries:e=>Object.keys(ge(e)).map((t=>[t,be(t,e)])),keys:e=>Object.keys(ge(e)),map:Oe,filter:je,reduce:Se,every:Ie,some:xe,length:e=>ge(e).length},Ee=/; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g,Pe=/^[\u000b\u0020-\u007e\u0080-\u00ff]+$/,Ae=/^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/,Ce=/\\([\u000b\u0020-\u00ff])/g,Ne=/([\\"])/g,ke=/^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;function Re(e){var t=String(e);if(Ae.test(t))return t;if(t.length>0&&!Pe.test(t))throw new TypeError("invalid parameter value");return'"'+t.replace(Ne,"\\$1")+'"'}function Te(e){this.parameters=Object.create(null),this.type=e}var De={format:function(e){if(!e||"object"!=typeof e)throw new TypeError("argument obj is required");var t=e.parameters,n=e.type;if(!n||!ke.test(n))throw new TypeError("invalid type");var a=n;if(t&&"object"==typeof t)for(var r,i=Object.keys(t).sort(),o=0;o<i.length;o++){if(r=i[o],!Ae.test(r))throw new TypeError("invalid parameter name");a+="; "+r+"="+Re(t[r])}return a},parse:function(e){if(!e)throw new TypeError("argument string is required");var t="object"==typeof e?function(e){var t;"function"==typeof e.getHeader?t=e.getHeader("content-type"):"object"==typeof e.headers&&(t=e.headers&&e.headers["content-type"]);if("string"!=typeof t)throw new TypeError("content-type header is missing from object");return t}(e):e;if("string"!=typeof t)throw new TypeError("argument string is required to be a string");var n=t.indexOf(";"),a=-1!==n?t.substr(0,n).trim():t.trim();if(!ke.test(a))throw new TypeError("invalid media type");var r=new Te(a.toLowerCase());if(-1!==n){var i,o,s;for(Ee.lastIndex=n;o=Ee.exec(t);){if(o.index!==n)throw new TypeError("invalid parameter format");n+=o[0].length,i=o[1].toLowerCase(),'"'===(s=o[2])[0]&&(s=s.substr(1,s.length-2).replace(Ce,"$1")),r.parameters[i]=s}if(n!==t.length)throw new TypeError("invalid parameter format")}return r}},qe=async e=>Object.entries(await e),Me=J((async(e,t)=>(await t).map(e))),Ve=J((async(e,t,n)=>(await n).reduce((async(t,n)=>e(await t,n)),t))),Le=J((async(e,t,n={})=>Ve((async(t,n)=>await e(n)?t.concat([n]):t),[],t,n))),Je=J((async(e,t)=>{const n=await Me(e,t);return(await Promise.all(n)).some((e=>e))})),Ue=J((async(e,t)=>{const n=await Me(e,t);return(await Promise.all(n)).every((e=>e))})),_e=J(((e,t)=>e.reduce((async(e,t)=>t(await e)),t))),Fe={entries:qe,map:Me,filter:Le,reduce:Ve,some:Je,every:Ue,pipeline:_e,all:e=>Promise.all(e),allValues:e=>_e([qe,Ve((async(e,[t,n])=>(e[t]=await n,e)),{})],e)};Fe.entries,Fe.map,Fe.filter,Fe.reduce,Fe.some,Fe.every,Fe.pipeline,Fe.all,Fe.allValues;var ze=fetch;const{jsonTypeOf:Be,splitUrl:Ke,safeResolveUrl:Ge}=X,Ze={},He={},We=(e,t)=>{const n=e in He?He[e]:e;if(n in Ze)return Ze[n][t]},Xe={},Qe={},Ye=(e,t="",n="")=>{e=JSON.parse(JSON.stringify(e));const a=Ke(e.$schema||n)[0];if(!a)throw Error("Couldn't determine schema version");delete e.$schema;const r=We(a,"baseToken"),i=We(a,"anchorToken"),o=Ke(t)[0];if(!o&&!Ke(e[r]||"")[0])throw Error("Couldn't determine an identifier for the schema");const s=Ge(o,e[r]||""),[c,l]=Ke(s);delete e[r],l&&r===i&&(e[i]=i!==r?encodeURI(l):`#${encodeURI(l)}`),o&&(Qe[o]=c);const m={},p=We(a,"recursiveAnchorToken");let u;!0===e[p]&&(m[""]=c,e[i]="",delete e[p]);const f=We(a,"vocabularyToken");Be(e[f],"object")?(He[c]=a,u=e[f],delete e[f]):(He[c]=a,u={[a]:!0});const d={"":""};return Xe[c]={id:c,schemaVersion:a,schema:et(e,c,a,le.nil,d,m),anchors:d,dynamicAnchors:m,vocabulary:u,validated:!1},Xe[c]},et=(e,t,n,a,r,i)=>{if(Be(e,"object")){const o="string"==typeof e.$schema?Ke(e.$schema)[0]:n,s=We(o,"embeddedToken"),c=We(o,"anchorToken");if("string"==typeof e[s]&&(s!==c||"#"!==e[s][0])){const a=Ge(t,e[s]);return e[s]=a,Ye(e,a,n),ue(e[s],e)}const l=We(n,"anchorToken"),m=We(n,"dynamicAnchorToken");"string"==typeof e[m]&&(i[e[m]]=t,r[e[m]]=a,delete e[m]);const p=We(n,"embeddedToken");if("string"==typeof e[l]){const t=l!==p?e[l]:e[l].slice(1);r[t]=a,delete e[l]}const u=We(n,"jrefToken");if("string"==typeof e[u])return ue(e[u],e);for(let o in e)e[o]=et(e[o],t,n,le.append(o,a),r,i);return e}return Array.isArray(e)?e.map(((e,o)=>et(e,t,n,le.append(o,a),r,i))):e},tt=e=>Xe[Qe[e]]||Xe[e],nt=Object.freeze({id:"",schemaVersion:void 0,vocabulary:{},pointer:le.nil,schema:void 0,value:void 0,anchors:{},dynamicAnchors:{},validated:!0}),at=async(e,t=nt)=>{const n=Ge(ot(t),e),[a,r]=Ke(n);if(!(e=>e in Xe||e in Qe)(a)){const e=await ze(a,{headers:{Accept:"application/schema+json"}});if(e.status>=400)throw await e.text(),Error(`Failed to retrieve schema with id: ${a}`);if(e.headers.has("content-type")){const t=De.parse(e.headers.get("content-type")).type;if("application/schema+json"!==t)throw Error(`${a} is not a schema. Found a document with media type: ${t}`)}Ye(await e.json(),a)}const i=tt(a),o="/"!==r[0]?it(i,r):r,s=Object.freeze({...i,pointer:o,value:le.get(o,i.schema)});return rt(s)},rt=e=>fe(e.value)?at(de(e.value),e):e,it=(e,t)=>{if(!(t in e.anchors))throw Error(`No such anchor '${encodeURI(e.id)}#${encodeURI(t)}'`);return e.anchors[t]},ot=e=>`${e.id}#${encodeURI(e.pointer)}`,st=e=>fe(e.value)?he(e.value):e.value,ct=(e,t)=>{const n=tt(t.id),a=Object.freeze({...t,pointer:le.append(e,t.pointer),value:st(t)[e],validated:n.validated});return rt(a)},lt=J(((e,t)=>Fe.pipeline([st,Fe.map((async(n,a)=>e(await ct(a,t),a))),Fe.all],t)));var mt={setConfig:(e,t,n)=>{Ze[e]||(Ze[e]={}),Ze[e][t]=n},getConfig:We,add:Ye,get:at,markValidated:e=>{Xe[e].validated=!0},uri:ot,value:st,getAnchorPointer:it,typeOf:(e,t)=>Be(st(e),t),has:(e,t)=>e in st(t),step:ct,keys:e=>Object.keys(st(e)),entries:e=>Fe.pipeline([st,Object.keys,Fe.map((async t=>[t,await ct(t,e)])),Fe.all],e),map:lt,length:e=>st(e).length};mt.setConfig,mt.getConfig,mt.add,mt.get,mt.markValidated,mt.uri,mt.value,mt.getAnchorPointer,mt.typeOf,mt.has,mt.step,mt.keys,mt.entries,mt.map,mt.length;class pt extends Error{constructor(e){super("Invalid Schema"),this.name=this.constructor.name,this.output=e}}var ut=pt;const{splitUrl:ft}=X,dt="FLAG",ht="BASIC",yt="DETAILED",vt="VERBOSE";let gt=yt,$t=!0;const bt=async e=>{const t={metaData:{}};return{ast:t,schemaUri:await Pt(e,t)}},Ot=J((({ast:e,schemaUri:t},n,a=dt)=>{if(![dt,ht,yt,vt].includes(a))throw Error(`The '${a}' error format is not supported`);let r=[];const i=F.subscribe("result",jt(a,r));return At(t,n,e,{}),F.unsubscribe(i),r[0]})),jt=(e,t)=>{const n=[];return(a,r)=>{if("result"===a){const{keyword:e,absoluteKeywordLocation:t,instanceLocation:a,valid:i}=r,o={keyword:e,absoluteKeywordLocation:t,instanceLocation:a,valid:i,errors:[]};n.push(o)}else if("result.start"===a)n.push(a);else if("result.end"===a){const a=n.pop();for(;"result.start"!==n[n.length-1];){const t=n.pop(),r=[t];e===ht&&(r.push(...t.errors),delete t.errors),(e===vt||e!==dt&&!t.valid)&&a.errors.unshift(...r)}n[n.length-1]=a,t[0]=a}}},St={},It=e=>St[e],xt=e=>e in St,wt={},Et={},Pt=async(e,t)=>{if(!xt(`${e.schemaVersion}#validate`)){const t=await mt.get(e.schemaVersion);(mt.getConfig(t.id,"mandatoryVocabularies")||[]).forEach((e=>{if(!t.vocabulary[e])throw Error(`Vocabulary '${e}' must be explicitly declared and required`)})),Object.entries(t.vocabulary).forEach((([e,n])=>{if(e in wt)Object.entries(wt[e]).forEach((([e,n])=>{((e,t)=>{St[e]={collectEvaluatedItems:(e,n,a)=>t.interpret(e,n,a)&&new Set,collectEvaluatedProperties:(e,n,a)=>t.interpret(e,n,a)&&[],...t}})(`${t.id}#${e}`,n)}));else if(n)throw Error(`Missing required vocabulary: ${e}`)}))}if($t&&!e.validated){if(mt.markValidated(e.id),!(e.schemaVersion in Et)){const t=await mt.get(e.schemaVersion),n={metaData:{}},a=await Pt(t,n);Et[t.id]=Ot({ast:n,schemaUri:a})}const t=we.cons(e.schema,e.id),n=Et[e.schemaVersion](t,gt);if(!n.valid)throw new ut(n)}return e.id in t.metaData||(t.metaData[e.id]={id:e.id,dynamicAnchors:e.dynamicAnchors,anchors:e.anchors}),await It(`${e.schemaVersion}#validate`).compile(e,t),mt.uri(e)},At=(e,t,n,a)=>{const r=Ct(e,n),i=ft(e)[0];return It(r).interpret(e,t,n,{...n.metaData[i].dynamicAnchors,...a})},Ct=(e,t)=>{if(!(e in t))throw Error(`No schema found at ${e}`);return t[e][0]};var Nt={validate:async(e,t,n)=>{const a=await bt(e),r=(e,t=dt)=>Ot(a,we.cons(e),t);return void 0===t?r:r(t,n)},compile:bt,interpret:Ot,setMetaOutputFormat:e=>{gt=e},setShouldMetaValidate:e=>{$t=e},FLAG:dt,BASIC:ht,DETAILED:yt,VERBOSE:vt,add:(e,t="",n="")=>{const{id:a}=mt.add(e,t,n);delete Et[a]},getKeyword:It,hasKeyword:xt,defineVocabulary:(e,t)=>{wt[e]=t},compileSchema:Pt,interpretSchema:At,collectEvaluatedProperties:(e,t,n,a,r)=>{const i=Ct(e,n);return It(i).collectEvaluatedProperties(e,t,n,a,r)},collectEvaluatedItems:(e,t,n,a,r)=>{const i=Ct(e,n);return It(i).collectEvaluatedItems(e,t,n,a,r)}};var kt={compile:e=>mt.value(e),interpret:()=>!0};var Rt={compile:async(e,t)=>{const n=mt.uri(e);if(!(n in t)){t[n]=!1;const a=mt.value(e);if(!["object","boolean"].includes(typeof a))throw Error(`No schema found at '${mt.uri(e)}'`);t[n]=[`${e.schemaVersion}#validate`,mt.uri(e),"boolean"==typeof a?a:await Fe.pipeline([mt.entries,Fe.map((([t,n])=>[`${e.schemaVersion}#${t}`,n])),Fe.filter((([t])=>Nt.hasKeyword(t)&&t!==`${e.schemaVersion}#validate`)),Fe.map((async([n,a])=>{const r=await Nt.getKeyword(n).compile(a,t,e);return[n,mt.uri(a),r]})),Fe.all],e)]}return n},interpret:(e,t,n,a)=>{const[r,i,o]=n[e];F.publishSync("result.start");const s="boolean"==typeof o?o:o.every((([e,r,i])=>{F.publishSync("result.start");const o=Nt.getKeyword(e).interpret(i,t,n,a);return F.publishSync("result",{keyword:e,absoluteKeywordLocation:r,instanceLocation:we.uri(t),valid:o,ast:i}),F.publishSync("result.end"),o}));return F.publishSync("result",{keyword:r,absoluteKeywordLocation:i,instanceLocation:we.uri(t),valid:s,ast:e}),F.publishSync("result.end"),s},collectEvaluatedProperties:(e,t,n,a,r=!1)=>{const i=n[e][2];return"boolean"==typeof i?!!i&&[]:i.filter((([e])=>!r||!e.endsWith("#unevaluatedProperties"))).reduce(((e,[r,,i])=>{const o=e&&Nt.getKeyword(r).collectEvaluatedProperties(i,t,n,a);return!1!==o&&[...e,...o]}),[])},collectEvaluatedItems:(e,t,n,a,r=!1)=>{const i=n[e][2];return"boolean"==typeof i?!!i&&new Set:i.filter((([e])=>!r||!e.endsWith("#unevaluatedItems"))).reduce(((e,[r,,i])=>{const o=!1!==e&&Nt.getKeyword(r).collectEvaluatedItems(i,t,n,a);return!1!==o&&new Set([...e,...o])}),new Set)}},Tt={metaData:kt,validate:Rt},Dt={Core:Nt,Schema:mt,Instance:we,Keywords:Tt};const{Core:qt,Schema:Mt,Instance:Vt}=Dt;var Lt={compile:async(e,t,n)=>{const a=await Mt.step("items",n),r=Mt.typeOf(a,"array")?Mt.length(a):Number.MAX_SAFE_INTEGER;return Mt.typeOf(e,"boolean")?[r,Mt.value(e)]:[r,await qt.compileSchema(e,t)]},interpret:([e,t],n,a,r)=>!Vt.typeOf(n,"array")||("string"==typeof t?Vt.every(((n,i)=>i<e||qt.interpretSchema(t,n,a,r)),n):Vt.every(((n,a)=>a<e||t),n))};const{Core:Jt,Schema:Ut,Instance:_t}=Dt,Ft=([e,t],n,a,r)=>!_t.typeOf(n,"array")||_t.every(((n,i)=>i<e||Jt.interpretSchema(t,n,a,r)),n);var zt={compile:async(e,t,n)=>{const a=await Ut.step("items",n);return[Ut.typeOf(a,"array")?Ut.length(a):Number.MAX_SAFE_INTEGER,await Jt.compileSchema(e,t)]},interpret:Ft,collectEvaluatedItems:(e,t,n,a)=>Ft(e,t,n,a)&&new Set(_t.map(((e,t)=>t),t))};const{Core:Bt,Schema:Kt,Instance:Gt}=Dt;var Zt={compile:async(e,t,n)=>{const a=await Kt.step("properties",n),r=Kt.typeOf(a,"object")?Kt.keys(a):[],i=await Kt.step("patternProperties",n),o=Kt.typeOf(i,"object")?Kt.keys(i).map((e=>new RegExp(e))):[];return Kt.typeOf(e,"boolean")?[r,o,Kt.value(e)]:[r,o,await Bt.compileSchema(e,t)]},interpret:([e,t,n],a,r,i)=>{if(!Gt.typeOf(a,"object"))return!0;const o=Gt.entries(a).filter((([n])=>!e.includes(n)&&!t.some((e=>e.test(n)))));return"string"==typeof n?o.every((([,e])=>Bt.interpretSchema(n,e,r,i))):0===o.length||n}};const{Core:Ht,Schema:Wt,Instance:Xt}=Dt,Qt=([e,t,n],a,r,i)=>!Xt.typeOf(a,"object")||Xt.entries(a).filter((([n])=>!e.includes(n)&&!t.some((e=>e.test(n))))).every((([,e])=>Ht.interpretSchema(n,e,r,i)));var Yt={compile:async(e,t,n)=>{const a=await Wt.step("properties",n),r=Wt.typeOf(a,"object")?Wt.keys(a):[],i=await Wt.step("patternProperties",n);return[r,Wt.typeOf(i,"object")?Wt.keys(i).map((e=>new RegExp(e))):[],await Ht.compileSchema(e,t)]},interpret:Qt,collectEvaluatedProperties:(e,t,n,a)=>Qt(e,t,n,a)&&[new RegExp("")]};const{Core:en,Schema:tn}=Dt;var nn={compile:(e,t)=>Fe.pipeline([tn.map((async e=>en.compileSchema(await e,t))),Fe.all],e),interpret:(e,t,n,a)=>e.every((e=>en.interpretSchema(e,t,n,a))),collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,r)=>{const i=e&&en.collectEvaluatedProperties(r,t,n,a);return!1!==i&&[...e,...i]}),[]),collectEvaluatedItems:(e,t,n,a)=>e.reduce(((e,r)=>{const i=!1!==e&&en.collectEvaluatedItems(r,t,n,a);return!1!==i&&new Set([...e,...i])}),new Set)};const{Core:an,Schema:rn}=Dt;var on={compile:(e,t)=>Fe.pipeline([rn.map((async e=>an.compileSchema(await e,t))),Fe.all],e),interpret:(e,t,n,a)=>e.filter((e=>an.interpretSchema(e,t,n,a))).length>0,collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,r)=>{const i=an.collectEvaluatedProperties(r,t,n,a);return!1!==i?[...e||[],...i]:e}),!1),collectEvaluatedItems:(e,t,n,a)=>e.reduce(((e,r)=>{const i=an.collectEvaluatedItems(r,t,n,a);return!1!==i?new Set([...e||[],...i]):e}),!1)},sn=Object.keys,cn=JSON.stringify;function ln(e,t){var n,a,r,i,o,s,c;if("string"===(c=typeof e))return cn(e);if(!0===e)return"true";if(!1===e)return"false";if(null===e)return"null";if(e instanceof Array){for(r="[",a=e.length-1,n=0;n<a;n++)r+=ln(e[n],!1)+",";return a>-1&&(r+=ln(e[n],!1)),r+"]"}if(e instanceof Object){if("function"==typeof e.toJSON)return ln(e.toJSON(),t);for(a=(i=sn(e).sort()).length,r="",n=0;n<a;)void 0!==(s=ln(e[o=i[n]],!0))&&(n&&""!==r&&(r+=","),r+=cn(o)+":"+s),n++;return"{"+r+"}"}switch(c){case"function":case"undefined":return t?void 0:null;default:return isFinite(e)?e:null}}var mn=function(e){return""+ln(e,!1)};const{Schema:pn,Instance:un}=Dt;var fn={compile:e=>mn(pn.value(e)),interpret:(e,t)=>mn(un.value(t))===e};const{Core:dn,Instance:hn}=Dt;var yn={compile:(e,t)=>dn.compileSchema(e,t),interpret:(e,t,n,a)=>!hn.typeOf(t,"array")||hn.some((t=>dn.interpretSchema(e,t,n,a)),t)};const{Core:vn,Schema:gn,Instance:$n}=Dt,bn=({contains:e,minContains:t,maxContains:n},a,r,i)=>{if(!$n.typeOf(a,"array"))return!0;const o=$n.reduce(((t,n)=>vn.interpretSchema(e,n,r,i)?t+1:t),0,a);return o>=t&&o<=n};var On={compile:async(e,t,n)=>{const a=await vn.compileSchema(e,t),r=await gn.step("minContains",n),i=gn.typeOf(r,"number")?gn.value(r):1,o=await gn.step("maxContains",n);return{contains:a,minContains:i,maxContains:gn.typeOf(o,"number")?gn.value(o):Number.MAX_SAFE_INTEGER}},interpret:bn,collectEvaluatedItems:(e,t,n,a)=>bn(e,t,n,a)&&$n.reduce(((t,r,i)=>vn.interpretSchema(e.contains,r,n,a)?t.add(i):t),new Set,t)};const{Core:jn,Schema:Sn,Instance:In}=Dt,xn=({contains:e,minContains:t,maxContains:n},a,r,i)=>{if(!In.typeOf(a,"array")&&!In.typeOf(a,"object"))return!0;const o=In.entries(a).reduce(((t,[,n])=>jn.interpretSchema(e,n,r,i)?t+1:t),0);return o>=t&&o<=n};var wn={compile:async(e,t,n)=>{const a=await jn.compileSchema(e,t),r=await Sn.step("minContains",n),i=Sn.typeOf(r,"number")?Sn.value(r):1,o=await Sn.step("maxContains",n);return{contains:a,minContains:i,maxContains:Sn.typeOf(o,"number")?Sn.value(o):Number.MAX_SAFE_INTEGER}},interpret:xn,collectEvaluatedItems:(e,t,n,a)=>xn(e,t,n,a)&&In.typeOf(t,"array")&&In.reduce(((t,r,i)=>jn.interpretSchema(e.contains,r,n,a)?t.add(i):t),new Set,t),collectEvaluatedProperties:(e,t,n,a)=>xn(e,t,n,a)&&In.typeOf(t,"object")&&In.entries(t).reduce(((t,[r,i])=>(jn.interpretSchema(e.contains,i,n,a)&&t.push(r),t)),[],t)};const{Core:En,Schema:Pn}=Dt;var An={compile:async(e,t)=>{await Fe.pipeline([Pn.entries,Fe.map((([,e])=>En.compileSchema(e,t))),Fe.all],e)},interpret:()=>!0};const{Core:Cn,Schema:Nn,Instance:kn}=Dt;var Rn={compile:(e,t)=>Fe.pipeline([Nn.entries,Fe.map((async([e,n])=>[e,Nn.typeOf(n,"array")?Nn.value(n):await Cn.compileSchema(n,t)])),Fe.all],e),interpret:(e,t,n,a)=>{const r=kn.value(t);return!kn.typeOf(t,"object")||e.every((([e,i])=>!(e in r)||(Array.isArray(i)?i.every((e=>e in r)):Cn.interpretSchema(i,t,n,a))))}};const{Schema:Tn,Instance:Dn}=Dt;var qn={compile:e=>Fe.pipeline([Tn.entries,Fe.map((([e,t])=>[e,Tn.value(t)])),Fe.all],e),interpret:(e,t)=>{const n=Dn.value(t);return!Dn.typeOf(t,"object")||e.every((([e,t])=>!(e in n)||t.every((e=>e in n))))}};const{Core:Mn,Schema:Vn,Instance:Ln}=Dt;var Jn={compile:(e,t)=>Fe.pipeline([Vn.entries,Fe.map((async([e,n])=>[e,await Mn.compileSchema(n,t)])),Fe.all],e),interpret:(e,t,n,a)=>{const r=Ln.value(t);return!Ln.typeOf(t,"object")||e.every((([e,i])=>!(e in r)||Mn.interpretSchema(i,t,n,a)))},collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,[r,i])=>{if(!e||!Ln.has(r,t))return e;const o=Mn.collectEvaluatedProperties(i,t,n,a);return!1!==o&&e.concat(o)}),[])};const{Core:Un,Schema:_n}=Dt,{safeResolveUrl:Fn,splitUrl:zn}=X;var Bn={compile:e=>{const t=Fn(e.id,_n.value(e));return zn(t)},interpret:([e,t],n,a,r)=>{const i=t in a.metaData[e].dynamicAnchors?r[t]:e,o=_n.getAnchorPointer(a.metaData[i],t);return Un.interpretSchema(`${i}#${o}`,n,a,r)},collectEvaluatedProperties:Un.collectEvaluatedProperties,collectEvaluatedItems:Un.collectEvaluatedItems};const{Core:Kn,Schema:Gn}=Dt,{safeResolveUrl:Zn,splitUrl:Hn}=X;var Wn={compile:e=>Hn(Gn.value(e)),interpret:([e,t],n,a,r)=>{if(!(t in r))throw Error(`No dynamic anchor found for "${t}"`);const i=Zn(r[t],e),o=Gn.getAnchorPointer(a.metaData[i],t);return Kn.interpretSchema(`${i}#${o}`,n,a,r)},collectEvaluatedProperties:Kn.collectEvaluatedProperties,collectEvaluatedItems:Kn.collectEvaluatedItems};const{Schema:Xn,Instance:Qn}=Dt;var Yn={compile:e=>Xn.value(e).map(mn),interpret:(e,t)=>e.some((e=>mn(Qn.value(t))===e))};const{Schema:ea,Instance:ta}=Dt;var na={compile:async e=>ea.value(e),interpret:(e,t)=>!ta.typeOf(t,"number")||ta.value(t)<e};const{Schema:aa,Instance:ra}=Dt;var ia={compile:async e=>aa.value(e),interpret:(e,t)=>!ra.typeOf(t,"number")||ra.value(t)>e};const{Core:oa}=Dt;var sa={compile:(e,t)=>oa.compileSchema(e,t),interpret:(e,t,n,a)=>(oa.interpretSchema(e,t,n,a),!0),collectEvaluatedProperties:(e,t,n,a)=>oa.collectEvaluatedProperties(e,t,n,a)||[],collectEvaluatedItems:(e,t,n,a)=>oa.collectEvaluatedItems(e,t,n,a)||new Set};const{Core:ca,Schema:la}=Dt,ma=(e,t,n,a)=>{const r=n[e][2];return"boolean"==typeof r?r:r.every((([e,,r])=>ca.getKeyword(e).interpret(r,t,n,a)))};var pa={compile:async(e,t,n)=>{if(la.has("if",n)){const a=await la.step("if",n);return[await ca.compileSchema(a,t),await ca.compileSchema(e,t)]}return[]},interpret:([e,t],n,a,r)=>void 0===e||!ma(e,n,a,r)||ca.interpretSchema(t,n,a,r),collectEvaluatedProperties:([e,t],n,a,r)=>void 0!==e&&ma(e,n,a,r)?ca.collectEvaluatedProperties(t,n,a,r):[],collectEvaluatedItems:([e,t],n,a,r)=>void 0!==e&&ma(e,n,a,r)?ca.collectEvaluatedItems(t,n,a,r):new Set};const{Core:ua,Schema:fa}=Dt,da=(e,t,n,a)=>{const r=n[e][2];return"boolean"==typeof r?r:r.every((([e,,r])=>ua.getKeyword(e).interpret(r,t,n,a)))};var ha={compile:async(e,t,n)=>{if(fa.has("if",n)){const a=await fa.step("if",n);return[await ua.compileSchema(a,t),await ua.compileSchema(e,t)]}return[]},interpret:([e,t],n,a,r)=>void 0===e||da(e,n,a,r)||ua.interpretSchema(t,n,a,r),collectEvaluatedProperties:([e,t],n,a,r)=>void 0===e||da(e,n,a,r)?[]:ua.collectEvaluatedProperties(t,n,a,r),collectEvaluatedItems:([e,t],n,a,r)=>void 0===e||da(e,n,a,r)?new Set:ua.collectEvaluatedItems(t,n,a,r)};const{Core:ya,Schema:va,Instance:ga}=Dt,$a=(e,t,n,a)=>!ga.typeOf(t,"array")||("string"==typeof e?ga.every((t=>ya.interpretSchema(e,t,n,a)),t):ga.every(((t,r)=>!(r in e)||ya.interpretSchema(e[r],t,n,a)),t));var ba={compile:(e,t)=>va.typeOf(e,"array")?Fe.pipeline([va.map((e=>ya.compileSchema(e,t))),Fe.all],e):ya.compileSchema(e,t),interpret:$a,collectEvaluatedItems:(e,t,n,a)=>$a(e,t,n,a)&&("string"==typeof e?new Set(ga.map(((e,t)=>t),t)):new Set(e.map(((e,t)=>t))))};const{Core:Oa,Schema:ja,Instance:Sa}=Dt,Ia=([e,t],n,a,r)=>!Sa.typeOf(n,"array")||Sa.every(((n,i)=>i<e||Oa.interpretSchema(t,n,a,r)),n);var xa={compile:async(e,t,n)=>{const a=await ja.step("prefixItems",n);return[ja.typeOf(a,"array")?ja.length(a):0,await Oa.compileSchema(e,t)]},interpret:Ia,collectEvaluatedItems:(e,t,n,a)=>Ia(e,t,n,a)&&new Set(Sa.map(((e,t)=>t),t))};const{Schema:wa,Instance:Ea}=Dt;var Pa={compile:e=>wa.value(e),interpret:(e,t)=>!Ea.typeOf(t,"array")||Ea.length(t)<=e};const{Schema:Aa,Instance:Ca}=Dt;var Na={compile:e=>Aa.value(e),interpret:(e,t)=>!Ca.typeOf(t,"string")||Ca.length(t)<=e};const{Schema:ka,Instance:Ra}=Dt;var Ta={compile:e=>ka.value(e),interpret:(e,t)=>!Ra.typeOf(t,"string")||[...Ra.value(t)].length<=e};const{Schema:Da,Instance:qa}=Dt;var Ma={compile:e=>Da.value(e),interpret:(e,t)=>!qa.typeOf(t,"object")||qa.keys(t).length<=e};const{Schema:Va,Instance:La}=Dt;var Ja={compile:async(e,t,n)=>{const a=await Va.step("exclusiveMaximum",n),r=Va.value(a);return[Va.value(e),r]},interpret:([e,t],n)=>{if(!La.typeOf(n,"number"))return!0;const a=La.value(n);return t?a<e:a<=e}};const{Schema:Ua,Instance:_a}=Dt;var Fa={compile:async e=>Ua.value(e),interpret:(e,t)=>!_a.typeOf(t,"number")||_a.value(t)<=e};const{Schema:za,Instance:Ba}=Dt;var Ka={compile:e=>za.value(e),interpret:(e,t)=>!Ba.typeOf(t,"array")||Ba.length(t)>=e};const{Schema:Ga,Instance:Za}=Dt;var Ha={compile:e=>Ga.value(e),interpret:(e,t)=>!Za.typeOf(t,"string")||Za.value(t).length>=e};const{Schema:Wa,Instance:Xa}=Dt;var Qa={compile:e=>Wa.value(e),interpret:(e,t)=>!Xa.typeOf(t,"string")||[...Xa.value(t)].length>=e};const{Schema:Ya,Instance:er}=Dt;var tr={compile:e=>Ya.value(e),interpret:(e,t)=>{const n=er.value(t);return!er.typeOf(t,"object")||Object.keys(n).length>=e}};const{Schema:nr,Instance:ar}=Dt;var rr={compile:async(e,t,n)=>{const a=await nr.step("exclusiveMinimum",n),r=nr.value(a);return[nr.value(e),r]},interpret:([e,t],n)=>{if(!ar.typeOf(n,"number"))return!0;const a=ar.value(n);return t?a>e:a>=e}};const{Schema:ir,Instance:or}=Dt;var sr={compile:async e=>ir.value(e),interpret:(e,t)=>!or.typeOf(t,"number")||or.value(t)>=e};const{Schema:cr,Instance:lr}=Dt,mr=(e,t)=>Math.abs(e-t)<1.1920929e-7;var pr={compile:e=>cr.value(e),interpret:(e,t)=>{if(!lr.typeOf(t,"number"))return!0;const n=lr.value(t)%e;return mr(0,n)||mr(e,n)}};const{Core:ur}=Dt;var fr={compile:ur.compileSchema,interpret:(e,t,n,a)=>!ur.interpretSchema(e,t,n,a)};const{Core:dr,Schema:hr}=Dt;var yr={compile:(e,t)=>Fe.pipeline([hr.map((async e=>dr.compileSchema(await e,t))),Fe.all],e),interpret:(e,t,n,a)=>{let r=0;for(const i of e)if(dr.interpretSchema(i,t,n,a)&&r++,r>1)break;return 1===r},collectEvaluatedProperties:(e,t,n,a)=>{let r=0;return e.reduce(((e,i)=>{if(r>1)return!1;const o=dr.collectEvaluatedProperties(i,t,n,a);return o?0==r++&&o:e}),!1)},collectEvaluatedItems:(e,t,n,a)=>{let r=0;return e.reduce(((e,i)=>{if(r>1)return!1;const o=dr.collectEvaluatedItems(i,t,n,a);return o?0==r++&&o:e}),!1)}};const{Schema:vr,Instance:gr}=Dt;var $r={compile:e=>new RegExp(vr.value(e),"u"),interpret:(e,t)=>!gr.typeOf(t,"string")||e.test(gr.value(t))};const{Core:br,Schema:Or,Instance:jr}=Dt,Sr=(e,t,n,a)=>!jr.typeOf(t,"object")||e.every((([e,r])=>jr.entries(t).filter((([t])=>e.test(t))).every((([,e])=>br.interpretSchema(r,e,n,a)))));var Ir={compile:(e,t)=>Fe.pipeline([Or.entries,Fe.map((async([e,n])=>[new RegExp(e,"u"),await br.compileSchema(n,t)])),Fe.all],e),interpret:Sr,collectEvaluatedProperties:(e,t,n,a)=>Sr(e,t,n,a)&&e.map((([e])=>e))};var xr={isObject:e=>"object"==typeof e&&!Array.isArray(e)&&null!==e,escapeRegExp:e=>e.replace(/[.*+\-?^${}()|[\]\\]/g,"\\$&")};const{Core:wr,Schema:Er,Instance:Pr}=Dt,{escapeRegExp:Ar}=xr,Cr=(e,t,n,a)=>!Pr.typeOf(t,"object")||Pr.entries(t).filter((([t])=>t in e)).every((([t,r])=>wr.interpretSchema(e[t],r,n,a)));var Nr={compile:(e,t)=>Fe.pipeline([Er.entries,Fe.reduce((async(e,[n,a])=>(e[n]=await wr.compileSchema(a,t),e)),Object.create(null))],e),interpret:Cr,collectEvaluatedProperties:(e,t,n,a)=>Cr(e,t,n,a)&&Object.keys(e).map((e=>new RegExp(`^${Ar(e)}$`)))};const{Core:kr,Instance:Rr}=Dt;var Tr={compile:(e,t)=>kr.compileSchema(e,t),interpret:(e,t,n,a)=>!Rr.typeOf(t,"object")||Rr.keys(t).every((t=>kr.interpretSchema(e,Rr.cons(t),n,a)))};const{Core:Dr,Schema:qr}=Dt;var Mr={compile:async(e,t)=>{const n=await qr.get(qr.value(e),e);return Dr.compileSchema(n,t)},interpret:Dr.interpretSchema,collectEvaluatedProperties:Dr.collectEvaluatedProperties,collectEvaluatedItems:Dr.collectEvaluatedItems};const{Schema:Vr,Instance:Lr}=Dt;var Jr={compile:e=>Vr.value(e),interpret:(e,t)=>!Lr.typeOf(t,"object")||e.every((e=>Lr.value(t).hasOwnProperty(e)))};const{Core:Ur,Schema:_r,Instance:Fr}=Dt,zr=(e,t,n,a)=>!Fr.typeOf(t,"array")||Fr.every(((t,r)=>!(r in e)||Ur.interpretSchema(e[r],t,n,a)),t);var Br={compile:(e,t)=>Fe.pipeline([_r.map((e=>Ur.compileSchema(e,t))),Fe.all],e),interpret:zr,collectEvaluatedItems:(e,t,n,a)=>zr(e,t,n,a)&&new Set(e.map(((e,t)=>t)))};const{Schema:Kr,Instance:Gr}=Dt;var Zr={compile:e=>Kr.value(e),interpret:(e,t)=>"string"==typeof e?Gr.typeOf(t,e):e.some(Gr.typeOf(t))};const{Core:Hr,Schema:Wr,Instance:Xr}=Dt,Qr=([e,t],n,a,r)=>{if(!Xr.typeOf(n,"array"))return!0;const i=Hr.collectEvaluatedItems(e,n,a,r,!0);return!1===i||Xr.every(((e,o)=>i.has(o)||Hr.interpretSchema(t,Xr.step(o,n),a,r)),n)};var Yr={compile:async(e,t,n)=>[Wr.uri(n),await Hr.compileSchema(e,t)],interpret:Qr,collectEvaluatedItems:(e,t,n,a)=>Qr(e,t,n,a)&&new Set(Xr.map(((e,t)=>t),t))};const{Core:ei,Schema:ti,Instance:ni}=Dt,ai=([e,t],n,a,r)=>{if(!ni.typeOf(n,"object"))return!0;const i=ei.collectEvaluatedProperties(e,n,a,r,!0);return!i||ni.entries(n).filter((([e])=>!i.some((t=>e.match(t))))).every((([,e])=>ei.interpretSchema(t,e,a,r)))};var ri={compile:async(e,t,n)=>[ti.uri(n),await ei.compileSchema(e,t)],interpret:ai,collectEvaluatedProperties:(e,t,n,a)=>ai(e,t,n,a)&&[new RegExp("")]};const{Schema:ii,Instance:oi}=Dt;var si={compile:e=>ii.value(e),interpret:(e,t)=>{if(!oi.typeOf(t,"array")||!1===e)return!0;const n=oi.map((e=>mn(oi.value(e))),t);return new Set(n).size===n.length}};const{Keywords:ci}=Dt;var li={additionalItems:Lt,additionalItems6:zt,additionalProperties:Zt,additionalProperties6:Yt,allOf:nn,anyOf:on,const:fn,contains:yn,containsMinContainsMaxContains:On,containsMinContainsMaxContainsFUTURE:wn,definitions:An,dependencies:Rn,dependentRequired:qn,dependentSchemas:Jn,dynamicRef:Bn,dynamicRefFUTURE:Wn,enum:Yn,exclusiveMaximum:na,exclusiveMinimum:ia,if:sa,then:pa,else:ha,items:ba,items202012:xa,maxItems:Pa,maxLength:Na,maxLength6:Ta,maxProperties:Ma,maximumExclusiveMaximum:Ja,maximum:Fa,metaData:ci.metaData,minItems:Ka,minLength:Ha,minLength6:Qa,minProperties:tr,minimumExclusiveMinimum:rr,minimum:sr,multipleOf:pr,not:fr,oneOf:yr,pattern:$r,patternProperties:Ir,properties:Nr,propertyNames:Tr,ref:Mr,required:Jr,tupleItems:Br,type:Zr,unevaluatedItems:Yr,unevaluatedProperties:ri,uniqueItems:si,validate:ci.validate};const{Core:mi,Schema:pi}=Dt,ui="http://json-schema.org/draft-04/schema";pi.setConfig(ui,"baseToken","id"),pi.setConfig(ui,"embeddedToken","id"),pi.setConfig(ui,"anchorToken","id"),pi.setConfig(ui,"jrefToken","$ref"),pi.add(JSON.parse('{\n    "id": "http://json-schema.org/draft-04/schema#",\n    "$schema": "http://json-schema.org/draft-04/schema#",\n    "description": "Core schema meta-schema",\n    "definitions": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$ref": "#" }\n        },\n        "positiveInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "positiveIntegerDefault0": {\n            "allOf": [ { "$ref": "#/definitions/positiveInteger" }, { "default": 0 } ]\n        },\n        "simpleTypes": {\n            "enum": [ "array", "boolean", "integer", "null", "number", "object", "string" ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "minItems": 1,\n            "uniqueItems": true\n        }\n    },\n    "type": "object",\n    "properties": {\n        "id": {\n            "type": "string"\n        },\n        "$schema": {\n            "type": "string"\n        },\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": {},\n        "multipleOf": {\n            "type": "number",\n            "minimum": 0,\n            "exclusiveMinimum": true\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "boolean",\n            "default": false\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxLength": { "$ref": "#/definitions/positiveInteger" },\n        "minLength": { "$ref": "#/definitions/positiveIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "additionalItems": {\n            "anyOf": [\n                { "type": "boolean" },\n                { "$ref": "#" }\n            ],\n            "default": {}\n        },\n        "items": {\n            "anyOf": [\n                { "$ref": "#" },\n                { "$ref": "#/definitions/schemaArray" }\n            ],\n            "default": {}\n        },\n        "maxItems": { "$ref": "#/definitions/positiveInteger" },\n        "minItems": { "$ref": "#/definitions/positiveIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxProperties": { "$ref": "#/definitions/positiveInteger" },\n        "minProperties": { "$ref": "#/definitions/positiveIntegerDefault0" },\n        "required": { "$ref": "#/definitions/stringArray" },\n        "additionalProperties": {\n            "anyOf": [\n                { "type": "boolean" },\n                { "$ref": "#" }\n            ],\n            "default": {}\n        },\n        "definitions": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "dependencies": {\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$ref": "#" },\n                    { "$ref": "#/definitions/stringArray" }\n                ]\n            }\n        },\n        "enum": {\n            "type": "array",\n            "minItems": 1,\n            "uniqueItems": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/definitions/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/definitions/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        },\n        "format": { "type": "string" },\n        "allOf": { "$ref": "#/definitions/schemaArray" },\n        "anyOf": { "$ref": "#/definitions/schemaArray" },\n        "oneOf": { "$ref": "#/definitions/schemaArray" },\n        "not": { "$ref": "#" }\n    },\n    "dependencies": {\n        "exclusiveMaximum": [ "maximum" ],\n        "exclusiveMinimum": [ "minimum" ]\n    },\n    "default": {}\n}')),mi.defineVocabulary(ui,{validate:li.validate,additionalItems:li.additionalItems,additionalProperties:li.additionalProperties,allOf:li.allOf,anyOf:li.anyOf,default:li.metaData,definitions:li.definitions,dependencies:li.dependencies,description:li.metaData,enum:li.enum,format:li.metaData,items:li.items,maxItems:li.maxItems,maxLength:li.maxLength,maxProperties:li.maxProperties,maximum:li.maximumExclusiveMaximum,minItems:li.minItems,minLength:li.minLength,minProperties:li.minProperties,minimum:li.minimumExclusiveMinimum,multipleOf:li.multipleOf,not:li.not,oneOf:li.oneOf,pattern:li.pattern,patternProperties:li.patternProperties,properties:li.properties,required:li.required,title:li.metaData,type:li.type,uniqueItems:li.uniqueItems});const fi="http://json-schema.org/draft-04/hyper-schema";pi.setConfig(fi,"baseToken","id"),pi.setConfig(fi,"embeddedToken","id"),pi.setConfig(fi,"anchorToken","id"),pi.setConfig(fi,"jrefToken","$ref"),pi.add(JSON.parse('{\n    "$schema": "http://json-schema.org/draft-04/hyper-schema#",\n    "id": "http://json-schema.org/draft-04/hyper-schema#",\n    "title": "JSON Hyper-Schema",\n    "allOf": [\n        {"$ref": "http://json-schema.org/draft-04/schema#"}\n    ],\n    "properties": {\n        "additionalItems": {\n            "anyOf": [\n                {"type": "boolean"},\n                {"$ref": "#"}\n            ]\n        },\n        "additionalProperties": {\n            "anyOf": [\n                {"type": "boolean"},\n                {"$ref": "#"}\n            ]\n        },\n        "dependencies": {\n            "additionalProperties": {\n                "anyOf": [\n                    {"$ref": "#"},\n                    {"type": "array"}\n                ]\n            }\n        },\n        "items": {\n            "anyOf": [\n                {"$ref": "#"},\n                {"$ref": "#/definitions/schemaArray"}\n            ]\n        },\n        "definitions": {\n            "additionalProperties": {"$ref": "#"}\n        },\n        "patternProperties": {\n            "additionalProperties": {"$ref": "#"}\n        },\n        "properties": {\n            "additionalProperties": {"$ref": "#"}\n        },\n        "allOf": {"$ref": "#/definitions/schemaArray"},\n        "anyOf": {"$ref": "#/definitions/schemaArray"},\n        "oneOf": {"$ref": "#/definitions/schemaArray"},\n        "not": { "$ref": "#" },\n\n        "links": {\n            "type": "array",\n            "items": {"$ref": "#/definitions/linkDescription"}\n        },\n        "fragmentResolution": {\n            "type": "string"\n        },\n        "media": {\n            "type": "object",\n            "properties": {\n                "type": {\n                    "description": "A media type, as described in RFC 2046",\n                    "type": "string"\n                },\n                "binaryEncoding": {\n                    "description": "A content encoding scheme, as described in RFC 2045",\n                    "type": "string"\n                }\n            }\n        },\n        "pathStart": {\n            "description": "Instances\' URIs must start with this value for this schema to apply to them",\n            "type": "string",\n            "format": "uri"\n        }\n    },\n    "definitions": {\n        "schemaArray": {\n            "type": "array",\n            "items": {"$ref": "#"}\n        },\n        "linkDescription": {\n            "title": "Link Description Object",\n            "type": "object",\n            "required": ["href", "rel"],\n            "properties": {\n                "href": {\n                    "description": "a URI template, as defined by RFC 6570, with the addition of the $, ( and ) characters for pre-processing",\n                    "type": "string"\n                },\n                "rel": {\n                    "description": "relation to the target resource of the link",\n                    "type": "string"\n                },\n                "title": {\n                    "description": "a title for the link",\n                    "type": "string"\n                },\n                "targetSchema": {\n                    "description": "JSON Schema describing the link target",\n                    "$ref": "#"\n                },\n                "mediaType": {\n                    "description": "media type (as defined by RFC 2046) describing the link target",\n                    "type": "string"\n                },\n                "method": {\n                    "description": "method for requesting the target of the link (e.g. for HTTP this might be \\"GET\\" or \\"DELETE\\")",\n                    "type": "string"\n                },\n                "encType": {\n                    "description": "The media type in which to submit data along with the request",\n                    "type": "string",\n                    "default": "application/json"\n                },\n                "schema": {\n                    "description": "Schema describing the data to submit along with the request",\n                    "$ref": "#"\n                }\n            }\n        },\n        "readOnly": {\n            "description": "If true, indicates that the value of this property is controlled by the server.",\n            "type": "boolean",\n            "default": false\n        }\n    },\n    "links": [\n        {\n            "rel": "self",\n            "href": "{+id}"\n        },\n        {\n            "rel": "full",\n            "href": "{+($ref)}"\n        }\n    ]\n}')),mi.defineVocabulary(fi,{validate:li.validate,additionalItems:li.additionalItems,additionalProperties:li.additionalProperties,allOf:li.allOf,anyOf:li.anyOf,default:li.metaData,definitions:li.definitions,dependencies:li.dependencies,description:li.metaData,enum:li.enum,format:li.metaData,fragmentResolution:li.metaData,items:li.items,maxItems:li.maxItems,minProperties:li.minProperties,maxProperties:li.maxProperties,maximum:li.maximumExclusiveMaximum,media:li.metaData,minItems:li.minItems,minLength:li.minLength,maxLength:li.maxLength,minimum:li.minimumExclusiveMinimum,multipleOf:li.multipleOf,links:li.metaData,not:li.not,oneOf:li.oneOf,pathStart:li.metaData,pattern:li.pattern,patternProperties:li.patternProperties,properties:li.properties,readOnly:li.metaData,required:li.required,title:li.metaData,type:li.type,uniqueItems:li.uniqueItems});const{Core:di,Schema:hi}=Dt,yi="http://json-schema.org/draft-06/schema";hi.setConfig(yi,"baseToken","$id"),hi.setConfig(yi,"embeddedToken","$id"),hi.setConfig(yi,"anchorToken","$id"),hi.setConfig(yi,"jrefToken","$ref"),hi.add(JSON.parse('{\n    "$schema": "http://json-schema.org/draft-06/schema#",\n    "$id": "http://json-schema.org/draft-06/schema#",\n    "title": "Core schema meta-schema",\n    "definitions": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$ref": "#" }\n        },\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "allOf": [\n                { "$ref": "#/definitions/nonNegativeInteger" },\n                { "default": 0 }\n            ]\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    },\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": {},\n        "examples": {\n            "type": "array",\n            "items": {}\n        },\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "additionalItems": { "$ref": "#" },\n        "items": {\n            "anyOf": [\n                { "$ref": "#" },\n                { "$ref": "#/definitions/schemaArray" }\n            ],\n            "default": {}\n        },\n        "maxItems": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "contains": { "$ref": "#" },\n        "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/definitions/stringArray" },\n        "additionalProperties": { "$ref": "#" },\n        "definitions": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "dependencies": {\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$ref": "#" },\n                    { "$ref": "#/definitions/stringArray" }\n                ]\n            }\n        },\n        "propertyNames": { "$ref": "#" },\n        "const": {},\n        "enum": {\n            "type": "array",\n            "minItems": 1,\n            "uniqueItems": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/definitions/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/definitions/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        },\n        "format": { "type": "string" },\n        "allOf": { "$ref": "#/definitions/schemaArray" },\n        "anyOf": { "$ref": "#/definitions/schemaArray" },\n        "oneOf": { "$ref": "#/definitions/schemaArray" },\n        "not": { "$ref": "#" }\n    },\n    "default": {}\n}')),di.defineVocabulary(yi,{validate:li.validate,additionalItems:li.additionalItems6,additionalProperties:li.additionalProperties6,allOf:li.allOf,anyOf:li.anyOf,const:li.const,contains:li.contains,default:li.metaData,definitions:li.definitions,dependencies:li.dependencies,description:li.metaData,enum:li.enum,examples:li.metaData,exclusiveMaximum:li.exclusiveMaximum,exclusiveMinimum:li.exclusiveMinimum,format:li.metaData,items:li.items,maxItems:li.maxItems,maxLength:li.maxLength6,maxProperties:li.maxProperties,maximum:li.maximum,minItems:li.minItems,minLength:li.minLength6,minProperties:li.minProperties,minimum:li.minimum,multipleOf:li.multipleOf,not:li.not,oneOf:li.oneOf,pattern:li.pattern,patternProperties:li.patternProperties,properties:li.properties,propertyNames:li.propertyNames,required:li.required,title:li.metaData,type:li.type,uniqueItems:li.uniqueItems});const{Core:vi,Schema:gi}=Dt,$i="http://json-schema.org/draft-07/schema";gi.setConfig($i,"baseToken","$id"),gi.setConfig($i,"embeddedToken","$id"),gi.setConfig($i,"anchorToken","$id"),gi.setConfig($i,"jrefToken","$ref"),gi.add(JSON.parse('{\n    "$schema": "http://json-schema.org/draft-07/schema#",\n    "$id": "http://json-schema.org/draft-07/schema#",\n    "title": "Core schema meta-schema",\n    "definitions": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$ref": "#" }\n        },\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "allOf": [\n                { "$ref": "#/definitions/nonNegativeInteger" },\n                { "default": 0 }\n            ]\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    },\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$comment": {\n            "type": "string"\n        },\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": true,\n        "readOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "writeOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "examples": {\n            "type": "array",\n            "items": true\n        },\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "additionalItems": { "$ref": "#" },\n        "items": {\n            "anyOf": [\n                { "$ref": "#" },\n                { "$ref": "#/definitions/schemaArray" }\n            ],\n            "default": true\n        },\n        "maxItems": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "contains": { "$ref": "#" },\n        "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/definitions/stringArray" },\n        "additionalProperties": { "$ref": "#" },\n        "definitions": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "propertyNames": { "format": "regex" },\n            "default": {}\n        },\n        "dependencies": {\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$ref": "#" },\n                    { "$ref": "#/definitions/stringArray" }\n                ]\n            }\n        },\n        "propertyNames": { "$ref": "#" },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true,\n            "minItems": 1,\n            "uniqueItems": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/definitions/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/definitions/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        },\n        "format": { "type": "string" },\n        "contentMediaType": { "type": "string" },\n        "contentEncoding": { "type": "string" },\n        "if": { "$ref": "#" },\n        "then": { "$ref": "#" },\n        "else": { "$ref": "#" },\n        "allOf": { "$ref": "#/definitions/schemaArray" },\n        "anyOf": { "$ref": "#/definitions/schemaArray" },\n        "oneOf": { "$ref": "#/definitions/schemaArray" },\n        "not": { "$ref": "#" }\n    },\n    "default": true\n}')),vi.defineVocabulary($i,{validate:li.validate,additionalItems:li.additionalItems6,additionalProperties:li.additionalProperties6,allOf:li.allOf,anyOf:li.anyOf,const:li.const,contains:li.contains,default:li.metaData,definitions:li.definitions,dependencies:li.dependencies,description:li.metaData,enum:li.enum,exclusiveMaximum:li.exclusiveMaximum,exclusiveMinimum:li.exclusiveMinimum,format:li.metaData,if:li.if,then:li.then,else:li.else,items:li.items,maxItems:li.maxItems,maxLength:li.maxLength6,maxProperties:li.maxProperties,maximum:li.maximum,minItems:li.minItems,minLength:li.minLength6,minProperties:li.minProperties,minimum:li.minimum,multipleOf:li.multipleOf,not:li.not,oneOf:li.oneOf,pattern:li.pattern,patternProperties:li.patternProperties,properties:li.properties,propertyNames:li.propertyNames,readOnly:li.metaData,required:li.required,title:li.metaData,type:li.type,uniqueItems:li.uniqueItems,writeOnly:li.metaData});const{Core:bi,Schema:Oi}=Dt,ji="https://json-schema.org/draft/2019-09/schema";Oi.setConfig(ji,"baseToken","$id"),Oi.setConfig(ji,"embeddedToken","$id"),Oi.setConfig(ji,"anchorToken","$anchor"),Oi.setConfig(ji,"recursiveAnchorToken","$recursiveAnchor"),Oi.setConfig(ji,"vocabularyToken","$vocabulary"),Oi.setConfig(ji,"mandatoryVocabularies",["https://json-schema.org/draft/2019-09/vocab/core"]),Oi.add(JSON.parse('{\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$id": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2019-09/vocab/core": true,\n        "https://json-schema.org/draft/2019-09/vocab/applicator": true,\n        "https://json-schema.org/draft/2019-09/vocab/validation": true,\n        "https://json-schema.org/draft/2019-09/vocab/meta-data": true,\n        "https://json-schema.org/draft/2019-09/vocab/format": false,\n        "https://json-schema.org/draft/2019-09/vocab/content": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Core and Validation specifications meta-schema",\n    "allOf": [\n        {"$ref": "meta/core"},\n        {"$ref": "meta/applicator"},\n        {"$ref": "meta/validation"},\n        {"$ref": "meta/meta-data"},\n        {"$ref": "meta/format"},\n        {"$ref": "meta/content"}\n    ],\n    "type": ["object", "boolean"],\n    "properties": {\n        "definitions": {\n            "$comment": "While no longer an official keyword as it is replaced by $defs, this keyword is retained in the meta-schema to prevent incompatible extensions as it remains in common use.",\n            "type": "object",\n            "additionalProperties": { "$recursiveRef": "#" },\n            "default": {}\n        },\n        "dependencies": {\n            "$comment": "\\"dependencies\\" is no longer a keyword, but schema authors should avoid redefining it to facilitate a smooth transition to \\"dependentSchemas\\" and \\"dependentRequired\\"",\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$recursiveRef": "#" },\n                    { "$ref": "meta/validation#/$defs/stringArray" }\n                ]\n            }\n        }\n    }\n}')),Oi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/core",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/core": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Core vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference",\n            "$comment": "Non-empty fragments not allowed.",\n            "pattern": "^[^#]*#?$"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$anchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z][-A-Za-z0-9.:_]*$"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$recursiveRef": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$recursiveAnchor": {\n            "type": "boolean",\n            "default": false\n        },\n        "$vocabulary": {\n            "type": "object",\n            "propertyNames": {\n                "type": "string",\n                "format": "uri"\n            },\n            "additionalProperties": {\n                "type": "boolean"\n            }\n        },\n        "$comment": {\n            "type": "string"\n        },\n        "$defs": {\n            "type": "object",\n            "additionalProperties": { "$recursiveRef": "#" },\n            "default": {}\n        }\n    }\n}')),bi.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/core",{validate:li.validate,$defs:li.definitions,$recursiveRef:li.dynamicRef,$ref:li.ref}),Oi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/applicator",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2019-09/vocab/applicator": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Applicator vocabulary meta-schema",\n    "properties": {\n        "additionalItems": { "$recursiveRef": "#" },\n        "unevaluatedItems": { "$recursiveRef": "#" },\n        "items": {\n            "anyOf": [\n                { "$recursiveRef": "#" },\n                { "$ref": "#/$defs/schemaArray" }\n            ]\n        },\n        "contains": { "$recursiveRef": "#" },\n        "additionalProperties": { "$recursiveRef": "#" },\n        "unevaluatedProperties": { "$recursiveRef": "#" },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$recursiveRef": "#" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$recursiveRef": "#" },\n            "propertyNames": { "format": "regex" },\n            "default": {}\n        },\n        "dependentSchemas": {\n            "type": "object",\n            "additionalProperties": {\n                "$recursiveRef": "#"\n            }\n        },\n        "propertyNames": { "$recursiveRef": "#" },\n        "if": { "$recursiveRef": "#" },\n        "then": { "$recursiveRef": "#" },\n        "else": { "$recursiveRef": "#" },\n        "allOf": { "$ref": "#/$defs/schemaArray" },\n        "anyOf": { "$ref": "#/$defs/schemaArray" },\n        "oneOf": { "$ref": "#/$defs/schemaArray" },\n        "not": { "$recursiveRef": "#" }\n    },\n    "$defs": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$recursiveRef": "#" }\n        }\n    }\n}')),bi.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/applicator",{additionalItems:li.additionalItems6,additionalProperties:li.additionalProperties6,allOf:li.allOf,anyOf:li.anyOf,contains:li.containsMinContainsMaxContains,dependentSchemas:li.dependentSchemas,if:li.if,then:li.then,else:li.else,items:li.items,not:li.not,oneOf:li.oneOf,patternProperties:li.patternProperties,properties:li.properties,propertyNames:li.propertyNames,unevaluatedItems:li.unevaluatedItems,unevaluatedProperties:li.unevaluatedProperties}),Oi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/validation",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/validation": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Validation vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minLength": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "maxItems": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minItems": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxContains": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minContains": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 1\n        },\n        "maxProperties": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/$defs/stringArray" },\n        "dependentRequired": {\n            "type": "object",\n            "additionalProperties": {\n                "$ref": "#/$defs/stringArray"\n            }\n        },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/$defs/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/$defs/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        }\n    },\n    "$defs": {\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 0\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    }\n}')),bi.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/validation",{const:li.const,dependentRequired:li.dependentRequired,enum:li.enum,exclusiveMaximum:li.exclusiveMaximum,exclusiveMinimum:li.exclusiveMinimum,maxItems:li.maxItems,maxLength:li.maxLength6,maxProperties:li.maxProperties,maximum:li.maximum,minItems:li.minItems,minLength:li.minLength6,minProperties:li.minProperties,minimum:li.minimum,multipleOf:li.multipleOf,pattern:li.pattern,required:li.required,type:li.type,uniqueItems:li.uniqueItems}),Oi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/meta-data",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/meta-data": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Meta-data vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": true,\n        "deprecated": {\n            "type": "boolean",\n            "default": false\n        },\n        "readOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "writeOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "examples": {\n            "type": "array",\n            "items": true\n        }\n    }\n}')),bi.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/meta-data",{default:li.metaData,deprecated:li.metaData,description:li.metaData,examples:li.metaData,readOnly:li.metaData,title:li.metaData,writeOnly:li.metaData}),Oi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/format",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/format": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Format vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),Oi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/content",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/content": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Content vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "contentMediaType": { "type": "string" },\n        "contentEncoding": { "type": "string" },\n        "contentSchema": { "$recursiveRef": "#" }\n    }\n}')),bi.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/content",{contentEncoding:li.metaData,contentMediaType:li.metaData,contentSchema:li.metaData});const{Core:Si,Schema:Ii}=Dt,xi="https://json-schema.org/draft/2020-12/schema";Ii.setConfig(xi,"baseToken","$id"),Ii.setConfig(xi,"embeddedToken","$id"),Ii.setConfig(xi,"anchorToken","$anchor"),Ii.setConfig(xi,"dynamicAnchorToken","$dynamicAnchor"),Ii.setConfig(xi,"vocabularyToken","$vocabulary"),Ii.setConfig(xi,"mandatoryVocabularies",["https://json-schema.org/draft/2020-12/vocab/core"]),Ii.add(JSON.parse('{\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$id": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/core": true,\n        "https://json-schema.org/draft/2020-12/vocab/applicator": true,\n        "https://json-schema.org/draft/2020-12/vocab/unevaluated": true,\n        "https://json-schema.org/draft/2020-12/vocab/validation": true,\n        "https://json-schema.org/draft/2020-12/vocab/meta-data": true,\n        "https://json-schema.org/draft/2020-12/vocab/format-annotation": true,\n        "https://json-schema.org/draft/2020-12/vocab/content": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Core and Validation specifications meta-schema",\n    "allOf": [\n        {"$ref": "meta/core"},\n        {"$ref": "meta/applicator"},\n        {"$ref": "meta/unevaluated"},\n        {"$ref": "meta/validation"},\n        {"$ref": "meta/meta-data"},\n        {"$ref": "meta/format-annotation"},\n        {"$ref": "meta/content"}\n    ],\n    "type": ["object", "boolean"],\n    "properties": {\n        "definitions": {\n            "$comment": "While no longer an official keyword as it is replaced by $defs, this keyword is retained in the meta-schema to prevent incompatible extensions as it remains in common use.",\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        },\n        "dependencies": {\n            "$comment": "\\"dependencies\\" is no longer a keyword, but schema authors should avoid redefining it to facilitate a smooth transition to \\"dependentSchemas\\" and \\"dependentRequired\\"",\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$dynamicRef": "#meta" },\n                    { "$ref": "meta/validation#/$defs/stringArray" }\n                ]\n            }\n        }\n    }\n}')),Ii.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/core",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/core": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Core vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference",\n            "$comment": "Non-empty fragments not allowed.",\n            "pattern": "^[^#]*#?$"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$anchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z_][-A-Za-z0-9._]*$"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$dynamicRef": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$dynamicAnchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z_][-A-Za-z0-9._]*$"\n        },\n        "$vocabulary": {\n            "type": "object",\n            "propertyNames": {\n                "type": "string",\n                "format": "uri"\n            },\n            "additionalProperties": {\n                "type": "boolean"\n            }\n        },\n        "$comment": {\n            "type": "string"\n        },\n        "$defs": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        }\n    }\n}')),Si.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/core",{validate:li.validate,$defs:li.definitions,$dynamicRef:li.dynamicRef,$ref:li.ref}),Ii.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/applicator",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/applicator": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Applicator vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "prefixItems": { "$ref": "#/$defs/schemaArray" },\n        "items": { "$dynamicRef": "#meta" },\n        "contains": { "$dynamicRef": "#meta" },\n        "additionalProperties": { "$dynamicRef": "#meta" },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "propertyNames": { "format": "regex" },\n            "default": {}\n        },\n        "dependentSchemas": {\n            "type": "object",\n            "additionalProperties": {\n                "$dynamicRef": "#meta"\n            }\n        },\n        "propertyNames": { "$dynamicRef": "#meta" },\n        "if": { "$dynamicRef": "#meta" },\n        "then": { "$dynamicRef": "#meta" },\n        "else": { "$dynamicRef": "#meta" },\n        "allOf": { "$ref": "#/$defs/schemaArray" },\n        "anyOf": { "$ref": "#/$defs/schemaArray" },\n        "oneOf": { "$ref": "#/$defs/schemaArray" },\n        "not": { "$dynamicRef": "#meta" }\n    },\n    "$defs": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$dynamicRef": "#meta" }\n        }\n    }\n}')),Si.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/applicator",{additionalProperties:li.additionalProperties6,allOf:li.allOf,anyOf:li.anyOf,contains:li.containsMinContainsMaxContains,dependentSchemas:li.dependentSchemas,if:li.if,then:li.then,else:li.else,items:li.items202012,not:li.not,oneOf:li.oneOf,patternProperties:li.patternProperties,prefixItems:li.tupleItems,properties:li.properties,propertyNames:li.propertyNames}),Ii.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/validation",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/validation": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Validation vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minLength": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "maxItems": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minItems": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxContains": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minContains": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 1\n        },\n        "maxProperties": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/$defs/stringArray" },\n        "dependentRequired": {\n            "type": "object",\n            "additionalProperties": {\n                "$ref": "#/$defs/stringArray"\n            }\n        },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/$defs/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/$defs/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        }\n    },\n    "$defs": {\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 0\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    }\n}')),Si.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/validation",{const:li.const,dependentRequired:li.dependentRequired,enum:li.enum,exclusiveMaximum:li.exclusiveMaximum,exclusiveMinimum:li.exclusiveMinimum,maxItems:li.maxItems,maxLength:li.maxLength6,maxProperties:li.maxProperties,maximum:li.maximum,minItems:li.minItems,minLength:li.minLength6,minProperties:li.minProperties,minimum:li.minimum,multipleOf:li.multipleOf,pattern:li.pattern,required:li.required,type:li.type,uniqueItems:li.uniqueItems}),Ii.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/meta-data",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/meta-data": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Meta-data vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": true,\n        "deprecated": {\n            "type": "boolean",\n            "default": false\n        },\n        "readOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "writeOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "examples": {\n            "type": "array",\n            "items": true\n        }\n    }\n}')),Si.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/meta-data",{default:li.metaData,deprecated:li.metaData,description:li.metaData,examples:li.metaData,readOnly:li.metaData,title:li.metaData,writeOnly:li.metaData}),Ii.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/format-annotation",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/format-annotation": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Format vocabulary meta-schema for annotation results",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),Si.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/format-annotation",{format:li.metaData}),Ii.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/format-assertion",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/format-assertion": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Format vocabulary meta-schema for assertion results",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),Ii.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/content",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/content": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Content vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "contentMediaType": { "type": "string" },\n        "contentEncoding": { "type": "string" },\n        "contentSchema": { "$dynamicRef": "#meta" }\n    }\n}')),Si.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/content",{contentEncoding:li.metaData,contentMediaType:li.metaData,contentSchema:li.metaData}),Ii.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/unevaluated",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/unevaluated": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Unevaluated applicator vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "unevaluatedItems": { "$dynamicRef": "#meta" },\n        "unevaluatedProperties": { "$dynamicRef": "#meta" }\n    }\n}')),Si.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/unevaluated",{unevaluatedItems:li.unevaluatedItems,unevaluatedProperties:li.unevaluatedProperties});const{Core:wi,Schema:Ei}=Dt,Pi="https://json-schema.org/draft/future/schema";Ei.setConfig(Pi,"baseToken","$id"),Ei.setConfig(Pi,"embeddedToken","$id"),Ei.setConfig(Pi,"anchorToken","$anchor"),Ei.setConfig(Pi,"dynamicAnchorToken","$dynamicAnchor"),Ei.setConfig(Pi,"vocabularyToken","$vocabulary"),Ei.setConfig(Pi,"mandatoryVocabularies",["https://json-schema.org/draft/future/vocab/core"]),Ei.add(JSON.parse('{\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$id": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/core": true,\n        "https://json-schema.org/draft/future/vocab/applicator": true,\n        "https://json-schema.org/draft/future/vocab/unevaluated": true,\n        "https://json-schema.org/draft/future/vocab/validation": true,\n        "https://json-schema.org/draft/future/vocab/meta-data": true,\n        "https://json-schema.org/draft/future/vocab/format-annotation": true,\n        "https://json-schema.org/draft/future/vocab/content": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Core and Validation specifications meta-schema",\n    "allOf": [\n        {"$ref": "meta/core"},\n        {"$ref": "meta/applicator"},\n        {"$ref": "meta/validation"},\n        {"$ref": "meta/meta-data"},\n        {"$ref": "meta/format-annotation"},\n        {"$ref": "meta/content"}\n    ],\n    "type": ["object", "boolean"],\n    "properties": {\n        "definitions": {\n            "$comment": "While no longer an official keyword as it is replaced by $defs, this keyword is retained in the meta-schema to prevent incompatible extensions as it remains in common use.",\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        },\n        "dependencies": {\n            "$comment": "\\"dependencies\\" is no longer a keyword, but schema authors should avoid redefining it to facilitate a smooth transition to \\"dependentSchemas\\" and \\"dependentRequired\\"",\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$dynamicRef": "#meta" },\n                    { "$ref": "meta/validation#/$defs/stringArray" }\n                ]\n            }\n        }\n    }\n}')),Ei.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/core",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/core": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Core vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference",\n            "$comment": "Non-empty fragments not allowed.",\n            "pattern": "^[^#]*#?$"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$anchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z_][-A-Za-z0-9._]*$"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$dynamicRef": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$dynamicAnchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z_][-A-Za-z0-9._]*$"\n        },\n        "$vocabulary": {\n            "type": "object",\n            "propertyNames": {\n                "type": "string",\n                "format": "uri"\n            },\n            "additionalProperties": {\n                "type": "boolean"\n            }\n        },\n        "$comment": {\n            "type": "string"\n        },\n        "$defs": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        }\n    }\n}')),wi.defineVocabulary("https://json-schema.org/draft/future/vocab/core",{validate:li.validate,$defs:li.definitions,$dynamicRef:li.dynamicRefFUTURE,$ref:li.ref}),Ei.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/applicator",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/applicator": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Applicator vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "prefixItems": { "$ref": "#/$defs/schemaArray" },\n        "items": { "$dynamicRef": "#meta" },\n        "contains": { "$dynamicRef": "#meta" },\n        "additionalProperties": { "$dynamicRef": "#meta" },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "propertyNames": { "format": "regex" },\n            "default": {}\n        },\n        "dependentSchemas": {\n            "type": "object",\n            "additionalProperties": {\n                "$dynamicRef": "#meta"\n            }\n        },\n        "propertyNames": { "$dynamicRef": "#meta" },\n        "if": { "$dynamicRef": "#meta" },\n        "then": { "$dynamicRef": "#meta" },\n        "else": { "$dynamicRef": "#meta" },\n        "allOf": { "$ref": "#/$defs/schemaArray" },\n        "anyOf": { "$ref": "#/$defs/schemaArray" },\n        "oneOf": { "$ref": "#/$defs/schemaArray" },\n        "not": { "$dynamicRef": "#meta" }\n    },\n    "$defs": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$dynamicRef": "#meta" }\n        }\n    }\n}')),wi.defineVocabulary("https://json-schema.org/draft/future/vocab/applicator",{additionalProperties:li.additionalProperties6,allOf:li.allOf,anyOf:li.anyOf,contains:li.containsMinContainsMaxContainsFUTURE,dependentSchemas:li.dependentSchemas,if:li.if,then:li.then,else:li.else,items:li.items202012,not:li.not,oneOf:li.oneOf,patternProperties:li.patternProperties,prefixItems:li.tupleItems,properties:li.properties,propertyNames:li.propertyNames}),Ei.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/validation",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/validation": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Validation vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minLength": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "maxItems": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minItems": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxContains": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minContains": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 1\n        },\n        "maxProperties": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/$defs/stringArray" },\n        "dependentRequired": {\n            "type": "object",\n            "additionalProperties": {\n                "$ref": "#/$defs/stringArray"\n            }\n        },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/$defs/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/$defs/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        }\n    },\n    "$defs": {\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 0\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    }\n}')),wi.defineVocabulary("https://json-schema.org/draft/future/vocab/validation",{const:li.const,dependentRequired:li.dependentRequired,enum:li.enum,exclusiveMaximum:li.exclusiveMaximum,exclusiveMinimum:li.exclusiveMinimum,maxItems:li.maxItems,maxLength:li.maxLength6,maxProperties:li.maxProperties,maximum:li.maximum,minItems:li.minItems,minLength:li.minLength6,minProperties:li.minProperties,minimum:li.minimum,multipleOf:li.multipleOf,pattern:li.pattern,required:li.required,type:li.type,uniqueItems:li.uniqueItems}),Ei.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/meta-data",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/meta-data": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Meta-data vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": true,\n        "deprecated": {\n            "type": "boolean",\n            "default": false\n        },\n        "readOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "writeOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "examples": {\n            "type": "array",\n            "items": true\n        }\n    }\n}')),wi.defineVocabulary("https://json-schema.org/draft/future/vocab/meta-data",{default:li.metaData,deprecated:li.metaData,description:li.metaData,examples:li.metaData,readOnly:li.metaData,title:li.metaData,writeOnly:li.metaData}),Ei.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/format-annotation",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/format-annotation": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Format vocabulary meta-schema for annotation results",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),wi.defineVocabulary("https://json-schema.org/draft/future/vocab/format-annotation",{format:li.metaData}),Ei.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/format-assertion",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/format-assertion": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Format vocabulary meta-schema for assertion results",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),Ei.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/content",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/content": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Content vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "contentMediaType": { "type": "string" },\n        "contentEncoding": { "type": "string" },\n        "contentSchema": { "$dynamicRef": "#meta" }\n    }\n}')),wi.defineVocabulary("https://json-schema.org/draft/future/vocab/content",{contentEncoding:li.metaData,contentMediaType:li.metaData,contentSchema:li.metaData}),Ei.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/unevaluated",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/unevaluated": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Unevaluated applicator vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "unevaluatedItems": { "$dynamicRef": "#meta" },\n        "unevaluatedProperties": { "$dynamicRef": "#meta" }\n    }\n}')),wi.defineVocabulary("https://json-schema.org/draft/future/vocab/unevaluated",{unevaluatedItems:li.unevaluatedItems,unevaluatedProperties:li.unevaluatedProperties});const{Core:Ai,Schema:Ci}=Dt;var Ni={add:Ai.add,get:Ci.get,validate:Ai.validate,compile:Ai.compile,interpret:Ai.interpret,setMetaOutputFormat:Ai.setMetaOutputFormat,setShouldMetaValidate:Ai.setShouldMetaValidate,FLAG:Ai.FLAG,BASIC:Ai.BASIC,DETAILED:Ai.DETAILED,VERBOSE:Ai.VERBOSE,Keywords:li};Ni.add,Ni.get,Ni.validate,Ni.compile,Ni.interpret,Ni.setMetaOutputFormat,Ni.setShouldMetaValidate,Ni.FLAG,Ni.BASIC,Ni.DETAILED,Ni.VERBOSE,Ni.Keywords;const ki='(?:\\\\["\\/\\\\brfnt]|\\\\u[0-9a-fA-F]{4}|[^"\\\\])',Ri=`"${ki}*"`,Ti=`"${ki}*"(?=\\s*:)`;var Di=_((function(e){var t,n;t=U,n=function(){var e=Object.prototype.hasOwnProperty,t=Object.prototype.toString,n="boolean"==typeof(new RegExp).sticky;function a(e){return e&&"[object RegExp]"===t.call(e)}function r(e){return e&&"object"==typeof e&&!a(e)&&!Array.isArray(e)}function i(e){return"("+e+")"}function o(e){return e.length?"(?:"+e.map((function(e){return"(?:"+e+")"})).join("|")+")":"(?!)"}function s(e){if("string"==typeof e)return"(?:"+e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")+")";if(a(e)){if(e.ignoreCase)throw new Error("RegExp /i flag not allowed");if(e.global)throw new Error("RegExp /g flag is implied");if(e.sticky)throw new Error("RegExp /y flag is implied");if(e.multiline)throw new Error("RegExp /m flag is implied");return e.source}throw new Error("Not a pattern: "+e)}function c(t,n){if(r(n)||(n={match:n}),n.include)throw new Error("Matching rules cannot also include states");var i={defaultType:t,lineBreaks:!!n.error||!!n.fallback,pop:!1,next:null,push:null,error:!1,fallback:!1,value:null,type:null,shouldThrow:!1};for(var o in n)e.call(n,o)&&(i[o]=n[o]);if("string"==typeof i.type&&t!==i.type)throw new Error("Type transform cannot be a string (type '"+i.type+"' for token '"+t+"')");var s=i.match;return i.match=Array.isArray(s)?s:s?[s]:[],i.match.sort((function(e,t){return a(e)&&a(t)?0:a(t)?-1:a(e)?1:t.length-e.length})),i}function l(e){return Array.isArray(e)?function(e){for(var t=[],n=0;n<e.length;n++){var a=e[n];if(a.include)for(var r=[].concat(a.include),i=0;i<r.length;i++)t.push({include:r[i]});else{if(!a.type)throw new Error("Rule has no type: "+JSON.stringify(a));t.push(c(a.type,a))}}return t}(e):function(e){for(var t=Object.getOwnPropertyNames(e),n=[],a=0;a<t.length;a++){var i=t[a],o=e[i],s=[].concat(o);if("include"!==i){var l=[];s.forEach((function(e){r(e)?(l.length&&n.push(c(i,l)),n.push(c(i,e)),l=[]):l.push(e)})),l.length&&n.push(c(i,l))}else for(var m=0;m<s.length;m++)n.push({include:s[m]})}return n}(e)}var m=c("error",{lineBreaks:!0,shouldThrow:!0});function p(e,t){for(var r=null,c=Object.create(null),l=!0,p=null,u=[],f=[],d=0;d<e.length;d++)e[d].fallback&&(l=!1);for(d=0;d<e.length;d++){var h=e[d];if(h.include)throw new Error("Inheritance is not allowed in stateless lexers");if(h.error||h.fallback){if(r)throw!h.fallback==!r.fallback?new Error("Multiple "+(h.fallback?"fallback":"error")+" rules not allowed (for token '"+h.defaultType+"')"):new Error("fallback and error are mutually exclusive (for token '"+h.defaultType+"')");r=h}var y=h.match.slice();if(l)for(;y.length&&"string"==typeof y[0]&&1===y[0].length;)c[y.shift().charCodeAt(0)]=h;if(h.pop||h.push||h.next){if(!t)throw new Error("State-switching options are not allowed in stateless lexers (for token '"+h.defaultType+"')");if(h.fallback)throw new Error("State-switching options are not allowed on fallback tokens (for token '"+h.defaultType+"')")}if(0!==y.length){l=!1,u.push(h);for(var v=0;v<y.length;v++){var g=y[v];if(a(g))if(null===p)p=g.unicode;else if(p!==g.unicode&&!1===h.fallback)throw new Error("If one rule is /u then all must be")}var $=o(y.map(s)),b=new RegExp($);if(b.test(""))throw new Error("RegExp matches empty string: "+b);if(new RegExp("|"+$).exec("").length-1>0)throw new Error("RegExp has capture groups: "+b+"\nUse (?: … ) instead");if(!h.lineBreaks&&b.test("\n"))throw new Error("Rule should declare lineBreaks: "+b);f.push(i($))}}var O=r&&r.fallback,j=n&&!O?"ym":"gm",S=n||O?"":"|";return!0===p&&(j+="u"),{regexp:new RegExp(o(f)+S,j),groups:u,fast:c,error:r||m}}function u(e,t,n){var a=e&&(e.push||e.next);if(a&&!n[a])throw new Error("Missing state '"+a+"' (in token '"+e.defaultType+"' of state '"+t+"')");if(e&&e.pop&&1!=+e.pop)throw new Error("pop must be 1 (in token '"+e.defaultType+"' of state '"+t+"')")}var f=function(e,t){this.startState=t,this.states=e,this.buffer="",this.stack=[],this.reset()};f.prototype.reset=function(e,t){return this.buffer=e||"",this.index=0,this.line=t?t.line:1,this.col=t?t.col:1,this.queuedToken=t?t.queuedToken:null,this.queuedThrow=t?t.queuedThrow:null,this.setState(t?t.state:this.startState),this.stack=t&&t.stack?t.stack.slice():[],this},f.prototype.save=function(){return{line:this.line,col:this.col,state:this.state,stack:this.stack.slice(),queuedToken:this.queuedToken,queuedThrow:this.queuedThrow}},f.prototype.setState=function(e){if(e&&this.state!==e){this.state=e;var t=this.states[e];this.groups=t.groups,this.error=t.error,this.re=t.regexp,this.fast=t.fast}},f.prototype.popState=function(){this.setState(this.stack.pop())},f.prototype.pushState=function(e){this.stack.push(this.state),this.setState(e)};var d=n?function(e,t){return e.exec(t)}:function(e,t){var n=e.exec(t);return 0===n[0].length?null:n};function h(){return this.value}if(f.prototype._getGroup=function(e){for(var t=this.groups.length,n=0;n<t;n++)if(void 0!==e[n+1])return this.groups[n];throw new Error("Cannot find token type for matched text")},f.prototype.next=function(){var e=this.index;if(this.queuedGroup){var t=this._token(this.queuedGroup,this.queuedText,e);return this.queuedGroup=null,this.queuedText="",t}var n=this.buffer;if(e!==n.length){if(o=this.fast[n.charCodeAt(e)])return this._token(o,n.charAt(e),e);var a=this.re;a.lastIndex=e;var r=d(a,n),i=this.error;if(null==r)return this._token(i,n.slice(e,n.length),e);var o=this._getGroup(r),s=r[0];return i.fallback&&r.index!==e?(this.queuedGroup=o,this.queuedText=s,this._token(i,n.slice(e,r.index),e)):this._token(o,s,e)}},f.prototype._token=function(e,t,n){var a=0;if(e.lineBreaks){var r=/\n/g,i=1;if("\n"===t)a=1;else for(;r.exec(t);)a++,i=r.lastIndex}var o={type:"function"==typeof e.type&&e.type(t)||e.defaultType,value:"function"==typeof e.value?e.value(t):t,text:t,toString:h,offset:n,lineBreaks:a,line:this.line,col:this.col},s=t.length;if(this.index+=s,this.line+=a,0!==a?this.col=s-i+1:this.col+=s,e.shouldThrow)throw new Error(this.formatError(o,"invalid syntax"));return e.pop?this.popState():e.push?this.pushState(e.push):e.next&&this.setState(e.next),o},"undefined"!=typeof Symbol&&Symbol.iterator){var y=function(e){this.lexer=e};y.prototype.next=function(){var e=this.lexer.next();return{value:e,done:!e}},y.prototype[Symbol.iterator]=function(){return this},f.prototype[Symbol.iterator]=function(){return new y(this)}}return f.prototype.formatError=function(e,t){if(null==e){var n=this.buffer.slice(this.index);e={text:n,offset:this.index,lineBreaks:-1===n.indexOf("\n")?0:1,line:this.line,col:this.col}}var a=Math.max(0,e.offset-e.col+1),r=e.lineBreaks?e.text.indexOf("\n"):e.text.length,i=this.buffer.substring(a,e.offset+r);return t+=" at line "+e.line+" col "+e.col+":\n\n",t+="  "+i+"\n",t+="  "+Array(e.col).join(" ")+"^"},f.prototype.clone=function(){return new f(this.states,this.state)},f.prototype.has=function(e){return!0},{compile:function(e){var t=p(l(e));return new f({start:t},"start")},states:function(e,t){var n=e.$all?l(e.$all):[];delete e.$all;var a=Object.getOwnPropertyNames(e);t||(t=a[0]);for(var r=Object.create(null),i=0;i<a.length;i++)r[$=a[i]]=l(e[$]).concat(n);for(i=0;i<a.length;i++)for(var o=r[$=a[i]],s=Object.create(null),c=0;c<o.length;c++){var m=o[c];if(m.include){var d=[c,1];if(m.include!==$&&!s[m.include]){s[m.include]=!0;var h=r[m.include];if(!h)throw new Error("Cannot include nonexistent state '"+m.include+"' (in state '"+$+"')");for(var y=0;y<h.length;y++){var v=h[y];-1===o.indexOf(v)&&d.push(v)}}o.splice.apply(o,d),c--}}var g=Object.create(null);for(i=0;i<a.length;i++){var $;g[$=a[i]]=p(r[$],!0)}for(i=0;i<a.length;i++){var b=a[i],O=g[b],j=O.groups;for(c=0;c<j.length;c++)u(j[c],b,g);var S=Object.getOwnPropertyNames(O.fast);for(c=0;c<S.length;c++)u(O.fast[S[c]],b,g)}return new f(g,t)},error:Object.freeze({error:!0}),fallback:Object.freeze({fallback:!0}),keywords:function(e){for(var t=Object.create(null),n=Object.create(null),a=Object.getOwnPropertyNames(e),r=0;r<a.length;r++){var i=a[r],o=e[i];(Array.isArray(o)?o:[o]).forEach((function(e){if((n[e.length]=n[e.length]||[]).push(e),"string"!=typeof e)throw new Error("keyword must be string (in keyword '"+i+"')");t[e]=i}))}function s(e){return JSON.stringify(e)}var c="";for(var l in c+="switch (value.length) {\n",n){var m=n[l];c+="case "+l+":\n",c+="switch (value) {\n",m.forEach((function(e){var n=t[e];c+="case "+s(e)+": return "+s(n)+"\n"})),c+="}\n"}return c+="}\n",Function("value",c)}}},e.exports?e.exports=n():t.moo=n()})).compile({WS:{match:/(?:(?:\r?\n)|[ \t])+/,lineBreaks:!0},punctuation:/[:,]/,number:new RegExp("-?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][-+][0-9]+)?"),property:new RegExp(Ti),string:new RegExp(Ri),grouping:["{","}","[","]"],boolean:["true","false"],null:["null"],other:/./});function qi(e,t,n){const a=e.slice();return a[9]=t[n],a}function Mi(e,t,n){const a=e.slice();return a[12]=t[n],a[14]=n,a}function Vi(e){let t,n,f=e[14]+1+"";return{c(){t=a("div"),n=r(f),this.h()},l(e){t=i(e,"DIV",{class:!0});var a=o(t);n=s(a,f),a.forEach(c),this.h()},h(){l(t,"class","svelte-o0qsb5")},m(e,a){m(e,t,a),p(t,n)},p:u,d(e){e&&c(t)}}}function Li(e){let t,n=e[9].value+"";return{c(){t=r(n)},l(e){t=s(e,n)},m(e,n){m(e,t,n)},p(e,a){16&a&&n!==(n=e[9].value+"")&&j(t,n)},d(e){e&&c(t)}}}function Ji(e){let t,n,u=e[9].value+"";return{c(){t=a("span"),n=r(u),this.h()},l(e){t=i(e,"SPAN",{class:!0});var a=o(t);n=s(a,u),a.forEach(c),this.h()},h(){l(t,"class","null svelte-o0qsb5")},m(e,a){m(e,t,a),p(t,n)},p(e,t){16&t&&u!==(u=e[9].value+"")&&j(n,u)},d(e){e&&c(t)}}}function Ui(e){let t,n,u=e[9].value+"";return{c(){t=a("span"),n=r(u),this.h()},l(e){t=i(e,"SPAN",{class:!0});var a=o(t);n=s(a,u),a.forEach(c),this.h()},h(){l(t,"class","boolean svelte-o0qsb5")},m(e,a){m(e,t,a),p(t,n)},p(e,t){16&t&&u!==(u=e[9].value+"")&&j(n,u)},d(e){e&&c(t)}}}function _i(e){let t,n,u=e[9].value+"";return{c(){t=a("span"),n=r(u),this.h()},l(e){t=i(e,"SPAN",{class:!0});var a=o(t);n=s(a,u),a.forEach(c),this.h()},h(){l(t,"class","number svelte-o0qsb5")},m(e,a){m(e,t,a),p(t,n)},p(e,t){16&t&&u!==(u=e[9].value+"")&&j(n,u)},d(e){e&&c(t)}}}function Fi(e){let t,n,u,f,d=e[9].value.substring(1,e[9].value.length-1)+"";return{c(){t=r('"'),n=a("span"),u=r(d),f=r('"'),this.h()},l(e){t=s(e,'"'),n=i(e,"SPAN",{class:!0});var a=o(n);u=s(a,d),a.forEach(c),f=s(e,'"'),this.h()},h(){l(n,"class","string svelte-o0qsb5")},m(e,a){m(e,t,a),m(e,n,a),p(n,u),m(e,f,a)},p(e,t){16&t&&d!==(d=e[9].value.substring(1,e[9].value.length-1)+"")&&j(u,d)},d(e){e&&c(t),e&&c(n),e&&c(f)}}}function zi(e){let t,n,u,f,d=e[9].value.substring(1,e[9].value.length-1)+"";return{c(){t=r('"'),n=a("span"),u=r(d),f=r('"'),this.h()},l(e){t=s(e,'"'),n=i(e,"SPAN",{class:!0});var a=o(n);u=s(a,d),a.forEach(c),f=s(e,'"'),this.h()},h(){l(n,"class","property svelte-o0qsb5")},m(e,a){m(e,t,a),m(e,n,a),p(n,u),m(e,f,a)},p(e,t){16&t&&d!==(d=e[9].value.substring(1,e[9].value.length-1)+"")&&j(u,d)},d(e){e&&c(t),e&&c(n),e&&c(f)}}}function Bi(e){let t,n,u=e[9].value+"";return{c(){t=a("span"),n=r(u),this.h()},l(e){t=i(e,"SPAN",{class:!0});var a=o(t);n=s(a,u),a.forEach(c),this.h()},h(){l(t,"class","grouping svelte-o0qsb5")},m(e,a){m(e,t,a),p(t,n)},p(e,t){16&t&&u!==(u=e[9].value+"")&&j(n,u)},d(e){e&&c(t)}}}function Ki(e){let t;function n(e,t){return"grouping"===e[9].type?Bi:"property"===e[9].type?zi:"string"===e[9].type?Fi:"number"===e[9].type?_i:"boolean"===e[9].type?Ui:"null"===e[9].type?Ji:Li}let a=n(e),r=a(e);return{c(){r.c(),t=f()},l(e){r.l(e),t=f()},m(e,n){r.m(e,n),m(e,t,n)},p(e,i){a===(a=n(e))&&r?r.p(e,i):(r.d(1),r=a(e),r&&(r.c(),r.m(t.parentNode,t)))},d(e){r.d(e),e&&c(t)}}}function Gi(e){let t,n,r,s,f,b,O,j,S,I,x=[...Array(e[3])],w=[];for(let t=0;t<x.length;t+=1)w[t]=Vi(Mi(e,x,t));let E=e[4],P=[];for(let t=0;t<E.length;t+=1)P[t]=Ki(qi(e,E,t));return{c(){t=a("div"),n=a("div");for(let e=0;e<w.length;e+=1)w[e].c();r=d(),s=a("div"),f=a("pre");for(let e=0;e<P.length;e+=1)P[e].c();b=d(),O=a("textarea"),this.h()},l(e){t=i(e,"DIV",{class:!0});var a=o(t);n=i(a,"DIV",{class:!0});var l=o(n);for(let e=0;e<w.length;e+=1)w[e].l(l);l.forEach(c),r=h(a),s=i(a,"DIV",{class:!0});var m=o(s);f=i(m,"PRE",{class:!0});var p=o(f);for(let e=0;e<P.length;e+=1)P[e].l(p);p.forEach(c),b=h(m),O=i(m,"TEXTAREA",{class:!0,"aria-label":!0}),o(O).forEach(c),m.forEach(c),a.forEach(c),this.h()},h(){l(n,"class","line-numbers svelte-o0qsb5"),l(f,"class","highlighted svelte-o0qsb5"),l(O,"class","src svelte-o0qsb5"),l(O,"aria-label","Code Editor"),l(s,"class","editable svelte-o0qsb5"),l(t,"class",j="Editor "+e[1]+" svelte-o0qsb5")},m(a,i){m(a,t,i),p(t,n);for(let e=0;e<w.length;e+=1)w[e].m(n,null);p(t,r),p(t,s),p(s,f);for(let e=0;e<P.length;e+=1)P[e].m(f,null);p(s,b),p(s,O),e[7](O),y(O,e[0]),S||(I=[v(O,"input",e[8]),v(O,"input",e[6])],S=!0)},p(e,[a]){if(8&a){let t;for(x=[...Array(e[3])],t=0;t<x.length;t+=1){const r=Mi(e,x,t);w[t]?w[t].p(r,a):(w[t]=Vi(r),w[t].c(),w[t].m(n,null))}for(;t<w.length;t+=1)w[t].d(1);w.length=x.length}if(16&a){let t;for(E=e[4],t=0;t<E.length;t+=1){const n=qi(e,E,t);P[t]?P[t].p(n,a):(P[t]=Ki(n),P[t].c(),P[t].m(f,null))}for(;t<P.length;t+=1)P[t].d(1);P.length=E.length}1&a&&y(O,e[0]),2&a&&j!==(j="Editor "+e[1]+" svelte-o0qsb5")&&l(t,"class",j)},i:u,o:u,d(n){n&&c(t),g(w,n),g(P,n),e[7](null),S=!1,$(I)}}}function Zi(e,t,n){let a,r,i,{theme:o="solarized-dark"}=t,{value:s=""}=t;return e.$$set=e=>{"theme"in e&&n(1,o=e.theme),"value"in e&&n(0,s=e.value)},e.$$.update=()=>{1&e.$$.dirty&&n(3,a=(s.match(/\n/g)||[]).length+1),1&e.$$.dirty&&n(4,(Di.reset(s),r=Array.from(Di)))},[s,o,i,a,r,()=>{i.focus()},function(t){b(e,t)},function(e){O[e?"unshift":"push"]((()=>{i=e,n(2,i)}))},function(){s=this.value,n(0,s)}]}class Hi extends e{constructor(e){super(),t(this,e,Zi,Gi,n,{theme:1,value:0,focus:5})}get focus(){return this.$$.ctx[5]}}function Wi(e,t,n){const a=e.slice();return a[16]=t[n],a[18]=n,a}function Xi(e){let t,n,u,f;function d(){return e[11](e[18])}return{c(){t=a("button"),n=r("×"),this.h()},l(e){t=i(e,"BUTTON",{class:!0});var a=o(t);n=s(a,"×"),a.forEach(c),this.h()},h(){l(t,"class","tab-close svelte-1ylgy73")},m(e,a){m(e,t,a),p(t,n),u||(f=v(t,"click",d),u=!0)},p(t,n){e=t},d(e){e&&c(t),u=!1,f()}}}function Qi(e){let t,n,u,f,y,g,$,b,O=e[16].label+"",I=!e[16].persistent&&e[0].length>e[5]&&Xi(e);function x(){return e[12](e[18])}return{c(){t=a("button"),n=a("span"),u=r(O),f=d(),I&&I.c(),this.h()},l(e){t=i(e,"BUTTON",{role:!0,id:!0,"aria-selected":!0,"aria-controls":!0,class:!0});var a=o(t);n=i(a,"SPAN",{class:!0});var r=o(n);u=s(r,O),r.forEach(c),f=h(a),I&&I.l(a),a.forEach(c),this.h()},h(){l(n,"class","tab-label svelte-1ylgy73"),l(t,"role","tab"),l(t,"id",y=`${e[2]}-tab-${e[18]}`),l(t,"aria-selected",g=e[18]===e[1]),l(t,"aria-controls","tabpanel"),l(t,"class","svelte-1ylgy73"),S(t,"active",e[18]===e[4])},m(e,a){m(e,t,a),p(t,n),p(n,u),p(t,f),I&&I.m(t,null),$||(b=v(t,"click",x),$=!0)},p(n,a){e=n,1&a&&O!==(O=e[16].label+"")&&j(u,O),!e[16].persistent&&e[0].length>e[5]?I?I.p(e,a):(I=Xi(e),I.c(),I.m(t,null)):I&&(I.d(1),I=null),4&a&&y!==(y=`${e[2]}-tab-${e[18]}`)&&l(t,"id",y),2&a&&g!==(g=e[18]===e[1])&&l(t,"aria-selected",g),16&a&&S(t,"active",e[18]===e[4])},d(e){e&&c(t),I&&I.d(),$=!1,b()}}}function Yi(e){let t,n,u,f,d,h;return{c(){t=a("button"),n=a("span"),u=r("+"),this.h()},l(e){t=i(e,"BUTTON",{role:!0,id:!0,class:!0});var a=o(t);n=i(a,"SPAN",{class:!0});var r=o(n);u=s(r,"+"),r.forEach(c),a.forEach(c),this.h()},h(){l(n,"class","tab-label svelte-1ylgy73"),l(t,"role","tab"),l(t,"id",f=`${e[2]}-tab-${e[0].length}`),l(t,"class","svelte-1ylgy73")},m(a,r){m(a,t,r),p(t,n),p(n,u),d||(h=v(t,"click",e[9]),d=!0)},p(e,n){5&n&&f!==(f=`${e[2]}-tab-${e[0].length}`)&&l(t,"id",f)},d(e){e&&c(t),d=!1,h()}}}function eo(e){let t,n,r,s,u,f,y,v,$=e[0],b=[];for(let t=0;t<$.length;t+=1)b[t]=Qi(Wi(e,$,t));let j=e[3]&&Yi(e);function S(t){e[14](t)}let k={};return void 0!==e[0][e[1]].text&&(k.value=e[0][e[1]].text),u=new Hi({props:k}),e[13](u),O.push((()=>I(u,"value",S))),u.$on("input",e[15]),{c(){t=a("div");for(let e=0;e<b.length;e+=1)b[e].c();n=d(),j&&j.c(),r=d(),s=a("div"),x(u.$$.fragment),this.h()},l(e){t=i(e,"DIV",{role:!0,class:!0});var a=o(t);for(let e=0;e<b.length;e+=1)b[e].l(a);n=h(a),j&&j.l(a),a.forEach(c),r=h(e),s=i(e,"DIV",{role:!0,id:!0,"aria-labelledby":!0,class:!0});var l=o(s);w(u.$$.fragment,l),l.forEach(c),this.h()},h(){l(t,"role","tablist"),l(t,"class","svelte-1ylgy73"),l(s,"role","tabpanel"),l(s,"id","tabpanel"),l(s,"aria-labelledby",y=`${e[2]}-tab-${e[1]}`),l(s,"class","svelte-1ylgy73")},m(e,a){m(e,t,a);for(let e=0;e<b.length;e+=1)b[e].m(t,null);p(t,n),j&&j.m(t,null),m(e,r,a),m(e,s,a),E(u,s,null),v=!0},p(e,[a]){if(1335&a){let r;for($=e[0],r=0;r<$.length;r+=1){const i=Wi(e,$,r);b[r]?b[r].p(i,a):(b[r]=Qi(i),b[r].c(),b[r].m(t,n))}for(;r<b.length;r+=1)b[r].d(1);b.length=$.length}e[3]?j?j.p(e,a):(j=Yi(e),j.c(),j.m(t,null)):j&&(j.d(1),j=null);const r={};!f&&3&a&&(f=!0,r.value=e[0][e[1]].text,P((()=>f=!1))),u.$set(r),(!v||6&a&&y!==(y=`${e[2]}-tab-${e[1]}`))&&l(s,"aria-labelledby",y)},i(e){v||(A(u.$$.fragment,e),v=!0)},o(e){C(u.$$.fragment,e),v=!1},d(n){n&&c(t),g(b,n),j&&j.d(),n&&c(r),n&&c(s),e[13](null),N(u)}}}function to(e,t,n){let a,{ns:r=""}=t,{tabs:i=[]}=t,{newTab:o}=t,{active:s=0}=t,{selected:c=0}=t,{minTabs:l=1}=t;const m=k();function p(e){n(1,c=e),a.focus()}function u(e){c>=e&&c>0&&n(1,c-=1),i.splice(e,1),n(0,i),a.focus()}return e.$$set=e=>{"ns"in e&&n(2,r=e.ns),"tabs"in e&&n(0,i=e.tabs),"newTab"in e&&n(3,o=e.newTab),"active"in e&&n(4,s=e.active),"selected"in e&&n(1,c=e.selected),"minTabs"in e&&n(5,l=e.minTabs)},[i,c,r,o,s,l,a,m,p,function(){n(0,i[i.length]=o(),i),n(1,c=i.length-1),a.focus()},u,e=>u(e),e=>p(e),function(e){O[e?"unshift":"push"]((()=>{a=e,n(6,a)}))},function(t){e.$$.not_equal(i[c].text,t)&&(i[c].text=t,n(0,i))},e=>m("input",i)]}class no extends e{constructor(e){super(),t(this,e,to,eo,n,{ns:2,tabs:0,newTab:3,active:4,selected:1,minTabs:5})}}function ao(e,t,n){const a=e.slice();return a[2]=t[n],a}function ro(e){let t;function n(e,t){return e[1].output?oo:io}let a=n(e),r=a(e);return{c(){r.c(),t=f()},l(e){r.l(e),t=f()},m(e,n){r.m(e,n),m(e,t,n)},p(e,i){a===(a=n(e))&&r?r.p(e,i):(r.d(1),r=a(e),r&&(r.c(),r.m(t.parentNode,t)))},d(e){r.d(e),e&&c(t)}}}function io(e){let t,n=e[1]+"";return{c(){t=r(n)},l(e){t=s(e,n)},m(e,n){m(e,t,n)},p(e,a){1&a&&n!==(n=e[1]+"")&&j(t,n)},d(e){e&&c(t)}}}function oo(e){let t,n,l=e[1].output.errors,p=[];for(let t=0;t<l.length;t+=1)p[t]=co(ao(e,l,t));return{c(){t=r("Invalid\n    "),n=a("ul");for(let e=0;e<p.length;e+=1)p[e].c()},l(e){t=s(e,"Invalid\n    "),n=i(e,"UL",{});var a=o(n);for(let e=0;e<p.length;e+=1)p[e].l(a);a.forEach(c)},m(e,a){m(e,t,a),m(e,n,a);for(let e=0;e<p.length;e+=1)p[e].m(n,null)},p(e,t){if(1&t){let a;for(l=e[1].output.errors,a=0;a<l.length;a+=1){const r=ao(e,l,a);p[a]?p[a].p(r,t):(p[a]=co(r),p[a].c(),p[a].m(n,null))}for(;a<p.length;a+=1)p[a].d(1);p.length=l.length}},d(e){e&&c(t),e&&c(n),g(p,e)}}}function so(e){let t,n,u,f,d,h,y=e[2].instanceLocation+"",v=e[2].absoluteKeywordLocation+"";return{c(){t=a("li"),n=a("code"),u=r(y),f=r(" fails schema constraint "),d=a("code"),h=r(v),this.h()},l(e){t=i(e,"LI",{class:!0});var a=o(t);n=i(a,"CODE",{class:!0});var r=o(n);u=s(r,y),r.forEach(c),f=s(a," fails schema constraint "),d=i(a,"CODE",{class:!0});var l=o(d);h=s(l,v),l.forEach(c),a.forEach(c),this.h()},h(){l(n,"class","svelte-1sdf2dp"),l(d,"class","svelte-1sdf2dp"),l(t,"class","svelte-1sdf2dp")},m(e,a){m(e,t,a),p(t,n),p(n,u),p(t,f),p(t,d),p(d,h)},p(e,t){1&t&&y!==(y=e[2].instanceLocation+"")&&j(u,y),1&t&&v!==(v=e[2].absoluteKeywordLocation+"")&&j(h,v)},d(e){e&&c(t)}}}function co(e){let t,n=!e[2].valid&&!e[2].keyword.endsWith("#validate"),a=n&&so(e);return{c(){a&&a.c(),t=f()},l(e){a&&a.l(e),t=f()},m(e,n){a&&a.m(e,n),m(e,t,n)},p(e,r){1&r&&(n=!e[2].valid&&!e[2].keyword.endsWith("#validate")),n?a?a.p(e,r):(a=so(e),a.c(),a.m(t.parentNode,t)):a&&(a.d(1),a=null)},d(e){a&&a.d(e),e&&c(t)}}}function lo(e){let t,n=e[0]?"Valid":"";return{c(){t=r(n)},l(e){t=s(e,n)},m(e,n){m(e,t,n)},p(e,a){1&a&&n!==(n=e[0]?"Valid":"")&&j(t,n)},d(e){e&&c(t)}}}function mo(e){let t;return{c(){t=r("Validating ...")},l(e){t=s(e,"Validating ...")},m(e,n){m(e,t,n)},p:u,d(e){e&&c(t)}}}function po(e){let t,n,a={ctx:e,current:null,token:null,hasCatch:!0,pending:mo,then:lo,catch:ro,value:0,error:1};return R(n=e[0],a),{c(){t=f(),a.block.c()},l(e){t=f(),a.block.l(e)},m(e,n){m(e,t,n),a.block.m(e,a.anchor=n),a.mount=()=>t.parentNode,a.anchor=t},p(t,[r]){e=t,a.ctx=e,1&r&&n!==(n=e[0])&&R(n,a)||T(a,e,r)},i:u,o:u,d(e){e&&c(t),a.block.d(e),a.token=null,a=null}}}function uo(e,t,n){let{results:a}=t;return e.$$set=e=>{"results"in e&&n(0,a=e.results)},[a]}class fo extends e{constructor(e){super(),t(this,e,uo,po,n,{results:0})}}function ho(e){let t,n,r,s,u;const f=e[2].default,y=D(f,e,e[1],null);return{c(){t=a("a"),n=q("svg"),r=q("path"),s=d(),y&&y.c(),this.h()},l(e){t=i(e,"A",{href:!0,class:!0});var a=o(t);n=i(a,"svg",{height:!0,viewBox:!0,version:!0,"aria-hidden":!0,class:!0},1);var l=o(n);r=i(l,"path",{"fill-rule":!0,d:!0},1),o(r).forEach(c),l.forEach(c),s=h(a),y&&y.l(a),a.forEach(c),this.h()},h(){l(r,"fill-rule","evenodd"),l(r,"d","M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"),l(n,"height","1.5em"),l(n,"viewBox","0 0 16 16"),l(n,"version","1.1"),l(n,"aria-hidden","true"),l(n,"class","svelte-i8toq"),l(t,"href",e[0]),l(t,"class","svelte-i8toq")},m(e,a){m(e,t,a),p(t,n),p(n,r),p(t,s),y&&y.m(t,null),u=!0},p(e,[n]){y&&y.p&&(!u||2&n)&&M(y,f,e,e[1],n,null,null),(!u||1&n)&&l(t,"href",e[0])},i(e){u||(A(y,e),u=!0)},o(e){C(y,e),u=!1},d(e){e&&c(t),y&&y.d(e)}}}function yo(e,t,n){let{$$slots:a={},$$scope:r}=t,{href:i=""}=t;return e.$$set=e=>{"href"in e&&n(0,i=e.href),"$$scope"in e&&n(1,r=e.$$scope)},[i,r,a]}class vo extends e{constructor(e){super(),t(this,e,yo,ho,n,{href:0})}}function go(e){let t,n,r,s,u;const f=e[2].default,y=D(f,e,e[1],null);return{c(){t=a("a"),n=q("svg"),r=q("path"),s=d(),y&&y.c(),this.h()},l(e){t=i(e,"A",{href:!0,class:!0});var a=o(t);n=i(a,"svg",{height:!0,viewBox:!0,version:!0,"aria-hidden":!0,class:!0},1);var l=o(n);r=i(l,"path",{d:!0},1),o(r).forEach(c),l.forEach(c),s=h(a),y&&y.l(a),a.forEach(c),this.h()},h(){l(r,"d","M240,250h100v-50h100V0H240V250z M340,50h50v100h-50V50z M480,0v200h100V50h50v150h50V50h50v150h50V0H480z M0,200h100V50h50v150h50V0H0V200z"),l(n,"height","1em"),l(n,"viewBox","0 0 780 250"),l(n,"version","1.1"),l(n,"aria-hidden","true"),l(n,"class","svelte-wj8h0n"),l(t,"href",e[0]),l(t,"class","svelte-wj8h0n")},m(e,a){m(e,t,a),p(t,n),p(n,r),p(t,s),y&&y.m(t,null),u=!0},p(e,[n]){y&&y.p&&(!u||2&n)&&M(y,f,e,e[1],n,null,null),(!u||1&n)&&l(t,"href",e[0])},i(e){u||(A(y,e),u=!0)},o(e){C(y,e),u=!1},d(e){e&&c(t),y&&y.d(e)}}}function $o(e,t,n){let{$$slots:a={},$$scope:r}=t,{href:i=""}=t;return e.$$set=e=>{"href"in e&&n(0,i=e.href),"$$scope"in e&&n(1,r=e.$$scope)},[i,r,a]}class bo extends e{constructor(e){super(),t(this,e,$o,go,n,{href:0})}}function Oo(e){let t,n,r,s,u,f,y,v,g;const $=e[2].default,b=D($,e,e[1],null);return{c(){t=a("a"),n=q("svg"),r=q("g"),s=q("path"),u=q("path"),f=q("path"),y=q("path"),v=d(),b&&b.c(),this.h()},l(e){t=i(e,"A",{href:!0,class:!0});var a=o(t);n=i(a,"svg",{version:!0,viewBox:!0,height:!0,class:!0},1);var l=o(n);r=i(l,"g",{transform:!0,id:!0},1);var m=o(r);s=i(m,"path",{id:!0,d:!0,style:!0},1),o(s).forEach(c),u=i(m,"path",{id:!0,d:!0,style:!0},1),o(u).forEach(c),f=i(m,"path",{id:!0,d:!0,style:!0},1),o(f).forEach(c),y=i(m,"path",{id:!0,d:!0,style:!0},1),o(y).forEach(c),m.forEach(c),l.forEach(c),v=h(a),b&&b.l(a),a.forEach(c),this.h()},h(){l(s,"id","path4544"),l(s,"d","m 122.99401,114.18985 c -4.32897,-0.9404 -7.58044,-3.47848 -8.71251,-6.80095 -0.78921,-2.31618 -0.67682,-6.07238 0.33363,-11.150598 0.48507,-2.437836 0.88169,-5.347843 0.88139,-6.466688 -9.8e-4,-3.718098 -1.71106,-5.735418 -5.1001,-6.016462 l -1.9549,-0.162116 v -2.392655 -2.392657 l 1.85208,-0.250855 c 2.70243,-0.366031 3.74441,-1.02838 4.57629,-2.908984 0.61121,-1.381726 0.68884,-2.068648 0.50552,-4.472869 -0.11913,-1.562244 -0.53527,-4.348568 -0.92477,-6.191832 -0.98954,-4.682868 -0.94822,-8.485471 0.11707,-10.773163 1.56862,-3.368589 5.43705,-5.854553 9.93248,-6.382903 l 1.93299,-0.227185 v 2.518015 2.518015 h -1.29973 c -1.77186,0 -4.2497,1.262413 -4.8835,2.488054 -0.60797,1.175674 -0.65405,2.864146 -0.15834,5.802223 0.78343,4.643508 1.04707,9.098344 0.67592,11.421636 -0.42464,2.658142 -1.97477,5.796328 -3.6791,7.448236 l -1.18012,1.143813 1.61497,1.982752 c 1.99051,2.443801 2.76458,4.148744 3.24284,7.142561 0.37835,2.368341 0.0844,7.282673 -0.67072,11.213982 -1.05359,5.48514 0.1623,7.65141 4.66209,8.30613 l 1.67569,0.24382 v 2.44782 c 0,2.79211 0.17086,2.69708 -3.43917,1.91286 z"),V(s,"fill","stroke-width:0.35277775"),l(u,"id","path4546"),l(u,"d","m 152.2304,112.24932 v -2.42987 l 2.04969,-0.42336 c 2.26276,-0.46736 4.054,-1.8634 4.45842,-3.47475 0.1274,-0.50758 -0.11267,-3.16398 -0.53347,-5.90311 -1.37183,-8.929552 -0.6114,-13.537042 2.85482,-17.297452 l 1.48237,-1.60818 -1.1108,-1.26512 c -3.97855,-4.53132 -4.66885,-8.552208 -3.15364,-18.369547 0.76342,-4.946305 0.76409,-4.994322 0.087,-6.173611 -0.79713,-1.388278 -3.28385,-2.776033 -4.97438,-2.776033 h -1.15997 v -2.469445 c 0,-2.811057 -0.0583,-2.773846 3.24583,-2.072788 3.9645,0.841179 6.80448,2.853272 8.27787,5.864775 0.84544,1.728026 0.97275,2.400136 0.94911,5.010889 -0.015,1.658349 -0.35758,4.682054 -0.76125,6.719346 -1.49867,7.563594 -1.3651,9.576204 0.7654,11.532814 0.98915,0.90842 1.64012,1.17274 3.37032,1.36849 l 2.14439,0.24261 v 2.42387 2.42388 l -1.6757,7.1e-4 c -2.1517,7e-4 -3.9323,0.90924 -4.83869,2.46889 -0.95194,1.63803 -0.89239,5.20675 0.17364,10.40695 0.90648,4.421902 1.05253,8.458452 0.3882,10.728752 -0.70059,2.39406 -3.81995,5.29609 -6.74745,6.27718 -1.26118,0.42266 -2.96775,0.87096 -3.79236,0.99623 l -1.49931,0.22775 z"),V(u,"stroke-width","0.35277778"),l(f,"id","path4548"),l(f,"d","m 131.74239,108.26592 c -1.02163,-1.2988 -0.87294,-3.53652 0.38087,-5.73185 0.92776,-1.62446 4.80862,-6.948549 7.61066,-10.440949 l 1.13094,-1.40958 -1.80213,-5.22523 c -2.02147,-5.86123 -2.0098,-5.97467 0.65581,-6.37225 l 1.46834,-0.219 1.64076,3.3506 c 0.90242,1.84283 1.76982,3.35061 1.92755,3.35061 0.15774,0 1.77489,-1.75542 3.59368,-3.90092 3.15918,-3.72667 3.35688,-3.89165 4.42591,-3.69334 0.64552,0.11974 1.21858,0.0465 1.35432,-0.17316 0.31818,-0.51481 1.23083,0.24704 1.23083,1.02746 0,0.32009 -0.45438,1.13409 -1.00972,1.80888 -2.26771,2.75549 -7.10417,9.27155 -7.10417,9.5713 0,0.17685 0.97502,2.45302 2.16671,5.05816 l 2.1667,4.736609 -0.65823,0.98459 c -0.36203,0.54152 -0.66236,1.12603 -0.6674,1.29891 -0.005,0.17288 -0.27769,0.48371 -0.60588,0.69073 -0.83174,0.52464 -1.44656,-0.11541 -3.9894,-4.153119 -1.16417,-1.84856 -2.23163,-3.36491 -2.37215,-3.36967 -0.31309,-0.0106 -3.7911,5.131969 -6.47955,9.580639 -2.37093,3.92324 -1.93885,3.4204 -3.26614,3.80106 -0.95533,0.27398 -1.19348,0.19843 -1.79831,-0.57048 z"),V(f,"stroke-width","0.35277775"),l(y,"id","path4550"),l(y,"d","m 131.98567,83.677091 c -2.15148,-3.8472 -6.0183,-9.42829 -7.57842,-10.93815 -0.79252,-0.76698 -1.44094,-1.57494 -1.44094,-1.79546 0,-0.6016 1.61695,-1.21975 3.19058,-1.21975 1.69822,0 3.49597,1.47777 5.0997,4.19203 0.58208,0.98515 1.15641,1.79434 1.27629,1.79819 0.11988,0.004 0.80873,-1.65116 1.53078,-3.67779 1.5464,-4.34039 5.62351,-12.777999 7.22453,-14.951229 1.3726,-1.86316 3.42936,-2.865165 5.90274,-2.875676 3.23375,-0.01374 3.24268,0.130067 0.20474,3.296663 -4.63599,4.832327 -6.76321,8.809632 -11.25155,21.037252 -1.24637,3.39549 -2.39032,6.47895 -2.54212,6.85214 -0.23022,0.56597 -0.49833,0.28096 -1.61633,-1.71822 z"),V(y,"stroke-width","0.35277775"),l(r,"transform","translate(-104.22785,-45.507923)"),l(r,"id","layer1"),l(n,"version","1.1"),l(n,"viewBox","0 0 70.423268 70.42326"),l(n,"height","1.25em"),l(n,"class","svelte-27u907"),l(t,"href",e[0]),l(t,"class","svelte-27u907")},m(e,a){m(e,t,a),p(t,n),p(n,r),p(r,s),p(r,u),p(r,f),p(r,y),p(t,v),b&&b.m(t,null),g=!0},p(e,[n]){b&&b.p&&(!g||2&n)&&M(b,$,e,e[1],n,null,null),(!g||1&n)&&l(t,"href",e[0])},i(e){g||(A(b,e),g=!0)},o(e){C(b,e),g=!1},d(e){e&&c(t),b&&b.d(e)}}}function jo(e,t,n){let{$$slots:a={},$$scope:r}=t,{href:i=""}=t;return e.$$set=e=>{"href"in e&&n(0,i=e.href),"$$scope"in e&&n(1,r=e.$$scope)},[i,r,a]}class So extends e{constructor(e){super(),t(this,e,jo,Oo,n,{href:0})}}function Io(e){let t;return{c(){t=r("hyperjump-io/json-schema.hyperjump.io")},l(e){t=s(e,"hyperjump-io/json-schema.hyperjump.io")},m(e,n){m(e,t,n)},d(e){e&&c(t)}}}function xo(e){let t;return{c(){t=r("hyperjump-io/json-schema-validator")},l(e){t=s(e,"hyperjump-io/json-schema-validator")},m(e,n){m(e,t,n)},d(e){e&&c(t)}}}function wo(e){let t;return{c(){t=r("@hyperjump/json-schema")},l(e){t=s(e,"@hyperjump/json-schema")},m(e,n){m(e,t,n)},d(e){e&&c(t)}}}function Eo(e){let t;return{c(){t=r("@hyperjump/json-schema-core")},l(e){t=s(e,"@hyperjump/json-schema-core")},m(e,n){m(e,t,n)},d(e){e&&c(t)}}}function Po(e){let t;return{c(){t=r("JSON Schema")},l(e){t=s(e,"JSON Schema")},m(e,n){m(e,t,n)},d(e){e&&c(t)}}}function Ao(e){let t,n,r,s,u,f,y,v,g,$,b,O,j,S,I,P,k;return s=new vo({props:{href:"https://github.com/hyperjump-io/json-schema.hyperjump.io",$$slots:{default:[Io]},$$scope:{ctx:e}}}),y=new vo({props:{href:"https://github.com/hyperjump-io/json-schema-validator",$$slots:{default:[xo]},$$scope:{ctx:e}}}),$=new bo({props:{href:"https://www.npmjs.com/package/@hyperjump/json-schema",$$slots:{default:[wo]},$$scope:{ctx:e}}}),j=new bo({props:{href:"https://www.npmjs.com/package/@hyperjump/json-schema-core",$$slots:{default:[Eo]},$$scope:{ctx:e}}}),P=new So({props:{href:"https://json-schema.org",$$slots:{default:[Po]},$$scope:{ctx:e}}}),{c(){t=a("footer"),n=a("ul"),r=a("li"),x(s.$$.fragment),u=d(),f=a("li"),x(y.$$.fragment),v=d(),g=a("li"),x($.$$.fragment),b=d(),O=a("li"),x(j.$$.fragment),S=d(),I=a("li"),x(P.$$.fragment),this.h()},l(e){t=i(e,"FOOTER",{class:!0});var a=o(t);n=i(a,"UL",{class:!0});var l=o(n);r=i(l,"LI",{class:!0});var m=o(r);w(s.$$.fragment,m),m.forEach(c),u=h(l),f=i(l,"LI",{class:!0});var p=o(f);w(y.$$.fragment,p),p.forEach(c),v=h(l),g=i(l,"LI",{class:!0});var d=o(g);w($.$$.fragment,d),d.forEach(c),b=h(l),O=i(l,"LI",{class:!0});var x=o(O);w(j.$$.fragment,x),x.forEach(c),S=h(l),I=i(l,"LI",{class:!0});var E=o(I);w(P.$$.fragment,E),E.forEach(c),l.forEach(c),a.forEach(c),this.h()},h(){l(r,"class","svelte-17tbtsq"),l(f,"class","svelte-17tbtsq"),l(g,"class","svelte-17tbtsq"),l(O,"class","svelte-17tbtsq"),l(I,"class","svelte-17tbtsq"),l(n,"class","links svelte-17tbtsq"),l(t,"class","svelte-17tbtsq")},m(e,a){m(e,t,a),p(t,n),p(n,r),E(s,r,null),p(n,u),p(n,f),E(y,f,null),p(n,v),p(n,g),E($,g,null),p(n,b),p(n,O),E(j,O,null),p(n,S),p(n,I),E(P,I,null),k=!0},p(e,[t]){const n={};1&t&&(n.$$scope={dirty:t,ctx:e}),s.$set(n);const a={};1&t&&(a.$$scope={dirty:t,ctx:e}),y.$set(a);const r={};1&t&&(r.$$scope={dirty:t,ctx:e}),$.$set(r);const i={};1&t&&(i.$$scope={dirty:t,ctx:e}),j.$set(i);const o={};1&t&&(o.$$scope={dirty:t,ctx:e}),P.$set(o)},i(e){k||(A(s.$$.fragment,e),A(y.$$.fragment,e),A($.$$.fragment,e),A(j.$$.fragment,e),A(P.$$.fragment,e),k=!0)},o(e){C(s.$$.fragment,e),C(y.$$.fragment,e),C($.$$.fragment,e),C(j.$$.fragment,e),C(P.$$.fragment,e),k=!1},d(e){e&&c(t),N(s),N(y),N($),N(j),N(P)}}}class Co extends e{constructor(e){super(),t(this,e,null,Ao,n,{})}}const{Core:No,Keywords:ko,Schema:Ro}=Dt;Ro.add(JSON.parse('{\n    "$id": "https://spec.openapis.org/oas/3.1/dialect/base",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/core": true,\n        "https://json-schema.org/draft/2020-12/vocab/applicator": true,\n        "https://json-schema.org/draft/2020-12/vocab/unevaluated": true,\n        "https://json-schema.org/draft/2020-12/vocab/validation": true,\n        "https://json-schema.org/draft/2020-12/vocab/meta-data": true,\n        "https://json-schema.org/draft/2020-12/vocab/format-annotation": true,\n        "https://json-schema.org/draft/2020-12/vocab/content": true,\n        "https://spec.openapis.org/oas/3.1/vocab/base": false\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "OpenAPI 3.1 Schema Object Dialect",\n    "allOf": [\n        { "$ref": "https://json-schema.org/draft/2020-12/schema" },\n        { "$ref": "https://spec.openapis.org/oas/3.1/meta/base" }\n    ]\n}')),Ro.add(JSON.parse('{\n    "$id": "https://spec.openapis.org/oas/3.1/meta/base",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://spec.openapis.org/oas/3.1/vocab/base": true\n    },\n    "$dynamicAnchor": "meta",\n    "title": "OAS Base vocabulary",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "example": true,\n        "discriminator": { "$ref": "#/$defs/discriminator" },\n        "externalDocs": { "$ref": "#/$defs/external-docs" },\n        "xml": { "$ref": "#/$defs/xml" }\n    },\n    "$defs": {\n        "extensible": {\n            "patternProperties": {\n                "^x-": true\n            }\n        },\n        "discriminator": {\n            "$ref": "#/$defs/extensible",\n            "type": "object",\n            "properties": {\n                "propertyName": {\n                    "type": "string"\n                },\n                "mapping": {\n                    "type": "object",\n                    "additionalProperties": {\n                        "type": "string"\n                    }\n                }\n            },\n            "required": ["propertyName"],\n            "unevaluatedProperties": false\n        },\n        "external-docs": {\n            "$ref": "#/$defs/extensible",\n            "type": "object",\n            "properties": {\n                "url": {\n                    "type": "string",\n                    "format": "uri-reference"\n                },\n                "description": {\n                    "type": "string"\n                }\n            },\n            "required": ["url"],\n            "unevaluatedProperties": false\n        },\n        "xml": {\n            "$ref": "#/$defs/extensible",\n            "type": "object",\n            "properties": {\n                "name": {\n                    "type": "string"\n                },\n                "namespace": {\n                    "type": "string",\n                    "format": "uri"\n                },\n                "prefix": {\n                    "type": "string"\n                },\n                "attribute": {\n                    "type": "boolean"\n                },\n                "wrapped": {\n                    "type": "boolean"\n                }\n            },\n            "unevaluatedProperties": false\n        }\n    }\n}')),No.defineVocabulary("https://spec.openapis.org/oas/3.1/vocab/extensions",{example:ko.metaData,discriminator:ko.metaData,externalDocs:ko.metaData,xml:ko.metaData});const{Core:To,Schema:Do}=Dt;To.add,Do.get,To.validate,To.setMetaOutputFormat,To.setShouldMetaValidate,To.FLAG,To.BASIC,To.DETAILED,To.VERBOSE;const{Core:qo,Schema:Mo,Instance:Vo}=Dt;var Lo={compile:async(e,t,n)=>{const a=await Mo.step("items",n),r=Mo.typeOf(a,"array")?Mo.length(a):Number.MAX_SAFE_INTEGER;return Mo.typeOf(e,"boolean")?[r,Mo.value(e)]:[r,await qo.compileSchema(e,t)]},interpret:([e,t],n,a,r)=>!Vo.typeOf(n,"array")||("string"==typeof t?Vo.every(((n,i)=>i<e||qo.interpretSchema(t,n,a,r)),n):Vo.every(((n,a)=>a<e||t),n))};const{Core:Jo,Schema:Uo,Instance:_o}=Dt,Fo=([e,t],n,a,r)=>!_o.typeOf(n,"array")||_o.every(((n,i)=>i<e||Jo.interpretSchema(t,n,a,r)),n);var zo={compile:async(e,t,n)=>{const a=await Uo.step("items",n);return[Uo.typeOf(a,"array")?Uo.length(a):Number.MAX_SAFE_INTEGER,await Jo.compileSchema(e,t)]},interpret:Fo,collectEvaluatedItems:(e,t,n,a)=>Fo(e,t,n,a)&&new Set(_o.map(((e,t)=>t),t))};const{Core:Bo,Schema:Ko,Instance:Go}=Dt;var Zo={compile:async(e,t,n)=>{const a=await Ko.step("properties",n),r=Ko.typeOf(a,"object")?Ko.keys(a):[],i=await Ko.step("patternProperties",n),o=Ko.typeOf(i,"object")?Ko.keys(i).map((e=>new RegExp(e))):[];return Ko.typeOf(e,"boolean")?[r,o,Ko.value(e)]:[r,o,await Bo.compileSchema(e,t)]},interpret:([e,t,n],a,r,i)=>{if(!Go.typeOf(a,"object"))return!0;const o=Go.entries(a).filter((([n])=>!e.includes(n)&&!t.some((e=>e.test(n)))));return"string"==typeof n?o.every((([,e])=>Bo.interpretSchema(n,e,r,i))):0===o.length||n}};const{Core:Ho,Schema:Wo,Instance:Xo}=Dt,Qo=([e,t,n],a,r,i)=>!Xo.typeOf(a,"object")||Xo.entries(a).filter((([n])=>!e.includes(n)&&!t.some((e=>e.test(n))))).every((([,e])=>Ho.interpretSchema(n,e,r,i)));var Yo={compile:async(e,t,n)=>{const a=await Wo.step("properties",n),r=Wo.typeOf(a,"object")?Wo.keys(a):[],i=await Wo.step("patternProperties",n);return[r,Wo.typeOf(i,"object")?Wo.keys(i).map((e=>new RegExp(e))):[],await Ho.compileSchema(e,t)]},interpret:Qo,collectEvaluatedProperties:(e,t,n,a)=>Qo(e,t,n,a)&&[new RegExp("")]};const{Core:es,Schema:ts}=Dt;var ns={compile:(e,t)=>Fe.pipeline([ts.map((async e=>es.compileSchema(await e,t))),Fe.all],e),interpret:(e,t,n,a)=>e.every((e=>es.interpretSchema(e,t,n,a))),collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,r)=>{const i=e&&es.collectEvaluatedProperties(r,t,n,a);return!1!==i&&[...e,...i]}),[]),collectEvaluatedItems:(e,t,n,a)=>e.reduce(((e,r)=>{const i=!1!==e&&es.collectEvaluatedItems(r,t,n,a);return!1!==i&&new Set([...e,...i])}),new Set)};const{Core:as,Schema:rs}=Dt;var is={compile:(e,t)=>Fe.pipeline([rs.map((async e=>as.compileSchema(await e,t))),Fe.all],e),interpret:(e,t,n,a)=>e.filter((e=>as.interpretSchema(e,t,n,a))).length>0,collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,r)=>{const i=as.collectEvaluatedProperties(r,t,n,a);return!1!==i?[...e||[],...i]:e}),!1),collectEvaluatedItems:(e,t,n,a)=>e.reduce(((e,r)=>{const i=as.collectEvaluatedItems(r,t,n,a);return!1!==i?new Set([...e||[],...i]):e}),!1)};const{Schema:os,Instance:ss}=Dt;var cs={compile:e=>mn(os.value(e)),interpret:(e,t)=>mn(ss.value(t))===e};const{Core:ls,Instance:ms}=Dt;var ps={compile:(e,t)=>ls.compileSchema(e,t),interpret:(e,t,n,a)=>!ms.typeOf(t,"array")||ms.some((t=>ls.interpretSchema(e,t,n,a)),t)};const{Core:us,Schema:fs,Instance:ds}=Dt,hs=({contains:e,minContains:t,maxContains:n},a,r,i)=>{if(!ds.typeOf(a,"array"))return!0;const o=ds.reduce(((t,n)=>us.interpretSchema(e,n,r,i)?t+1:t),0,a);return o>=t&&o<=n};var ys={compile:async(e,t,n)=>{const a=await us.compileSchema(e,t),r=await fs.step("minContains",n),i=fs.typeOf(r,"number")?fs.value(r):1,o=await fs.step("maxContains",n);return{contains:a,minContains:i,maxContains:fs.typeOf(o,"number")?fs.value(o):Number.MAX_SAFE_INTEGER}},interpret:hs,collectEvaluatedItems:(e,t,n,a)=>hs(e,t,n,a)&&ds.reduce(((t,r,i)=>us.interpretSchema(e.contains,r,n,a)?t.add(i):t),new Set,t)};const{Core:vs,Schema:gs,Instance:$s}=Dt,bs=({contains:e,minContains:t,maxContains:n},a,r,i)=>{if(!$s.typeOf(a,"array")&&!$s.typeOf(a,"object"))return!0;const o=$s.entries(a).reduce(((t,[,n])=>vs.interpretSchema(e,n,r,i)?t+1:t),0);return o>=t&&o<=n};var Os={compile:async(e,t,n)=>{const a=await vs.compileSchema(e,t),r=await gs.step("minContains",n),i=gs.typeOf(r,"number")?gs.value(r):1,o=await gs.step("maxContains",n);return{contains:a,minContains:i,maxContains:gs.typeOf(o,"number")?gs.value(o):Number.MAX_SAFE_INTEGER}},interpret:bs,collectEvaluatedItems:(e,t,n,a)=>bs(e,t,n,a)&&$s.typeOf(t,"array")&&$s.reduce(((t,r,i)=>vs.interpretSchema(e.contains,r,n,a)?t.add(i):t),new Set,t),collectEvaluatedProperties:(e,t,n,a)=>bs(e,t,n,a)&&$s.typeOf(t,"object")&&$s.entries(t).reduce(((t,[r,i])=>(vs.interpretSchema(e.contains,i,n,a)&&t.push(r),t)),[],t)};const{Core:js,Schema:Ss}=Dt;var Is={compile:async(e,t)=>{await Fe.pipeline([Ss.entries,Fe.map((([,e])=>js.compileSchema(e,t))),Fe.all],e)},interpret:()=>!0};const{Core:xs,Schema:ws,Instance:Es}=Dt;var Ps={compile:(e,t)=>Fe.pipeline([ws.entries,Fe.map((async([e,n])=>[e,ws.typeOf(n,"array")?ws.value(n):await xs.compileSchema(n,t)])),Fe.all],e),interpret:(e,t,n,a)=>{const r=Es.value(t);return!Es.typeOf(t,"object")||e.every((([e,i])=>!(e in r)||(Array.isArray(i)?i.every((e=>e in r)):xs.interpretSchema(i,t,n,a))))}};const{Schema:As,Instance:Cs}=Dt;var Ns={compile:e=>Fe.pipeline([As.entries,Fe.map((([e,t])=>[e,As.value(t)])),Fe.all],e),interpret:(e,t)=>{const n=Cs.value(t);return!Cs.typeOf(t,"object")||e.every((([e,t])=>!(e in n)||t.every((e=>e in n))))}};const{Core:ks,Schema:Rs,Instance:Ts}=Dt;var Ds={compile:(e,t)=>Fe.pipeline([Rs.entries,Fe.map((async([e,n])=>[e,await ks.compileSchema(n,t)])),Fe.all],e),interpret:(e,t,n,a)=>{const r=Ts.value(t);return!Ts.typeOf(t,"object")||e.every((([e,i])=>!(e in r)||ks.interpretSchema(i,t,n,a)))},collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,[r,i])=>{if(!e||!Ts.has(r,t))return e;const o=ks.collectEvaluatedProperties(i,t,n,a);return!1!==o&&e.concat(o)}),[])};const{Core:qs,Schema:Ms}=Dt,{safeResolveUrl:Vs,splitUrl:Ls}=X;var Js={compile:e=>{const t=Vs(e.id,Ms.value(e));return Ls(t)},interpret:([e,t],n,a,r)=>{const i=t in a.metaData[e].dynamicAnchors?r[t]:e,o=Ms.getAnchorPointer(a.metaData[i],t);return qs.interpretSchema(`${i}#${o}`,n,a,r)},collectEvaluatedProperties:qs.collectEvaluatedProperties,collectEvaluatedItems:qs.collectEvaluatedItems};const{Core:Us,Schema:_s}=Dt,{safeResolveUrl:Fs,splitUrl:zs}=X;var Bs={compile:e=>zs(_s.value(e)),interpret:([e,t],n,a,r)=>{if(!(t in r))throw Error(`No dynamic anchor found for "${t}"`);const i=Fs(r[t],e),o=_s.getAnchorPointer(a.metaData[i],t);return Us.interpretSchema(`${i}#${o}`,n,a,r)},collectEvaluatedProperties:Us.collectEvaluatedProperties,collectEvaluatedItems:Us.collectEvaluatedItems};const{Schema:Ks,Instance:Gs}=Dt;var Zs={compile:e=>Ks.value(e).map(mn),interpret:(e,t)=>e.some((e=>mn(Gs.value(t))===e))};const{Schema:Hs,Instance:Ws}=Dt;var Xs={compile:async e=>Hs.value(e),interpret:(e,t)=>!Ws.typeOf(t,"number")||Ws.value(t)<e};const{Schema:Qs,Instance:Ys}=Dt;var ec={compile:async e=>Qs.value(e),interpret:(e,t)=>!Ys.typeOf(t,"number")||Ys.value(t)>e};const{Core:tc}=Dt;var nc={compile:(e,t)=>tc.compileSchema(e,t),interpret:(e,t,n,a)=>(tc.interpretSchema(e,t,n,a),!0),collectEvaluatedProperties:(e,t,n,a)=>tc.collectEvaluatedProperties(e,t,n,a)||[],collectEvaluatedItems:(e,t,n,a)=>tc.collectEvaluatedItems(e,t,n,a)||new Set};const{Core:ac,Schema:rc}=Dt,ic=(e,t,n,a)=>{const r=n[e][2];return"boolean"==typeof r?r:r.every((([e,,r])=>ac.getKeyword(e).interpret(r,t,n,a)))};var oc={compile:async(e,t,n)=>{if(rc.has("if",n)){const a=await rc.step("if",n);return[await ac.compileSchema(a,t),await ac.compileSchema(e,t)]}return[]},interpret:([e,t],n,a,r)=>void 0===e||!ic(e,n,a,r)||ac.interpretSchema(t,n,a,r),collectEvaluatedProperties:([e,t],n,a,r)=>void 0!==e&&ic(e,n,a,r)?ac.collectEvaluatedProperties(t,n,a,r):[],collectEvaluatedItems:([e,t],n,a,r)=>void 0!==e&&ic(e,n,a,r)?ac.collectEvaluatedItems(t,n,a,r):new Set};const{Core:sc,Schema:cc}=Dt,lc=(e,t,n,a)=>{const r=n[e][2];return"boolean"==typeof r?r:r.every((([e,,r])=>sc.getKeyword(e).interpret(r,t,n,a)))};var mc={compile:async(e,t,n)=>{if(cc.has("if",n)){const a=await cc.step("if",n);return[await sc.compileSchema(a,t),await sc.compileSchema(e,t)]}return[]},interpret:([e,t],n,a,r)=>void 0===e||lc(e,n,a,r)||sc.interpretSchema(t,n,a,r),collectEvaluatedProperties:([e,t],n,a,r)=>void 0===e||lc(e,n,a,r)?[]:sc.collectEvaluatedProperties(t,n,a,r),collectEvaluatedItems:([e,t],n,a,r)=>void 0===e||lc(e,n,a,r)?new Set:sc.collectEvaluatedItems(t,n,a,r)};const{Core:pc,Schema:uc,Instance:fc}=Dt,dc=(e,t,n,a)=>!fc.typeOf(t,"array")||("string"==typeof e?fc.every((t=>pc.interpretSchema(e,t,n,a)),t):fc.every(((t,r)=>!(r in e)||pc.interpretSchema(e[r],t,n,a)),t));var hc={compile:(e,t)=>uc.typeOf(e,"array")?Fe.pipeline([uc.map((e=>pc.compileSchema(e,t))),Fe.all],e):pc.compileSchema(e,t),interpret:dc,collectEvaluatedItems:(e,t,n,a)=>dc(e,t,n,a)&&("string"==typeof e?new Set(fc.map(((e,t)=>t),t)):new Set(e.map(((e,t)=>t))))};const{Core:yc,Schema:vc,Instance:gc}=Dt,$c=([e,t],n,a,r)=>!gc.typeOf(n,"array")||gc.every(((n,i)=>i<e||yc.interpretSchema(t,n,a,r)),n);var bc={compile:async(e,t,n)=>{const a=await vc.step("prefixItems",n);return[vc.typeOf(a,"array")?vc.length(a):0,await yc.compileSchema(e,t)]},interpret:$c,collectEvaluatedItems:(e,t,n,a)=>$c(e,t,n,a)&&new Set(gc.map(((e,t)=>t),t))};const{Schema:Oc,Instance:jc}=Dt;var Sc={compile:e=>Oc.value(e),interpret:(e,t)=>!jc.typeOf(t,"array")||jc.length(t)<=e};const{Schema:Ic,Instance:xc}=Dt;var wc={compile:e=>Ic.value(e),interpret:(e,t)=>!xc.typeOf(t,"string")||xc.length(t)<=e};const{Schema:Ec,Instance:Pc}=Dt;var Ac={compile:e=>Ec.value(e),interpret:(e,t)=>!Pc.typeOf(t,"string")||[...Pc.value(t)].length<=e};const{Schema:Cc,Instance:Nc}=Dt;var kc={compile:e=>Cc.value(e),interpret:(e,t)=>!Nc.typeOf(t,"object")||Nc.keys(t).length<=e};const{Schema:Rc,Instance:Tc}=Dt;var Dc={compile:async(e,t,n)=>{const a=await Rc.step("exclusiveMaximum",n),r=Rc.value(a);return[Rc.value(e),r]},interpret:([e,t],n)=>{if(!Tc.typeOf(n,"number"))return!0;const a=Tc.value(n);return t?a<e:a<=e}};const{Schema:qc,Instance:Mc}=Dt;var Vc={compile:async e=>qc.value(e),interpret:(e,t)=>!Mc.typeOf(t,"number")||Mc.value(t)<=e};const{Schema:Lc,Instance:Jc}=Dt;var Uc={compile:e=>Lc.value(e),interpret:(e,t)=>!Jc.typeOf(t,"array")||Jc.length(t)>=e};const{Schema:_c,Instance:Fc}=Dt;var zc={compile:e=>_c.value(e),interpret:(e,t)=>!Fc.typeOf(t,"string")||Fc.value(t).length>=e};const{Schema:Bc,Instance:Kc}=Dt;var Gc={compile:e=>Bc.value(e),interpret:(e,t)=>!Kc.typeOf(t,"string")||[...Kc.value(t)].length>=e};const{Schema:Zc,Instance:Hc}=Dt;var Wc={compile:e=>Zc.value(e),interpret:(e,t)=>{const n=Hc.value(t);return!Hc.typeOf(t,"object")||Object.keys(n).length>=e}};const{Schema:Xc,Instance:Qc}=Dt;var Yc={compile:async(e,t,n)=>{const a=await Xc.step("exclusiveMinimum",n),r=Xc.value(a);return[Xc.value(e),r]},interpret:([e,t],n)=>{if(!Qc.typeOf(n,"number"))return!0;const a=Qc.value(n);return t?a>e:a>=e}};const{Schema:el,Instance:tl}=Dt;var nl={compile:async e=>el.value(e),interpret:(e,t)=>!tl.typeOf(t,"number")||tl.value(t)>=e};const{Schema:al,Instance:rl}=Dt,il=(e,t)=>Math.abs(e-t)<1.1920929e-7;var ol={compile:e=>al.value(e),interpret:(e,t)=>{if(!rl.typeOf(t,"number"))return!0;const n=rl.value(t)%e;return il(0,n)||il(e,n)}};const{Core:sl}=Dt;var cl={compile:sl.compileSchema,interpret:(e,t,n,a)=>!sl.interpretSchema(e,t,n,a)};const{Core:ll,Schema:ml}=Dt;var pl={compile:(e,t)=>Fe.pipeline([ml.map((async e=>ll.compileSchema(await e,t))),Fe.all],e),interpret:(e,t,n,a)=>{let r=0;for(const i of e)if(ll.interpretSchema(i,t,n,a)&&r++,r>1)break;return 1===r},collectEvaluatedProperties:(e,t,n,a)=>{let r=0;return e.reduce(((e,i)=>{if(r>1)return!1;const o=ll.collectEvaluatedProperties(i,t,n,a);return o?0==r++&&o:e}),!1)},collectEvaluatedItems:(e,t,n,a)=>{let r=0;return e.reduce(((e,i)=>{if(r>1)return!1;const o=ll.collectEvaluatedItems(i,t,n,a);return o?0==r++&&o:e}),!1)}};const{Schema:ul,Instance:fl}=Dt;var dl={compile:e=>new RegExp(ul.value(e),"u"),interpret:(e,t)=>!fl.typeOf(t,"string")||e.test(fl.value(t))};const{Core:hl,Schema:yl,Instance:vl}=Dt,gl=(e,t,n,a)=>!vl.typeOf(t,"object")||e.every((([e,r])=>vl.entries(t).filter((([t])=>e.test(t))).every((([,e])=>hl.interpretSchema(r,e,n,a)))));var $l={compile:(e,t)=>Fe.pipeline([yl.entries,Fe.map((async([e,n])=>[new RegExp(e,"u"),await hl.compileSchema(n,t)])),Fe.all],e),interpret:gl,collectEvaluatedProperties:(e,t,n,a)=>gl(e,t,n,a)&&e.map((([e])=>e))};var bl={isObject:e=>"object"==typeof e&&!Array.isArray(e)&&null!==e,escapeRegExp:e=>e.replace(/[.*+\-?^${}()|[\]\\]/g,"\\$&")};const{Core:Ol,Schema:jl,Instance:Sl}=Dt,{escapeRegExp:Il}=bl,xl=(e,t,n,a)=>!Sl.typeOf(t,"object")||Sl.entries(t).filter((([t])=>t in e)).every((([t,r])=>Ol.interpretSchema(e[t],r,n,a)));var wl={compile:(e,t)=>Fe.pipeline([jl.entries,Fe.reduce((async(e,[n,a])=>(e[n]=await Ol.compileSchema(a,t),e)),Object.create(null))],e),interpret:xl,collectEvaluatedProperties:(e,t,n,a)=>xl(e,t,n,a)&&Object.keys(e).map((e=>new RegExp(`^${Il(e)}$`)))};const{Core:El,Instance:Pl}=Dt;var Al={compile:(e,t)=>El.compileSchema(e,t),interpret:(e,t,n,a)=>!Pl.typeOf(t,"object")||Pl.keys(t).every((t=>El.interpretSchema(e,Pl.cons(t),n,a)))};const{Core:Cl,Schema:Nl}=Dt;var kl={compile:async(e,t)=>{const n=await Nl.get(Nl.value(e),e);return Cl.compileSchema(n,t)},interpret:Cl.interpretSchema,collectEvaluatedProperties:Cl.collectEvaluatedProperties,collectEvaluatedItems:Cl.collectEvaluatedItems};const{Schema:Rl,Instance:Tl}=Dt;var Dl={compile:e=>Rl.value(e),interpret:(e,t)=>!Tl.typeOf(t,"object")||e.every((e=>Tl.value(t).hasOwnProperty(e)))};const{Core:ql,Schema:Ml,Instance:Vl}=Dt,Ll=(e,t,n,a)=>!Vl.typeOf(t,"array")||Vl.every(((t,r)=>!(r in e)||ql.interpretSchema(e[r],t,n,a)),t);var Jl={compile:(e,t)=>Fe.pipeline([Ml.map((e=>ql.compileSchema(e,t))),Fe.all],e),interpret:Ll,collectEvaluatedItems:(e,t,n,a)=>Ll(e,t,n,a)&&new Set(e.map(((e,t)=>t)))};const{Schema:Ul,Instance:_l}=Dt;var Fl={compile:e=>Ul.value(e),interpret:(e,t)=>"string"==typeof e?_l.typeOf(t,e):e.some(_l.typeOf(t))};const{Core:zl,Schema:Bl,Instance:Kl}=Dt,Gl=([e,t],n,a,r)=>{if(!Kl.typeOf(n,"array"))return!0;const i=zl.collectEvaluatedItems(e,n,a,r,!0);return!1===i||Kl.every(((e,o)=>i.has(o)||zl.interpretSchema(t,Kl.step(o,n),a,r)),n)};var Zl={compile:async(e,t,n)=>[Bl.uri(n),await zl.compileSchema(e,t)],interpret:Gl,collectEvaluatedItems:(e,t,n,a)=>Gl(e,t,n,a)&&new Set(Kl.map(((e,t)=>t),t))};const{Core:Hl,Schema:Wl,Instance:Xl}=Dt,Ql=([e,t],n,a,r)=>{if(!Xl.typeOf(n,"object"))return!0;const i=Hl.collectEvaluatedProperties(e,n,a,r,!0);return!i||Xl.entries(n).filter((([e])=>!i.some((t=>e.match(t))))).every((([,e])=>Hl.interpretSchema(t,e,a,r)))};var Yl={compile:async(e,t,n)=>[Wl.uri(n),await Hl.compileSchema(e,t)],interpret:Ql,collectEvaluatedProperties:(e,t,n,a)=>Ql(e,t,n,a)&&[new RegExp("")]};const{Schema:em,Instance:tm}=Dt;var nm={compile:e=>em.value(e),interpret:(e,t)=>{if(!tm.typeOf(t,"array")||!1===e)return!0;const n=tm.map((e=>mn(tm.value(e))),t);return new Set(n).size===n.length}};const{Keywords:am}=Dt;var rm={additionalItems:Lo,additionalItems6:zo,additionalProperties:Zo,additionalProperties6:Yo,allOf:ns,anyOf:is,const:cs,contains:ps,containsMinContainsMaxContains:ys,containsMinContainsMaxContainsFUTURE:Os,definitions:Is,dependencies:Ps,dependentRequired:Ns,dependentSchemas:Ds,dynamicRef:Js,dynamicRefFUTURE:Bs,enum:Zs,exclusiveMaximum:Xs,exclusiveMinimum:ec,if:nc,then:oc,else:mc,items:hc,items202012:bc,maxItems:Sc,maxLength:wc,maxLength6:Ac,maxProperties:kc,maximumExclusiveMaximum:Dc,maximum:Vc,metaData:am.metaData,minItems:Uc,minLength:zc,minLength6:Gc,minProperties:Wc,minimumExclusiveMinimum:Yc,minimum:nl,multipleOf:ol,not:cl,oneOf:pl,pattern:dl,patternProperties:$l,properties:wl,propertyNames:Al,ref:kl,required:Dl,tupleItems:Jl,type:Fl,unevaluatedItems:Zl,unevaluatedProperties:Yl,uniqueItems:nm,validate:am.validate};const{Core:im,Schema:om}=Dt,sm="https://json-schema.org/draft/future/schema";function cm(e){return{c:u,l:u,m:u,p:u,i:u,o:u,d:u}}function lm(e){let t,n;return t=new fo({props:{results:e[4]}}),{c(){x(t.$$.fragment)},l(e){w(t.$$.fragment,e)},m(e,a){E(t,e,a),n=!0},p(e,n){const a={};16&n&&(a.results=e[4]),t.$set(a)},i(e){n||(A(t.$$.fragment,e),n=!0)},o(e){C(t.$$.fragment,e),n=!1},d(e){N(t,e)}}}function mm(e){return{c:u,l:u,m:u,p:u,i:u,o:u,d:u}}function pm(e){let t,n,u,f,y,v,g,$,b,j,S,k,D,q,M,V,J,U,_,F,z;function B(t){e[9](t)}function K(t){e[10](t)}g=new no({props:{ns:"schemas",tabs:e[0],newTab:e[5],active:0}}),g.$on("input",e[7]);let G={ns:"instances",tabs:e[1],newTab:e[6]};void 0!==e[2]&&(G.selected=e[2]),void 0!==e[2]&&(G.active=e[2]),j=new no({props:G}),O.push((()=>I(j,"selected",B))),O.push((()=>I(j,"active",K))),j.$on("input",e[8]),M=new fo({props:{results:e[3]}});let Z={ctx:e,current:null,token:null,hasCatch:!1,pending:mm,then:lm,catch:cm,value:12,blocks:[,,,]};return R(U=e[3],Z),F=new Co({}),{c(){t=d(),n=a("main"),u=a("h1"),f=r("Hyperjump - JSON Schema Validator"),y=d(),v=a("div"),x(g.$$.fragment),$=d(),b=a("div"),x(j.$$.fragment),D=d(),q=a("div"),x(M.$$.fragment),V=d(),J=a("div"),Z.block.c(),_=d(),x(F.$$.fragment),this.h()},l(e){L('[data-svelte="svelte-14138tz"]',document.head).forEach(c),t=h(e),n=i(e,"MAIN",{class:!0});var a=o(n);u=i(a,"H1",{class:!0});var r=o(u);f=s(r,"Hyperjump - JSON Schema Validator"),r.forEach(c),y=h(a),v=i(a,"DIV",{class:!0});var l=o(v);w(g.$$.fragment,l),l.forEach(c),$=h(a),b=i(a,"DIV",{class:!0});var m=o(b);w(j.$$.fragment,m),m.forEach(c),D=h(a),q=i(a,"DIV",{class:!0});var p=o(q);w(M.$$.fragment,p),p.forEach(c),V=h(a),J=i(a,"DIV",{class:!0});var d=o(J);Z.block.l(d),d.forEach(c),_=h(a),w(F.$$.fragment,a),a.forEach(c),this.h()},h(){document.title="Hyperjump - JSON Schema Validator",l(u,"class","svelte-1fbysc"),l(v,"class","editor-section svelte-1fbysc"),l(b,"class","editor-section svelte-1fbysc"),l(q,"class","results "+fm+" svelte-1fbysc"),l(J,"class","results "+fm+" svelte-1fbysc"),l(n,"class","svelte-1fbysc")},m(e,a){m(e,t,a),m(e,n,a),p(n,u),p(u,f),p(n,y),p(n,v),E(g,v,null),p(n,$),p(n,b),E(j,b,null),p(n,D),p(n,q),E(M,q,null),p(n,V),p(n,J),Z.block.m(J,Z.anchor=null),Z.mount=()=>J,Z.anchor=null,p(n,_),E(F,n,null),z=!0},p(t,[n]){e=t;const a={};1&n&&(a.tabs=e[0]),g.$set(a);const r={};2&n&&(r.tabs=e[1]),!S&&4&n&&(S=!0,r.selected=e[2],P((()=>S=!1))),!k&&4&n&&(k=!0,r.active=e[2],P((()=>k=!1))),j.$set(r);const i={};8&n&&(i.results=e[3]),M.$set(i),Z.ctx=e,8&n&&U!==(U=e[3])&&R(U,Z)||T(Z,e,n)},i(e){z||(A(g.$$.fragment,e),A(j.$$.fragment,e),A(M.$$.fragment,e),A(Z.block),A(F.$$.fragment,e),z=!0)},o(e){C(g.$$.fragment,e),C(j.$$.fragment,e),C(M.$$.fragment,e);for(let e=0;e<3;e+=1){const t=Z.blocks[e];C(t)}C(F.$$.fragment,e),z=!1},d(e){e&&c(t),e&&c(n),N(g),N(j),N(M),Z.block.d(),Z.token=null,Z=null,N(F)}}}om.setConfig(sm,"baseToken","$id"),om.setConfig(sm,"embeddedToken","$id"),om.setConfig(sm,"anchorToken","$anchor"),om.setConfig(sm,"dynamicAnchorToken","$dynamicAnchor"),om.setConfig(sm,"vocabularyToken","$vocabulary"),om.setConfig(sm,"mandatoryVocabularies",["https://json-schema.org/draft/future/vocab/core"]),om.add(JSON.parse('{\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$id": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/core": true,\n        "https://json-schema.org/draft/future/vocab/applicator": true,\n        "https://json-schema.org/draft/future/vocab/unevaluated": true,\n        "https://json-schema.org/draft/future/vocab/validation": true,\n        "https://json-schema.org/draft/future/vocab/meta-data": true,\n        "https://json-schema.org/draft/future/vocab/format-annotation": true,\n        "https://json-schema.org/draft/future/vocab/content": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Core and Validation specifications meta-schema",\n    "allOf": [\n        {"$ref": "meta/core"},\n        {"$ref": "meta/applicator"},\n        {"$ref": "meta/validation"},\n        {"$ref": "meta/meta-data"},\n        {"$ref": "meta/format-annotation"},\n        {"$ref": "meta/content"}\n    ],\n    "type": ["object", "boolean"],\n    "properties": {\n        "definitions": {\n            "$comment": "While no longer an official keyword as it is replaced by $defs, this keyword is retained in the meta-schema to prevent incompatible extensions as it remains in common use.",\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        },\n        "dependencies": {\n            "$comment": "\\"dependencies\\" is no longer a keyword, but schema authors should avoid redefining it to facilitate a smooth transition to \\"dependentSchemas\\" and \\"dependentRequired\\"",\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$dynamicRef": "#meta" },\n                    { "$ref": "meta/validation#/$defs/stringArray" }\n                ]\n            }\n        }\n    }\n}')),om.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/core",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/core": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Core vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference",\n            "$comment": "Non-empty fragments not allowed.",\n            "pattern": "^[^#]*#?$"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$anchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z_][-A-Za-z0-9._]*$"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$dynamicRef": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$dynamicAnchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z_][-A-Za-z0-9._]*$"\n        },\n        "$vocabulary": {\n            "type": "object",\n            "propertyNames": {\n                "type": "string",\n                "format": "uri"\n            },\n            "additionalProperties": {\n                "type": "boolean"\n            }\n        },\n        "$comment": {\n            "type": "string"\n        },\n        "$defs": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        }\n    }\n}')),im.defineVocabulary("https://json-schema.org/draft/future/vocab/core",{validate:rm.validate,$defs:rm.definitions,$dynamicRef:rm.dynamicRefFUTURE,$ref:rm.ref}),om.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/applicator",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/applicator": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Applicator vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "prefixItems": { "$ref": "#/$defs/schemaArray" },\n        "items": { "$dynamicRef": "#meta" },\n        "contains": { "$dynamicRef": "#meta" },\n        "additionalProperties": { "$dynamicRef": "#meta" },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "propertyNames": { "format": "regex" },\n            "default": {}\n        },\n        "dependentSchemas": {\n            "type": "object",\n            "additionalProperties": {\n                "$dynamicRef": "#meta"\n            }\n        },\n        "propertyNames": { "$dynamicRef": "#meta" },\n        "if": { "$dynamicRef": "#meta" },\n        "then": { "$dynamicRef": "#meta" },\n        "else": { "$dynamicRef": "#meta" },\n        "allOf": { "$ref": "#/$defs/schemaArray" },\n        "anyOf": { "$ref": "#/$defs/schemaArray" },\n        "oneOf": { "$ref": "#/$defs/schemaArray" },\n        "not": { "$dynamicRef": "#meta" }\n    },\n    "$defs": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$dynamicRef": "#meta" }\n        }\n    }\n}')),im.defineVocabulary("https://json-schema.org/draft/future/vocab/applicator",{additionalProperties:rm.additionalProperties6,allOf:rm.allOf,anyOf:rm.anyOf,contains:rm.containsMinContainsMaxContainsFUTURE,dependentSchemas:rm.dependentSchemas,if:rm.if,then:rm.then,else:rm.else,items:rm.items202012,not:rm.not,oneOf:rm.oneOf,patternProperties:rm.patternProperties,prefixItems:rm.tupleItems,properties:rm.properties,propertyNames:rm.propertyNames}),om.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/validation",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/validation": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Validation vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minLength": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "maxItems": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minItems": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxContains": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minContains": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 1\n        },\n        "maxProperties": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/$defs/stringArray" },\n        "dependentRequired": {\n            "type": "object",\n            "additionalProperties": {\n                "$ref": "#/$defs/stringArray"\n            }\n        },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/$defs/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/$defs/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        }\n    },\n    "$defs": {\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 0\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    }\n}')),im.defineVocabulary("https://json-schema.org/draft/future/vocab/validation",{const:rm.const,dependentRequired:rm.dependentRequired,enum:rm.enum,exclusiveMaximum:rm.exclusiveMaximum,exclusiveMinimum:rm.exclusiveMinimum,maxItems:rm.maxItems,maxLength:rm.maxLength6,maxProperties:rm.maxProperties,maximum:rm.maximum,minItems:rm.minItems,minLength:rm.minLength6,minProperties:rm.minProperties,minimum:rm.minimum,multipleOf:rm.multipleOf,pattern:rm.pattern,required:rm.required,type:rm.type,uniqueItems:rm.uniqueItems}),om.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/meta-data",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/meta-data": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Meta-data vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": true,\n        "deprecated": {\n            "type": "boolean",\n            "default": false\n        },\n        "readOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "writeOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "examples": {\n            "type": "array",\n            "items": true\n        }\n    }\n}')),im.defineVocabulary("https://json-schema.org/draft/future/vocab/meta-data",{default:rm.metaData,deprecated:rm.metaData,description:rm.metaData,examples:rm.metaData,readOnly:rm.metaData,title:rm.metaData,writeOnly:rm.metaData}),om.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/format-annotation",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/format-annotation": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Format vocabulary meta-schema for annotation results",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),im.defineVocabulary("https://json-schema.org/draft/future/vocab/format-annotation",{format:rm.metaData}),om.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/format-assertion",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/format-assertion": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Format vocabulary meta-schema for assertion results",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),om.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/content",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/content": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Content vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "contentMediaType": { "type": "string" },\n        "contentEncoding": { "type": "string" },\n        "contentSchema": { "$dynamicRef": "#meta" }\n    }\n}')),im.defineVocabulary("https://json-schema.org/draft/future/vocab/content",{contentEncoding:rm.metaData,contentMediaType:rm.metaData,contentSchema:rm.metaData}),om.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/unevaluated",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/unevaluated": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Unevaluated applicator vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "unevaluatedItems": { "$dynamicRef": "#meta" },\n        "unevaluatedProperties": { "$dynamicRef": "#meta" }\n    }\n}')),im.defineVocabulary("https://json-schema.org/draft/future/vocab/unevaluated",{unevaluatedItems:rm.unevaluatedItems,unevaluatedProperties:rm.unevaluatedProperties});const um="https://json-schema.hyperjump.io/schema",fm="solarized-dark";function dm(e,t,n){let a,r;const i=function(){let e=1;return(t,n,a=!1)=>{const r=n||`${um}${++e}`;return{label:t||`Schema ${e}`,text:`{\n  "$id": "${r}",\n  "$schema": "https://json-schema.org/draft/2020-12/schema"\n}`,persistent:a}}}(),o=function(){let e=1;return()=>({label:"Instance "+e++,text:""})}();let s=[i("Schema",um,!0)],c=[o("Instance")],l=0;const m=function(e,t){let n;return({detail:a})=>{clearTimeout(n),n=setTimeout((()=>e(a)),t)}},p=m((e=>n(0,s=e)),750),u=m((e=>n(1,c=e)),750);return Ni.setMetaOutputFormat(Ni.BASIC),e.$$.update=()=>{1&e.$$.dirty&&n(3,a=async function(){s.forEach(((e,t)=>{const n=0===t?um:"";Ni.add(JSON.parse(e.text||"true"),n,"https://json-schema.org/draft/2020-12/schema")}));const e=await Ni.get(um);return Ni.validate(e)}()),14&e.$$.dirty&&n(4,r=async function(){if(""!==c[l].text){let e;try{e=await a}catch(e){}if(e){const t=e(JSON.parse(c[l].text),Ni.BASIC);if(t.valid)return t;throw{output:t}}}}())},[s,c,l,a,r,i,o,p,u,function(e){l=e,n(2,l)},function(e){l=e,n(2,l)}]}export default class extends e{constructor(e){super(),t(this,e,dm,pm,n,{})}}
