import{S as e,i as t,s as n,e as a,t as r,c as i,a as o,b as s,d as c,f as l,g as m,h as p,n as u,j as f,k as d,l as h,m as y,o as v,p as g,r as $,q as b,u as j,v as O,w as I,x as S,y as x,z as w,A as E,B as P,C as A,D as k,E as N,F as C,G as R,H as T,I as D,J as q,K as M,L as V,M as L}from"./client.859e773b.js";var J=function(e,t){return function n(){null==t&&(t=e.length);var a=[].slice.call(arguments);return a.length>=t?e.apply(this,a):function(){return n.apply(this,a.concat([].slice.call(arguments)))}}};var z="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function _(e,t,n){return e(n={path:t,exports:{},require:function(e,t){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==t&&n.path)}},n.exports),n.exports}var U=_((function(e,t){var n;n={},("object"==typeof window&&window||z).PubSub=n,function(e){var t={},n=-1,a="*";function r(e){var t;for(t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!0;return!1}function i(e){return function(){throw e}}function o(e,t,n){try{e(t,n)}catch(e){setTimeout(i(e),0)}}function s(e,t,n){e(t,n)}function c(e,n,a,r){var i,c=t[n],l=r?s:o;if(Object.prototype.hasOwnProperty.call(t,n))for(i in c)Object.prototype.hasOwnProperty.call(c,i)&&l(c[i],e,a)}function l(e,t,n){return function(){var r=String(e),i=r.lastIndexOf(".");for(c(e,e,t,n);-1!==i;)i=(r=r.substr(0,i)).lastIndexOf("."),c(e,r,t,n);c(e,a,t,n)}}function m(e){var n=String(e);return Boolean(Object.prototype.hasOwnProperty.call(t,n)&&r(t[n]))}function p(e){for(var t=String(e),n=m(t)||m(a),r=t.lastIndexOf(".");!n&&-1!==r;)r=(t=t.substr(0,r)).lastIndexOf("."),n=m(t);return n}function u(e,t,n,a){var r=l(e="symbol"==typeof e?e.toString():e,t,a);return!!p(e)&&(!0===n?r():setTimeout(r,0),!0)}e.publish=function(t,n){return u(t,n,!1,e.immediateExceptions)},e.publishSync=function(t,n){return u(t,n,!0,e.immediateExceptions)},e.subscribe=function(e,a){if("function"!=typeof a)return!1;e="symbol"==typeof e?e.toString():e,Object.prototype.hasOwnProperty.call(t,e)||(t[e]={});var r="uid_"+String(++n);return t[e][r]=a,r},e.subscribeAll=function(t){return e.subscribe(a,t)},e.subscribeOnce=function(t,n){var a=e.subscribe(t,(function(){e.unsubscribe(a),n.apply(this,arguments)}));return e},e.clearAllSubscriptions=function(){t={}},e.clearSubscriptions=function(e){var n;for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&0===n.indexOf(e)&&delete t[n]},e.countSubscriptions=function(e){var n,a,r=0;for(n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&0===n.indexOf(e)){for(a in t[n])r++;break}return r},e.getSubscriptions=function(e){var n,a=[];for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&0===n.indexOf(e)&&a.push(n);return a},e.unsubscribe=function(n){var a,r,i,o=function(e){var n;for(n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&0===n.indexOf(e))return!0;return!1},s="string"==typeof n&&(Object.prototype.hasOwnProperty.call(t,n)||o(n)),c=!s&&"string"==typeof n,l="function"==typeof n,m=!1;if(!s){for(a in t)if(Object.prototype.hasOwnProperty.call(t,a)){if(r=t[a],c&&r[n]){delete r[n],m=n;break}if(l)for(i in r)Object.prototype.hasOwnProperty.call(r,i)&&r[i]===n&&(delete r[i],m=!0)}return m}e.clearSubscriptions(n)}}(n),void 0!==e&&e.exports&&(t=e.exports=n),t.PubSub=n,e.exports=t=n}));U.PubSub;var F=function(e,t){if(e=e.trim(),(t=t.trim()).startsWith("about:"))return t;const n=function(e){const t={host:"",path:"",query:"",protocol:""};let n=e,a=e.indexOf("//");t.protocol=n.substring(0,a),a+=2;const r=e.indexOf("/",a),i=e.indexOf("?"),o=e.indexOf("#");-1!==o&&(n=n.substring(0,o));if(-1!==i){const e=n.substring(i);t.query=e,n=n.substring(0,i)}if(-1!==r){const e=n.substring(0,r);t.host=e,n=n.substring(r),t.path=n}else t.host=n;return t}(e),a=function(e){const t={href:e,hash:"",query:"",netPath:!1,absolutePath:!1,relativePath:!1};if(G.test(e))return t.netPath=!0,t;"/"===e[0]?t.absolutePath=!0:""!==e&&(t.relativePath=!0);let n=e;const a=e.indexOf("?"),r=e.indexOf("#");if(-1!==r){const e=n.substring(r);t.hash=e,n=n.substring(0,r)}if(-1!==a){const e=n.substring(a);t.query=e,n=n.substring(0,a)}return t.path=n,t}(t);if(!n.protocol&&!a.netPath)throw new Error("Error, protocol is not specified");if(a.netPath)return a.href.startsWith("//")&&(a.href=n.protocol+a.href),function(e){const t=e.indexOf("//")+2,n=!e.includes("/",t),a=!e.includes("?",t),r=!e.includes("#",t);return n&&a&&r}(a.href)?B(a.href):a.href;if(a.absolutePath){const{path:e,query:t,hash:r}=a;return n.host+K(e)+t+r}if(a.relativePath){const{path:e,query:t,hash:r}=a;let i,o=n.path,s=n.host;return 0===e.length?i=o:(o=o.substring(0,o.lastIndexOf("/")),i=K(o+"/"+e)),s+=""!==i||t||r?i+t+r:"/",s}{const{host:e,path:t,query:r}=n;return t||r?e+t+r+a.hash:B(e)}};function B(e){return e+("/"===e[e.length-1]?"":"/")}function K(e){let t=e.split("/");""===t[0]&&(t=t.slice(1));let n=[];return t.forEach(((e,a)=>{"."!==e&&(".."===e?n.pop():""===e&&a!==t.length-1||n.push(e))})),"/"+n.join("/")}const G=new RegExp("^([a-z][a-z0-9+.-]*:)?//","i");const Z={null:e=>null===e,boolean:e=>"boolean"==typeof e,object:e=>"object"==typeof e&&!Array.isArray(e)&&null!==e,array:e=>Array.isArray(e),number:e=>"number"==typeof e,integer:e=>Number.isInteger(e),string:e=>"string"==typeof e},H=e=>{const t=e.indexOf("#"),n=-1===t?e.length:t,a=e.slice(0,n),r=e.slice(n+1);return[decodeURI(a),decodeURI(r)]},W=e=>{const t=e.match(/^(.+):\/\//);return t?t[1]:""};var X={jsonTypeOf:(e,t)=>Z[t](e),splitUrl:H,safeResolveUrl:(e,t)=>{const n=F(e,t),a=H(e)[0];if(a&&"file"===W(n)&&"file"!==W(a))throw Error(`Can't access file '${n}' resource from network context '${e}'`);return n}};const Q=e=>{if(e.length>0&&"/"!==e[0])throw Error("Invalid JSON Pointer");return e.split("/").slice(1).map(ie)},Y=(e,t,n,a)=>{if(0===e.length)return n;if(e.length>1){const r=e.shift();return{...t,[r]:Y(e,se(t,r,a),n,ae(r,a))}}if(Array.isArray(t)){const a=[...t];return a[oe(t,e[0])]=n,a}return"object"==typeof t&&null!==t?{...t,[e[0]]:n}:se(t,e[0],a)},ee=(e,t,n,a)=>{if(0!==e.length)if(1!==e.length||ce(t)){const r=e.shift();ee(e,se(t,r,a),n,ae(r,a))}else{t[oe(t,e[0])]=n}},te=(e,t,n)=>{if(0!=e.length){if(e.length>1){const a=e.shift(),r=se(t,a,n);return{...t,[a]:te(e,r,ae(a,n))}}if(Array.isArray(t))return t.filter(((t,n)=>n!=e[0]));if("object"==typeof t&&null!==t){const{[e[0]]:n,...a}=t;return a}return se(t,e[0],n)}},ne=(e,t,n)=>{if(0!==e.length)if(e.length>1){const a=e.shift(),r=se(t,a,n);ne(e,r,ae(a,n))}else Array.isArray(t)?t.splice(e[0],1):"object"==typeof t&&null!==t?delete t[e[0]]:se(t,e[0],n)},ae=J(((e,t)=>t+"/"+re(e))),re=e=>e.toString().replace(/~/g,"~0").replace(/\//g,"~1"),ie=e=>e.toString().replace(/~1/g,"/").replace(/~0/g,"~"),oe=(e,t)=>Array.isArray(e)&&"-"===t?e.length:t,se=(e,t,n="")=>{if(void 0===e)throw TypeError(`Value at '${n}' is undefined and does not have property '${t}'`);if(null===e)throw TypeError(`Value at '${n}' is null and does not have property '${t}'`);if(ce(e))throw TypeError(`Value at '${n}' is a ${typeof e} and does not have property '${t}'`);return e[oe(e,t)]},ce=e=>null===e||"object"!=typeof e;var le={nil:"",append:ae,get:(e,t)=>{const n=Q(e),a=e=>n.reduce((([e,t],n)=>[se(e,n,t),ae(n,t)]),[e,""])[0];return void 0===t?a:a(t)},set:(e,t,n)=>{const a=Q(e),r=J(((e,t)=>Y(a,e,t,"")));return void 0===t?r:r(t,n)},assign:(e,t,n)=>{const a=Q(e),r=J(((e,t)=>ee(a,e,t,"")));return void 0===t?r:r(t,n)},unset:(e,t)=>{const n=Q(e),a=e=>te(n,e,"");return void 0===t?a:a(t)},delete:(e,t)=>{const n=Q(e),a=e=>ne(n,e,"");return void 0===t?a:a(t)}};le.nil,le.append,le.get,le.set,le.assign,le.unset;const me=Symbol("$__value"),pe=Symbol("$__href");var ue=(e,t)=>Object.freeze({[pe]:e,[me]:t}),fe=e=>e&&void 0!==e[pe],de=e=>e[pe],he=e=>e[me];const{jsonTypeOf:ye}=X,ve=Object.freeze({id:"",pointer:"",instance:void 0,value:void 0}),ge=e=>fe(e.value)?he(e.value):e.value,$e=J(((e,t)=>ye(ge(e),t))),be=(e,t)=>Object.freeze({...t,pointer:le.append(e,t.pointer),value:ge(t)[e]}),je=J(((e,t)=>ge(t).map(((n,a,r,i)=>e(be(a,t),a,r,i))))),Oe=J(((e,t)=>ge(t).map(((e,n,a,r)=>be(n,t))).filter(((t,n,a,r)=>e(t,n,a,r))))),Ie=J(((e,t,n)=>ge(n).reduce(((t,a,r)=>e(t,be(r,n),r)),t))),Se=J(((e,t)=>ge(t).every(((n,a,r,i)=>e(be(a,t),a,r,i))))),xe=J(((e,t)=>ge(t).some(((n,a,r,i)=>e(be(a,t),a,r,i)))));var we={cons:(e,t="")=>Object.freeze({...ve,id:t,instance:e,value:e}),uri:e=>`${e.id}#${encodeURI(e.pointer)}`,value:ge,has:(e,t)=>e in ge(t),typeOf:$e,step:be,entries:e=>Object.keys(ge(e)).map((t=>[t,be(t,e)])),keys:e=>Object.keys(ge(e)),map:je,filter:Oe,reduce:Ie,every:Se,some:xe,length:e=>ge(e).length},Ee=/; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g,Pe=/^[\u000b\u0020-\u007e\u0080-\u00ff]+$/,Ae=/^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/,ke=/\\([\u000b\u0020-\u00ff])/g,Ne=/([\\"])/g,Ce=/^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;function Re(e){var t=String(e);if(Ae.test(t))return t;if(t.length>0&&!Pe.test(t))throw new TypeError("invalid parameter value");return'"'+t.replace(Ne,"\\$1")+'"'}function Te(e){this.parameters=Object.create(null),this.type=e}var De={format:function(e){if(!e||"object"!=typeof e)throw new TypeError("argument obj is required");var t=e.parameters,n=e.type;if(!n||!Ce.test(n))throw new TypeError("invalid type");var a=n;if(t&&"object"==typeof t)for(var r,i=Object.keys(t).sort(),o=0;o<i.length;o++){if(r=i[o],!Ae.test(r))throw new TypeError("invalid parameter name");a+="; "+r+"="+Re(t[r])}return a},parse:function(e){if(!e)throw new TypeError("argument string is required");var t="object"==typeof e?function(e){var t;"function"==typeof e.getHeader?t=e.getHeader("content-type"):"object"==typeof e.headers&&(t=e.headers&&e.headers["content-type"]);if("string"!=typeof t)throw new TypeError("content-type header is missing from object");return t}(e):e;if("string"!=typeof t)throw new TypeError("argument string is required to be a string");var n=t.indexOf(";"),a=-1!==n?t.substr(0,n).trim():t.trim();if(!Ce.test(a))throw new TypeError("invalid media type");var r=new Te(a.toLowerCase());if(-1!==n){var i,o,s;for(Ee.lastIndex=n;o=Ee.exec(t);){if(o.index!==n)throw new TypeError("invalid parameter format");n+=o[0].length,i=o[1].toLowerCase(),'"'===(s=o[2])[0]&&(s=s.substr(1,s.length-2).replace(ke,"$1")),r.parameters[i]=s}if(n!==t.length)throw new TypeError("invalid parameter format")}return r}},qe=async e=>Object.entries(await e),Me=J((async(e,t)=>(await t).map(e))),Ve=J((async(e,t,n)=>(await n).reduce((async(t,n)=>e(await t,n)),t))),Le=J((async(e,t,n={})=>Ve((async(t,n)=>await e(n)?t.concat([n]):t),[],t,n))),Je=J((async(e,t)=>{const n=await Me(e,t);return(await Promise.all(n)).some((e=>e))})),ze=J((async(e,t)=>{const n=await Me(e,t);return(await Promise.all(n)).every((e=>e))})),_e=J(((e,t)=>e.reduce((async(e,t)=>t(await e)),t))),Ue={entries:qe,map:Me,filter:Le,reduce:Ve,some:Je,every:ze,pipeline:_e,all:e=>Promise.all(e),allValues:e=>_e([qe,Ve((async(e,[t,n])=>(e[t]=await n,e)),{})],e)};Ue.entries,Ue.map,Ue.filter,Ue.reduce,Ue.some,Ue.every,Ue.pipeline,Ue.all,Ue.allValues;var Fe=fetch;const{jsonTypeOf:Be,splitUrl:Ke,safeResolveUrl:Ge}=X,Ze={},He={},We=(e,t)=>{const n=e in He?He[e]:e;if(n in Ze)return Ze[n][t]},Xe={},Qe={},Ye=(e,t="",n="")=>{e=JSON.parse(JSON.stringify(e));const a=Ke(e.$schema||n)[0];if(!a)throw Error("Couldn't determine schema version");delete e.$schema;const r=We(a,"baseToken"),i=We(a,"anchorToken"),o=Ke(t)[0];if(!o&&!Ke(e[r]||"")[0])throw Error("Couldn't determine an identifier for the schema");const s=Ge(o,e[r]||""),[c,l]=Ke(s);delete e[r],l&&r===i&&(e[i]=i!==r?encodeURI(l):`#${encodeURI(l)}`),o&&(Qe[o]=c);const m={},p=We(a,"recursiveAnchorToken");let u;!0===e[p]&&(m[""]=c,e[i]="",delete e[p]);const f=We(a,"vocabularyToken");Be(e[f],"object")?(He[c]=a,u=e[f],delete e[f]):(He[c]=a,u={[a]:!0});const d={"":""};return Xe[c]={id:c,schemaVersion:a,schema:et(e,c,a,le.nil,d,m),anchors:d,dynamicAnchors:m,vocabulary:u,validated:!1},Xe[c]},et=(e,t,n,a,r,i)=>{if(Be(e,"object")){const o="string"==typeof e.$schema?Ke(e.$schema)[0]:n,s=We(o,"embeddedToken"),c=We(o,"anchorToken");if("string"==typeof e[s]&&(s!==c||"#"!==e[s][0])){const a=Ge(t,e[s]);return e[s]=a,Ye(e,a,n),ue(e[s],e)}const l=We(n,"anchorToken"),m=We(n,"dynamicAnchorToken");"string"==typeof e[m]&&(i[e[m]]=t,r[e[m]]=a,delete e[m]);const p=We(n,"embeddedToken");if("string"==typeof e[l]){const t=l!==p?e[l]:e[l].slice(1);r[t]=a,delete e[l]}const u=We(n,"jrefToken");if("string"==typeof e[u])return ue(e[u],e);for(let o in e)e[o]=et(e[o],t,n,le.append(o,a),r,i);return e}return Array.isArray(e)?e.map(((e,o)=>et(e,t,n,le.append(o,a),r,i))):e},tt=e=>Xe[Qe[e]]||Xe[e],nt=Object.freeze({id:"",schemaVersion:void 0,vocabulary:{},pointer:le.nil,schema:void 0,value:void 0,anchors:{},dynamicAnchors:{},validated:!0}),at=async(e,t=nt)=>{const n=Ge(ot(t),e),[a,r]=Ke(n);if(!(e=>e in Xe||e in Qe)(a)){const e=await Fe(a,{headers:{Accept:"application/schema+json"}});if(e.status>=400)throw await e.text(),Error(`Failed to retrieve schema with id: ${a}`);if(e.headers.has("content-type")){const t=De.parse(e.headers.get("content-type")).type;if("application/schema+json"!==t)throw Error(`${a} is not a schema. Found a document with media type: ${t}`)}Ye(await e.json(),a)}const i=tt(a),o="/"!==r[0]?it(i,r):r,s=Object.freeze({...i,pointer:o,value:le.get(o,i.schema)});return rt(s)},rt=e=>fe(e.value)?at(de(e.value),e):e,it=(e,t)=>{if(!(t in e.anchors))throw Error(`No such anchor '${encodeURI(e.id)}#${encodeURI(t)}'`);return e.anchors[t]},ot=e=>`${e.id}#${encodeURI(e.pointer)}`,st=e=>fe(e.value)?he(e.value):e.value,ct=(e,t)=>{const n=tt(t.id),a=Object.freeze({...t,pointer:le.append(e,t.pointer),value:st(t)[e],validated:n.validated});return rt(a)},lt=J(((e,t)=>Ue.pipeline([st,Ue.map((async(n,a)=>e(await ct(a,t),a))),Ue.all],t)));var mt={setConfig:(e,t,n)=>{Ze[e]||(Ze[e]={}),Ze[e][t]=n},getConfig:We,add:Ye,get:at,markValidated:e=>{Xe[e].validated=!0},uri:ot,value:st,getAnchorPointer:it,typeOf:(e,t)=>Be(st(e),t),has:(e,t)=>e in st(t),step:ct,keys:e=>Object.keys(st(e)),entries:e=>Ue.pipeline([st,Object.keys,Ue.map((async t=>[t,await ct(t,e)])),Ue.all],e),map:lt,length:e=>st(e).length};mt.setConfig,mt.getConfig,mt.add,mt.get,mt.markValidated,mt.uri,mt.value,mt.getAnchorPointer,mt.typeOf,mt.has,mt.step,mt.keys,mt.entries,mt.map,mt.length;class pt extends Error{constructor(e){super("Invalid Schema"),this.name=this.constructor.name,this.output=e}}var ut=pt;const{splitUrl:ft}=X,dt="FLAG",ht="BASIC",yt="DETAILED",vt="VERBOSE";let gt=yt,$t=!0;const bt=async e=>{const t={metaData:{}};return{ast:t,schemaUri:await Pt(e,t)}},jt=J((({ast:e,schemaUri:t},n,a=dt)=>{if(![dt,ht,yt,vt].includes(a))throw Error(`The '${a}' error format is not supported`);let r=[];const i=U.subscribe("result",Ot(a,r));return At(t,n,e,{}),U.unsubscribe(i),r[0]})),Ot=(e,t)=>{const n=[];return(a,r)=>{if("result"===a){const{keyword:e,absoluteKeywordLocation:t,instanceLocation:a,valid:i}=r,o={keyword:e,absoluteKeywordLocation:t,instanceLocation:a,valid:i,errors:[]};n.push(o)}else if("result.start"===a)n.push(a);else if("result.end"===a){const a=n.pop();for(;"result.start"!==n[n.length-1];){const t=n.pop(),r=[t];e===ht&&(r.push(...t.errors),delete t.errors),(e===vt||e!==dt&&!t.valid)&&a.errors.unshift(...r)}n[n.length-1]=a,t[0]=a}}},It={},St=e=>It[e],xt=e=>e in It,wt={},Et={},Pt=async(e,t)=>{if(!xt(`${e.schemaVersion}#validate`)){const t=await mt.get(e.schemaVersion);(mt.getConfig(t.id,"mandatoryVocabularies")||[]).forEach((e=>{if(!t.vocabulary[e])throw Error(`Vocabulary '${e}' must be explicitly declared and required`)})),Object.entries(t.vocabulary).forEach((([e,n])=>{if(e in wt)Object.entries(wt[e]).forEach((([e,n])=>{((e,t)=>{It[e]={collectEvaluatedItems:(e,n,a)=>t.interpret(e,n,a)&&new Set,collectEvaluatedProperties:(e,n,a)=>t.interpret(e,n,a)&&[],...t}})(`${t.id}#${e}`,n)}));else if(n)throw Error(`Missing required vocabulary: ${e}`)}))}if($t&&!e.validated){if(mt.markValidated(e.id),!(e.schemaVersion in Et)){const t=await mt.get(e.schemaVersion),n={metaData:{}},a=await Pt(t,n);Et[t.id]=jt({ast:n,schemaUri:a})}const t=we.cons(e.schema,e.id),n=Et[e.schemaVersion](t,gt);if(!n.valid)throw new ut(n)}return e.id in t.metaData||(t.metaData[e.id]={id:e.id,dynamicAnchors:e.dynamicAnchors,anchors:e.anchors}),await St(`${e.schemaVersion}#validate`).compile(e,t),mt.uri(e)},At=(e,t,n,a)=>{const r=kt(e,n),i=ft(e)[0];return St(r).interpret(e,t,n,{...n.metaData[i].dynamicAnchors,...a})},kt=(e,t)=>{if(!(e in t))throw Error(`No schema found at ${e}`);return t[e][0]};var Nt={validate:async(e,t,n)=>{const a=await bt(e),r=(e,t=dt)=>jt(a,we.cons(e),t);return void 0===t?r:r(t,n)},compile:bt,interpret:jt,setMetaOutputFormat:e=>{gt=e},setShouldMetaValidate:e=>{$t=e},FLAG:dt,BASIC:ht,DETAILED:yt,VERBOSE:vt,add:(e,t="",n="")=>{const{id:a}=mt.add(e,t,n);delete Et[a]},getKeyword:St,hasKeyword:xt,defineVocabulary:(e,t)=>{wt[e]=t},compileSchema:Pt,interpretSchema:At,collectEvaluatedProperties:(e,t,n,a,r)=>{const i=kt(e,n);return St(i).collectEvaluatedProperties(e,t,n,a,r)},collectEvaluatedItems:(e,t,n,a,r)=>{const i=kt(e,n);return St(i).collectEvaluatedItems(e,t,n,a,r)}};var Ct={compile:e=>mt.value(e),interpret:()=>!0};var Rt={compile:async(e,t)=>{const n=mt.uri(e);if(!(n in t)){t[n]=!1;const a=mt.value(e);if(!["object","boolean"].includes(typeof a))throw Error(`No schema found at '${mt.uri(e)}'`);t[n]=[`${e.schemaVersion}#validate`,mt.uri(e),"boolean"==typeof a?a:await Ue.pipeline([mt.entries,Ue.map((([t,n])=>[`${e.schemaVersion}#${t}`,n])),Ue.filter((([t])=>Nt.hasKeyword(t)&&t!==`${e.schemaVersion}#validate`)),Ue.map((async([n,a])=>{const r=await Nt.getKeyword(n).compile(a,t,e);return[n,mt.uri(a),r]})),Ue.all],e)]}return n},interpret:(e,t,n,a)=>{const[r,i,o]=n[e];U.publishSync("result.start");const s="boolean"==typeof o?o:o.every((([e,r,i])=>{U.publishSync("result.start");const o=Nt.getKeyword(e).interpret(i,t,n,a);return U.publishSync("result",{keyword:e,absoluteKeywordLocation:r,instanceLocation:we.uri(t),valid:o,ast:i}),U.publishSync("result.end"),o}));return U.publishSync("result",{keyword:r,absoluteKeywordLocation:i,instanceLocation:we.uri(t),valid:s,ast:e}),U.publishSync("result.end"),s},collectEvaluatedProperties:(e,t,n,a,r=!1)=>{const i=n[e][2];return"boolean"==typeof i?!!i&&[]:i.filter((([e])=>!r||!e.endsWith("#unevaluatedProperties"))).reduce(((e,[r,,i])=>{const o=e&&Nt.getKeyword(r).collectEvaluatedProperties(i,t,n,a);return!1!==o&&[...e,...o]}),[])},collectEvaluatedItems:(e,t,n,a,r=!1)=>{const i=n[e][2];return"boolean"==typeof i?!!i&&new Set:i.filter((([e])=>!r||!e.endsWith("#unevaluatedItems"))).reduce(((e,[r,,i])=>{const o=!1!==e&&Nt.getKeyword(r).collectEvaluatedItems(i,t,n,a);return!1!==o&&new Set([...e,...o])}),new Set)}},Tt={metaData:Ct,validate:Rt},Dt={Core:Nt,Schema:mt,Instance:we,Keywords:Tt};const{Core:qt,Schema:Mt,Instance:Vt}=Dt;var Lt={compile:async(e,t,n)=>{const a=await Mt.step("items",n),r=Mt.typeOf(a,"array")?Mt.length(a):Number.MAX_SAFE_INTEGER;return Mt.typeOf(e,"boolean")?[r,Mt.value(e)]:[r,await qt.compileSchema(e,t)]},interpret:([e,t],n,a,r)=>!Vt.typeOf(n,"array")||("string"==typeof t?Vt.every(((n,i)=>i<e||qt.interpretSchema(t,n,a,r)),n):Vt.every(((n,a)=>a<e||t),n))};const{Core:Jt,Schema:zt,Instance:_t}=Dt,Ut=([e,t],n,a,r)=>!_t.typeOf(n,"array")||_t.every(((n,i)=>i<e||Jt.interpretSchema(t,n,a,r)),n);var Ft={compile:async(e,t,n)=>{const a=await zt.step("items",n);return[zt.typeOf(a,"array")?zt.length(a):Number.MAX_SAFE_INTEGER,await Jt.compileSchema(e,t)]},interpret:Ut,collectEvaluatedItems:(e,t,n,a)=>Ut(e,t,n,a)&&new Set(_t.map(((e,t)=>t),t))};const{Core:Bt,Schema:Kt,Instance:Gt}=Dt;var Zt={compile:async(e,t,n)=>{const a=await Kt.step("properties",n),r=Kt.typeOf(a,"object")?Kt.keys(a):[],i=await Kt.step("patternProperties",n),o=Kt.typeOf(i,"object")?Kt.keys(i).map((e=>new RegExp(e))):[];return Kt.typeOf(e,"boolean")?[r,o,Kt.value(e)]:[r,o,await Bt.compileSchema(e,t)]},interpret:([e,t,n],a,r,i)=>{if(!Gt.typeOf(a,"object"))return!0;const o=Gt.entries(a).filter((([n])=>!e.includes(n)&&!t.some((e=>e.test(n)))));return"string"==typeof n?o.every((([,e])=>Bt.interpretSchema(n,e,r,i))):0===o.length||n}};const{Core:Ht,Schema:Wt,Instance:Xt}=Dt,Qt=([e,t,n],a,r,i)=>!Xt.typeOf(a,"object")||Xt.entries(a).filter((([n])=>!e.includes(n)&&!t.some((e=>e.test(n))))).every((([,e])=>Ht.interpretSchema(n,e,r,i)));var Yt={compile:async(e,t,n)=>{const a=await Wt.step("properties",n),r=Wt.typeOf(a,"object")?Wt.keys(a):[],i=await Wt.step("patternProperties",n);return[r,Wt.typeOf(i,"object")?Wt.keys(i).map((e=>new RegExp(e))):[],await Ht.compileSchema(e,t)]},interpret:Qt,collectEvaluatedProperties:(e,t,n,a)=>Qt(e,t,n,a)&&[new RegExp("")]};const{Core:en,Schema:tn}=Dt;var nn={compile:(e,t)=>Ue.pipeline([tn.map((async e=>en.compileSchema(await e,t))),Ue.all],e),interpret:(e,t,n,a)=>e.every((e=>en.interpretSchema(e,t,n,a))),collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,r)=>{const i=e&&en.collectEvaluatedProperties(r,t,n,a);return!1!==i&&[...e,...i]}),[]),collectEvaluatedItems:(e,t,n,a)=>e.reduce(((e,r)=>{const i=!1!==e&&en.collectEvaluatedItems(r,t,n,a);return!1!==i&&new Set([...e,...i])}),new Set)};const{Core:an,Schema:rn}=Dt;var on={compile:(e,t)=>Ue.pipeline([rn.map((async e=>an.compileSchema(await e,t))),Ue.all],e),interpret:(e,t,n,a)=>e.filter((e=>an.interpretSchema(e,t,n,a))).length>0,collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,r)=>{const i=an.collectEvaluatedProperties(r,t,n,a);return!1!==i?[...e||[],...i]:e}),!1),collectEvaluatedItems:(e,t,n,a)=>e.reduce(((e,r)=>{const i=an.collectEvaluatedItems(r,t,n,a);return!1!==i?new Set([...e||[],...i]):e}),!1)},sn=Object.keys,cn=JSON.stringify;function ln(e,t){var n,a,r,i,o,s,c;if("string"===(c=typeof e))return cn(e);if(!0===e)return"true";if(!1===e)return"false";if(null===e)return"null";if(e instanceof Array){for(r="[",a=e.length-1,n=0;n<a;n++)r+=ln(e[n],!1)+",";return a>-1&&(r+=ln(e[n],!1)),r+"]"}if(e instanceof Object){if("function"==typeof e.toJSON)return ln(e.toJSON(),t);for(a=(i=sn(e).sort()).length,r="",n=0;n<a;)void 0!==(s=ln(e[o=i[n]],!0))&&(n&&""!==r&&(r+=","),r+=cn(o)+":"+s),n++;return"{"+r+"}"}switch(c){case"function":case"undefined":return t?void 0:null;default:return isFinite(e)?e:null}}var mn=function(e){return""+ln(e,!1)};const{Schema:pn,Instance:un}=Dt;var fn={compile:e=>mn(pn.value(e)),interpret:(e,t)=>mn(un.value(t))===e};const{Core:dn,Instance:hn}=Dt;var yn={compile:(e,t)=>dn.compileSchema(e,t),interpret:(e,t,n,a)=>!hn.typeOf(t,"array")||hn.some((t=>dn.interpretSchema(e,t,n,a)),t)};const{Core:vn,Schema:gn,Instance:$n}=Dt,bn=({contains:e,minContains:t,maxContains:n},a,r,i)=>{if(!$n.typeOf(a,"array"))return!0;const o=$n.reduce(((t,n)=>vn.interpretSchema(e,n,r,i)?t+1:t),0,a);return o>=t&&o<=n};var jn={compile:async(e,t,n)=>{const a=await vn.compileSchema(e,t),r=await gn.step("minContains",n),i=gn.typeOf(r,"number")?gn.value(r):1,o=await gn.step("maxContains",n);return{contains:a,minContains:i,maxContains:gn.typeOf(o,"number")?gn.value(o):Number.MAX_SAFE_INTEGER}},interpret:bn,collectEvaluatedItems:(e,t,n,a)=>bn(e,t,n,a)&&$n.reduce(((t,r,i)=>vn.interpretSchema(e.contains,r,n,a)?t.add(i):t),new Set,t)};const{Core:On,Schema:In}=Dt;var Sn={compile:async(e,t)=>{await Ue.pipeline([In.entries,Ue.map((([,e])=>On.compileSchema(e,t))),Ue.all],e)},interpret:()=>!0};const{Core:xn,Schema:wn,Instance:En}=Dt;var Pn={compile:(e,t)=>Ue.pipeline([wn.entries,Ue.map((async([e,n])=>[e,wn.typeOf(n,"array")?wn.value(n):await xn.compileSchema(n,t)])),Ue.all],e),interpret:(e,t,n,a)=>{const r=En.value(t);return!En.typeOf(t,"object")||e.every((([e,i])=>!(e in r)||(Array.isArray(i)?i.every((e=>e in r)):xn.interpretSchema(i,t,n,a))))}};const{Schema:An,Instance:kn}=Dt;var Nn={compile:e=>Ue.pipeline([An.entries,Ue.map((([e,t])=>[e,An.value(t)])),Ue.all],e),interpret:(e,t)=>{const n=kn.value(t);return!kn.typeOf(t,"object")||e.every((([e,t])=>!(e in n)||t.every((e=>e in n))))}};const{Core:Cn,Schema:Rn,Instance:Tn}=Dt;var Dn={compile:(e,t)=>Ue.pipeline([Rn.entries,Ue.map((async([e,n])=>[e,await Cn.compileSchema(n,t)])),Ue.all],e),interpret:(e,t,n,a)=>{const r=Tn.value(t);return!Tn.typeOf(t,"object")||e.every((([e,i])=>!(e in r)||Cn.interpretSchema(i,t,n,a)))},collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,[r,i])=>{if(!e||!Tn.has(r,t))return e;const o=Cn.collectEvaluatedProperties(i,t,n,a);return!1!==o&&e.concat(o)}),[])};const{Core:qn,Schema:Mn}=Dt,{safeResolveUrl:Vn,splitUrl:Ln}=X;var Jn={compile:e=>{const t=Vn(e.id,Mn.value(e));return Ln(t)},interpret:([e,t],n,a,r)=>{const i=t in a.metaData[e].dynamicAnchors?r[t]:e,o=Mn.getAnchorPointer(a.metaData[i],t);return qn.interpretSchema(`${i}#${o}`,n,a,r)},collectEvaluatedProperties:qn.collectEvaluatedProperties,collectEvaluatedItems:qn.collectEvaluatedItems};const{Core:zn,Schema:_n}=Dt,{safeResolveUrl:Un,splitUrl:Fn}=X;var Bn={compile:e=>Fn(_n.value(e)),interpret:([e,t],n,a,r)=>{if(!(t in r))throw Error(`No dynamic anchor found for "${t}"`);const i=Un(r[t],e),o=_n.getAnchorPointer(a.metaData[i],t);return zn.interpretSchema(`${i}#${o}`,n,a,r)},collectEvaluatedProperties:zn.collectEvaluatedProperties,collectEvaluatedItems:zn.collectEvaluatedItems};const{Schema:Kn,Instance:Gn}=Dt;var Zn={compile:e=>Kn.value(e).map(mn),interpret:(e,t)=>e.some((e=>mn(Gn.value(t))===e))};const{Schema:Hn,Instance:Wn}=Dt;var Xn={compile:async e=>Hn.value(e),interpret:(e,t)=>!Wn.typeOf(t,"number")||Wn.value(t)<e};const{Schema:Qn,Instance:Yn}=Dt;var ea={compile:async e=>Qn.value(e),interpret:(e,t)=>!Yn.typeOf(t,"number")||Yn.value(t)>e};const{Core:ta}=Dt;var na={compile:(e,t)=>ta.compileSchema(e,t),interpret:(e,t,n,a)=>(ta.interpretSchema(e,t,n,a),!0),collectEvaluatedProperties:(e,t,n,a)=>ta.collectEvaluatedProperties(e,t,n,a)||[],collectEvaluatedItems:(e,t,n,a)=>ta.collectEvaluatedItems(e,t,n,a)||new Set};const{Core:aa,Schema:ra}=Dt,ia=(e,t,n,a)=>{const r=n[e][2];return"boolean"==typeof r?r:r.every((([e,,r])=>aa.getKeyword(e).interpret(r,t,n,a)))};var oa={compile:async(e,t,n)=>{if(ra.has("if",n)){const a=await ra.step("if",n);return[await aa.compileSchema(a,t),await aa.compileSchema(e,t)]}return[]},interpret:([e,t],n,a,r)=>void 0===e||!ia(e,n,a,r)||aa.interpretSchema(t,n,a,r),collectEvaluatedProperties:([e,t],n,a,r)=>void 0!==e&&ia(e,n,a,r)?aa.collectEvaluatedProperties(t,n,a,r):[],collectEvaluatedItems:([e,t],n,a,r)=>void 0!==e&&ia(e,n,a,r)?aa.collectEvaluatedItems(t,n,a,r):new Set};const{Core:sa,Schema:ca}=Dt,la=(e,t,n,a)=>{const r=n[e][2];return"boolean"==typeof r?r:r.every((([e,,r])=>sa.getKeyword(e).interpret(r,t,n,a)))};var ma={compile:async(e,t,n)=>{if(ca.has("if",n)){const a=await ca.step("if",n);return[await sa.compileSchema(a,t),await sa.compileSchema(e,t)]}return[]},interpret:([e,t],n,a,r)=>void 0===e||la(e,n,a,r)||sa.interpretSchema(t,n,a,r),collectEvaluatedProperties:([e,t],n,a,r)=>void 0===e||la(e,n,a,r)?[]:sa.collectEvaluatedProperties(t,n,a,r),collectEvaluatedItems:([e,t],n,a,r)=>void 0===e||la(e,n,a,r)?new Set:sa.collectEvaluatedItems(t,n,a,r)};const{Core:pa,Schema:ua,Instance:fa}=Dt,da=(e,t,n,a)=>!fa.typeOf(t,"array")||("string"==typeof e?fa.every((t=>pa.interpretSchema(e,t,n,a)),t):fa.every(((t,r)=>!(r in e)||pa.interpretSchema(e[r],t,n,a)),t));var ha={compile:(e,t)=>ua.typeOf(e,"array")?Ue.pipeline([ua.map((e=>pa.compileSchema(e,t))),Ue.all],e):pa.compileSchema(e,t),interpret:da,collectEvaluatedItems:(e,t,n,a)=>da(e,t,n,a)&&("string"==typeof e?new Set(fa.map(((e,t)=>t),t)):new Set(e.map(((e,t)=>t))))};const{Core:ya,Schema:va,Instance:ga}=Dt,$a=([e,t],n,a,r)=>!ga.typeOf(n,"array")||ga.every(((n,i)=>i<e||ya.interpretSchema(t,n,a,r)),n);var ba={compile:async(e,t,n)=>{const a=await va.step("prefixItems",n);return[va.typeOf(a,"array")?va.length(a):0,await ya.compileSchema(e,t)]},interpret:$a,collectEvaluatedItems:(e,t,n,a)=>$a(e,t,n,a)&&new Set(ga.map(((e,t)=>t),t))};const{Schema:ja,Instance:Oa}=Dt;var Ia={compile:e=>ja.value(e),interpret:(e,t)=>!Oa.typeOf(t,"array")||Oa.length(t)<=e};const{Schema:Sa,Instance:xa}=Dt;var wa={compile:e=>Sa.value(e),interpret:(e,t)=>!xa.typeOf(t,"string")||xa.length(t)<=e};const{Schema:Ea,Instance:Pa}=Dt;var Aa={compile:e=>Ea.value(e),interpret:(e,t)=>!Pa.typeOf(t,"string")||[...Pa.value(t)].length<=e};const{Schema:ka,Instance:Na}=Dt;var Ca={compile:e=>ka.value(e),interpret:(e,t)=>!Na.typeOf(t,"object")||Na.keys(t).length<=e};const{Schema:Ra,Instance:Ta}=Dt;var Da={compile:async(e,t,n)=>{const a=await Ra.step("exclusiveMaximum",n),r=Ra.value(a);return[Ra.value(e),r]},interpret:([e,t],n)=>{if(!Ta.typeOf(n,"number"))return!0;const a=Ta.value(n);return t?a<e:a<=e}};const{Schema:qa,Instance:Ma}=Dt;var Va={compile:async e=>qa.value(e),interpret:(e,t)=>!Ma.typeOf(t,"number")||Ma.value(t)<=e};const{Schema:La,Instance:Ja}=Dt;var za={compile:e=>La.value(e),interpret:(e,t)=>!Ja.typeOf(t,"array")||Ja.length(t)>=e};const{Schema:_a,Instance:Ua}=Dt;var Fa={compile:e=>_a.value(e),interpret:(e,t)=>!Ua.typeOf(t,"string")||Ua.value(t).length>=e};const{Schema:Ba,Instance:Ka}=Dt;var Ga={compile:e=>Ba.value(e),interpret:(e,t)=>!Ka.typeOf(t,"string")||[...Ka.value(t)].length>=e};const{Schema:Za,Instance:Ha}=Dt;var Wa={compile:e=>Za.value(e),interpret:(e,t)=>{const n=Ha.value(t);return!Ha.typeOf(t,"object")||Object.keys(n).length>=e}};const{Schema:Xa,Instance:Qa}=Dt;var Ya={compile:async(e,t,n)=>{const a=await Xa.step("exclusiveMinimum",n),r=Xa.value(a);return[Xa.value(e),r]},interpret:([e,t],n)=>{if(!Qa.typeOf(n,"number"))return!0;const a=Qa.value(n);return t?a>e:a>=e}};const{Schema:er,Instance:tr}=Dt;var nr={compile:async e=>er.value(e),interpret:(e,t)=>!tr.typeOf(t,"number")||tr.value(t)>=e};const{Schema:ar,Instance:rr}=Dt,ir=(e,t)=>Math.abs(e-t)<1.1920929e-7;var or={compile:e=>ar.value(e),interpret:(e,t)=>{if(!rr.typeOf(t,"number"))return!0;const n=rr.value(t)%e;return ir(0,n)||ir(e,n)}};const{Core:sr}=Dt;var cr={compile:sr.compileSchema,interpret:(e,t,n,a)=>!sr.interpretSchema(e,t,n,a)};const{Core:lr,Schema:mr}=Dt;var pr={compile:(e,t)=>Ue.pipeline([mr.map((async e=>lr.compileSchema(await e,t))),Ue.all],e),interpret:(e,t,n,a)=>{let r=0;for(const i of e)if(lr.interpretSchema(i,t,n,a)&&r++,r>1)break;return 1===r},collectEvaluatedProperties:(e,t,n,a)=>{let r=0;return e.reduce(((e,i)=>{if(r>1)return!1;const o=lr.collectEvaluatedProperties(i,t,n,a);return o?0==r++&&o:e}),!1)},collectEvaluatedItems:(e,t,n,a)=>{let r=0;return e.reduce(((e,i)=>{if(r>1)return!1;const o=lr.collectEvaluatedItems(i,t,n,a);return o?0==r++&&o:e}),!1)}};const{Schema:ur,Instance:fr}=Dt;var dr={compile:e=>new RegExp(ur.value(e),"u"),interpret:(e,t)=>!fr.typeOf(t,"string")||e.test(fr.value(t))};const{Core:hr,Schema:yr,Instance:vr}=Dt,gr=(e,t,n,a)=>!vr.typeOf(t,"object")||e.every((([e,r])=>vr.entries(t).filter((([t])=>e.test(t))).every((([,e])=>hr.interpretSchema(r,e,n,a)))));var $r={compile:(e,t)=>Ue.pipeline([yr.entries,Ue.map((async([e,n])=>[new RegExp(e,"u"),await hr.compileSchema(n,t)])),Ue.all],e),interpret:gr,collectEvaluatedProperties:(e,t,n,a)=>gr(e,t,n,a)&&e.map((([e])=>e))};var br={isObject:e=>"object"==typeof e&&!Array.isArray(e)&&null!==e,escapeRegExp:e=>e.replace(/[.*+\-?^${}()|[\]\\]/g,"\\$&")};const{Core:jr,Schema:Or,Instance:Ir}=Dt,{escapeRegExp:Sr}=br,xr=(e,t,n,a)=>!Ir.typeOf(t,"object")||Ir.entries(t).filter((([t])=>t in e)).every((([t,r])=>jr.interpretSchema(e[t],r,n,a)));var wr={compile:(e,t)=>Ue.pipeline([Or.entries,Ue.reduce((async(e,[n,a])=>(e[n]=await jr.compileSchema(a,t),e)),Object.create(null))],e),interpret:xr,collectEvaluatedProperties:(e,t,n,a)=>xr(e,t,n,a)&&Object.keys(e).map((e=>new RegExp(`^${Sr(e)}$`)))};const{Core:Er,Instance:Pr}=Dt;var Ar={compile:(e,t)=>Er.compileSchema(e,t),interpret:(e,t,n,a)=>!Pr.typeOf(t,"object")||Pr.keys(t).every((t=>Er.interpretSchema(e,Pr.cons(t),n,a)))};const{Core:kr,Schema:Nr}=Dt;var Cr={compile:async(e,t)=>{const n=await Nr.get(Nr.value(e),e);return kr.compileSchema(n,t)},interpret:kr.interpretSchema,collectEvaluatedProperties:kr.collectEvaluatedProperties,collectEvaluatedItems:kr.collectEvaluatedItems};const{Schema:Rr,Instance:Tr}=Dt;var Dr={compile:e=>Rr.value(e),interpret:(e,t)=>!Tr.typeOf(t,"object")||e.every((e=>Tr.value(t).hasOwnProperty(e)))};const{Core:qr,Schema:Mr,Instance:Vr}=Dt,Lr=(e,t,n,a)=>!Vr.typeOf(t,"array")||Vr.every(((t,r)=>!(r in e)||qr.interpretSchema(e[r],t,n,a)),t);var Jr={compile:(e,t)=>Ue.pipeline([Mr.map((e=>qr.compileSchema(e,t))),Ue.all],e),interpret:Lr,collectEvaluatedItems:(e,t,n,a)=>Lr(e,t,n,a)&&new Set(e.map(((e,t)=>t)))};const{Schema:zr,Instance:_r}=Dt;var Ur={compile:e=>zr.value(e),interpret:(e,t)=>"string"==typeof e?_r.typeOf(t,e):e.some(_r.typeOf(t))};const{Core:Fr,Schema:Br,Instance:Kr}=Dt,Gr=([e,t],n,a,r)=>{if(!Kr.typeOf(n,"array"))return!0;const i=Fr.collectEvaluatedItems(e,n,a,r,!0);return!1===i||Kr.every(((e,o)=>i.has(o)||Fr.interpretSchema(t,Kr.step(o,n),a,r)),n)};var Zr={compile:async(e,t,n)=>[Br.uri(n),await Fr.compileSchema(e,t)],interpret:Gr,collectEvaluatedItems:(e,t,n,a)=>Gr(e,t,n,a)&&new Set(Kr.map(((e,t)=>t),t))};const{Core:Hr,Schema:Wr,Instance:Xr}=Dt,Qr=([e,t],n,a,r)=>{if(!Xr.typeOf(n,"object"))return!0;const i=Hr.collectEvaluatedProperties(e,n,a,r,!0);return!i||Xr.entries(n).filter((([e])=>!i.some((t=>e.match(t))))).every((([,e])=>Hr.interpretSchema(t,e,a,r)))};var Yr={compile:async(e,t,n)=>[Wr.uri(n),await Hr.compileSchema(e,t)],interpret:Qr,collectEvaluatedProperties:(e,t,n,a)=>Qr(e,t,n,a)&&[new RegExp("")]};const{Schema:ei,Instance:ti}=Dt;var ni={compile:e=>ei.value(e),interpret:(e,t)=>{if(!ti.typeOf(t,"array")||!1===e)return!0;const n=ti.map((e=>mn(ti.value(e))),t);return new Set(n).size===n.length}};const{Keywords:ai}=Dt;var ri={additionalItems:Lt,additionalItems6:Ft,additionalProperties:Zt,additionalProperties6:Yt,allOf:nn,anyOf:on,const:fn,contains:yn,containsMinContainsMaxContains:jn,definitions:Sn,dependencies:Pn,dependentRequired:Nn,dependentSchemas:Dn,dynamicRef:Jn,dynamicRefFUTURE:Bn,enum:Zn,exclusiveMaximum:Xn,exclusiveMinimum:ea,if:na,then:oa,else:ma,items:ha,items202012:ba,maxItems:Ia,maxLength:wa,maxLength6:Aa,maxProperties:Ca,maximumExclusiveMaximum:Da,maximum:Va,metaData:ai.metaData,minItems:za,minLength:Fa,minLength6:Ga,minProperties:Wa,minimumExclusiveMinimum:Ya,minimum:nr,multipleOf:or,not:cr,oneOf:pr,pattern:dr,patternProperties:$r,properties:wr,propertyNames:Ar,ref:Cr,required:Dr,tupleItems:Jr,type:Ur,unevaluatedItems:Zr,unevaluatedProperties:Yr,uniqueItems:ni,validate:ai.validate};const{Core:ii,Schema:oi}=Dt,si="http://json-schema.org/draft-04/schema";oi.setConfig(si,"baseToken","id"),oi.setConfig(si,"embeddedToken","id"),oi.setConfig(si,"anchorToken","id"),oi.setConfig(si,"jrefToken","$ref"),oi.add(JSON.parse('{\n    "id": "http://json-schema.org/draft-04/schema#",\n    "$schema": "http://json-schema.org/draft-04/schema#",\n    "description": "Core schema meta-schema",\n    "definitions": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$ref": "#" }\n        },\n        "positiveInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "positiveIntegerDefault0": {\n            "allOf": [ { "$ref": "#/definitions/positiveInteger" }, { "default": 0 } ]\n        },\n        "simpleTypes": {\n            "enum": [ "array", "boolean", "integer", "null", "number", "object", "string" ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "minItems": 1,\n            "uniqueItems": true\n        }\n    },\n    "type": "object",\n    "properties": {\n        "id": {\n            "type": "string"\n        },\n        "$schema": {\n            "type": "string"\n        },\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": {},\n        "multipleOf": {\n            "type": "number",\n            "minimum": 0,\n            "exclusiveMinimum": true\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "boolean",\n            "default": false\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxLength": { "$ref": "#/definitions/positiveInteger" },\n        "minLength": { "$ref": "#/definitions/positiveIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "additionalItems": {\n            "anyOf": [\n                { "type": "boolean" },\n                { "$ref": "#" }\n            ],\n            "default": {}\n        },\n        "items": {\n            "anyOf": [\n                { "$ref": "#" },\n                { "$ref": "#/definitions/schemaArray" }\n            ],\n            "default": {}\n        },\n        "maxItems": { "$ref": "#/definitions/positiveInteger" },\n        "minItems": { "$ref": "#/definitions/positiveIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxProperties": { "$ref": "#/definitions/positiveInteger" },\n        "minProperties": { "$ref": "#/definitions/positiveIntegerDefault0" },\n        "required": { "$ref": "#/definitions/stringArray" },\n        "additionalProperties": {\n            "anyOf": [\n                { "type": "boolean" },\n                { "$ref": "#" }\n            ],\n            "default": {}\n        },\n        "definitions": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "dependencies": {\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$ref": "#" },\n                    { "$ref": "#/definitions/stringArray" }\n                ]\n            }\n        },\n        "enum": {\n            "type": "array",\n            "minItems": 1,\n            "uniqueItems": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/definitions/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/definitions/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        },\n        "format": { "type": "string" },\n        "allOf": { "$ref": "#/definitions/schemaArray" },\n        "anyOf": { "$ref": "#/definitions/schemaArray" },\n        "oneOf": { "$ref": "#/definitions/schemaArray" },\n        "not": { "$ref": "#" }\n    },\n    "dependencies": {\n        "exclusiveMaximum": [ "maximum" ],\n        "exclusiveMinimum": [ "minimum" ]\n    },\n    "default": {}\n}')),ii.defineVocabulary(si,{validate:ri.validate,additionalItems:ri.additionalItems,additionalProperties:ri.additionalProperties,allOf:ri.allOf,anyOf:ri.anyOf,default:ri.metaData,definitions:ri.definitions,dependencies:ri.dependencies,description:ri.metaData,enum:ri.enum,format:ri.metaData,items:ri.items,maxItems:ri.maxItems,maxLength:ri.maxLength,maxProperties:ri.maxProperties,maximum:ri.maximumExclusiveMaximum,minItems:ri.minItems,minLength:ri.minLength,minProperties:ri.minProperties,minimum:ri.minimumExclusiveMinimum,multipleOf:ri.multipleOf,not:ri.not,oneOf:ri.oneOf,pattern:ri.pattern,patternProperties:ri.patternProperties,properties:ri.properties,required:ri.required,title:ri.metaData,type:ri.type,uniqueItems:ri.uniqueItems});const ci="http://json-schema.org/draft-04/hyper-schema";oi.setConfig(ci,"baseToken","id"),oi.setConfig(ci,"embeddedToken","id"),oi.setConfig(ci,"anchorToken","id"),oi.setConfig(ci,"jrefToken","$ref"),oi.add(JSON.parse('{\n    "$schema": "http://json-schema.org/draft-04/hyper-schema#",\n    "id": "http://json-schema.org/draft-04/hyper-schema#",\n    "title": "JSON Hyper-Schema",\n    "allOf": [\n        {"$ref": "http://json-schema.org/draft-04/schema#"}\n    ],\n    "properties": {\n        "additionalItems": {\n            "anyOf": [\n                {"type": "boolean"},\n                {"$ref": "#"}\n            ]\n        },\n        "additionalProperties": {\n            "anyOf": [\n                {"type": "boolean"},\n                {"$ref": "#"}\n            ]\n        },\n        "dependencies": {\n            "additionalProperties": {\n                "anyOf": [\n                    {"$ref": "#"},\n                    {"type": "array"}\n                ]\n            }\n        },\n        "items": {\n            "anyOf": [\n                {"$ref": "#"},\n                {"$ref": "#/definitions/schemaArray"}\n            ]\n        },\n        "definitions": {\n            "additionalProperties": {"$ref": "#"}\n        },\n        "patternProperties": {\n            "additionalProperties": {"$ref": "#"}\n        },\n        "properties": {\n            "additionalProperties": {"$ref": "#"}\n        },\n        "allOf": {"$ref": "#/definitions/schemaArray"},\n        "anyOf": {"$ref": "#/definitions/schemaArray"},\n        "oneOf": {"$ref": "#/definitions/schemaArray"},\n        "not": { "$ref": "#" },\n\n        "links": {\n            "type": "array",\n            "items": {"$ref": "#/definitions/linkDescription"}\n        },\n        "fragmentResolution": {\n            "type": "string"\n        },\n        "media": {\n            "type": "object",\n            "properties": {\n                "type": {\n                    "description": "A media type, as described in RFC 2046",\n                    "type": "string"\n                },\n                "binaryEncoding": {\n                    "description": "A content encoding scheme, as described in RFC 2045",\n                    "type": "string"\n                }\n            }\n        },\n        "pathStart": {\n            "description": "Instances\' URIs must start with this value for this schema to apply to them",\n            "type": "string",\n            "format": "uri"\n        }\n    },\n    "definitions": {\n        "schemaArray": {\n            "type": "array",\n            "items": {"$ref": "#"}\n        },\n        "linkDescription": {\n            "title": "Link Description Object",\n            "type": "object",\n            "required": ["href", "rel"],\n            "properties": {\n                "href": {\n                    "description": "a URI template, as defined by RFC 6570, with the addition of the $, ( and ) characters for pre-processing",\n                    "type": "string"\n                },\n                "rel": {\n                    "description": "relation to the target resource of the link",\n                    "type": "string"\n                },\n                "title": {\n                    "description": "a title for the link",\n                    "type": "string"\n                },\n                "targetSchema": {\n                    "description": "JSON Schema describing the link target",\n                    "$ref": "#"\n                },\n                "mediaType": {\n                    "description": "media type (as defined by RFC 2046) describing the link target",\n                    "type": "string"\n                },\n                "method": {\n                    "description": "method for requesting the target of the link (e.g. for HTTP this might be \\"GET\\" or \\"DELETE\\")",\n                    "type": "string"\n                },\n                "encType": {\n                    "description": "The media type in which to submit data along with the request",\n                    "type": "string",\n                    "default": "application/json"\n                },\n                "schema": {\n                    "description": "Schema describing the data to submit along with the request",\n                    "$ref": "#"\n                }\n            }\n        },\n        "readOnly": {\n            "description": "If true, indicates that the value of this property is controlled by the server.",\n            "type": "boolean",\n            "default": false\n        }\n    },\n    "links": [\n        {\n            "rel": "self",\n            "href": "{+id}"\n        },\n        {\n            "rel": "full",\n            "href": "{+($ref)}"\n        }\n    ]\n}')),ii.defineVocabulary(ci,{validate:ri.validate,additionalItems:ri.additionalItems,additionalProperties:ri.additionalProperties,allOf:ri.allOf,anyOf:ri.anyOf,default:ri.metaData,definitions:ri.definitions,dependencies:ri.dependencies,description:ri.metaData,enum:ri.enum,format:ri.metaData,fragmentResolution:ri.metaData,items:ri.items,maxItems:ri.maxItems,minProperties:ri.minProperties,maxProperties:ri.maxProperties,maximum:ri.maximumExclusiveMaximum,media:ri.metaData,minItems:ri.minItems,minLength:ri.minLength,maxLength:ri.maxLength,minimum:ri.minimumExclusiveMinimum,multipleOf:ri.multipleOf,links:ri.metaData,not:ri.not,oneOf:ri.oneOf,pathStart:ri.metaData,pattern:ri.pattern,patternProperties:ri.patternProperties,properties:ri.properties,readOnly:ri.metaData,required:ri.required,title:ri.metaData,type:ri.type,uniqueItems:ri.uniqueItems});const{Core:li,Schema:mi}=Dt,pi="http://json-schema.org/draft-06/schema";mi.setConfig(pi,"baseToken","$id"),mi.setConfig(pi,"embeddedToken","$id"),mi.setConfig(pi,"anchorToken","$id"),mi.setConfig(pi,"jrefToken","$ref"),mi.add(JSON.parse('{\n    "$schema": "http://json-schema.org/draft-06/schema#",\n    "$id": "http://json-schema.org/draft-06/schema#",\n    "title": "Core schema meta-schema",\n    "definitions": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$ref": "#" }\n        },\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "allOf": [\n                { "$ref": "#/definitions/nonNegativeInteger" },\n                { "default": 0 }\n            ]\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    },\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": {},\n        "examples": {\n            "type": "array",\n            "items": {}\n        },\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "additionalItems": { "$ref": "#" },\n        "items": {\n            "anyOf": [\n                { "$ref": "#" },\n                { "$ref": "#/definitions/schemaArray" }\n            ],\n            "default": {}\n        },\n        "maxItems": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "contains": { "$ref": "#" },\n        "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/definitions/stringArray" },\n        "additionalProperties": { "$ref": "#" },\n        "definitions": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "dependencies": {\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$ref": "#" },\n                    { "$ref": "#/definitions/stringArray" }\n                ]\n            }\n        },\n        "propertyNames": { "$ref": "#" },\n        "const": {},\n        "enum": {\n            "type": "array",\n            "minItems": 1,\n            "uniqueItems": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/definitions/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/definitions/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        },\n        "format": { "type": "string" },\n        "allOf": { "$ref": "#/definitions/schemaArray" },\n        "anyOf": { "$ref": "#/definitions/schemaArray" },\n        "oneOf": { "$ref": "#/definitions/schemaArray" },\n        "not": { "$ref": "#" }\n    },\n    "default": {}\n}')),li.defineVocabulary(pi,{validate:ri.validate,additionalItems:ri.additionalItems6,additionalProperties:ri.additionalProperties6,allOf:ri.allOf,anyOf:ri.anyOf,const:ri.const,contains:ri.contains,default:ri.metaData,definitions:ri.definitions,dependencies:ri.dependencies,description:ri.metaData,enum:ri.enum,examples:ri.metaData,exclusiveMaximum:ri.exclusiveMaximum,exclusiveMinimum:ri.exclusiveMinimum,format:ri.metaData,items:ri.items,maxItems:ri.maxItems,maxLength:ri.maxLength6,maxProperties:ri.maxProperties,maximum:ri.maximum,minItems:ri.minItems,minLength:ri.minLength6,minProperties:ri.minProperties,minimum:ri.minimum,multipleOf:ri.multipleOf,not:ri.not,oneOf:ri.oneOf,pattern:ri.pattern,patternProperties:ri.patternProperties,properties:ri.properties,propertyNames:ri.propertyNames,required:ri.required,title:ri.metaData,type:ri.type,uniqueItems:ri.uniqueItems});const{Core:ui,Schema:fi}=Dt,di="http://json-schema.org/draft-07/schema";fi.setConfig(di,"baseToken","$id"),fi.setConfig(di,"embeddedToken","$id"),fi.setConfig(di,"anchorToken","$id"),fi.setConfig(di,"jrefToken","$ref"),fi.add(JSON.parse('{\n    "$schema": "http://json-schema.org/draft-07/schema#",\n    "$id": "http://json-schema.org/draft-07/schema#",\n    "title": "Core schema meta-schema",\n    "definitions": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$ref": "#" }\n        },\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "allOf": [\n                { "$ref": "#/definitions/nonNegativeInteger" },\n                { "default": 0 }\n            ]\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    },\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$comment": {\n            "type": "string"\n        },\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": true,\n        "readOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "writeOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "examples": {\n            "type": "array",\n            "items": true\n        },\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "additionalItems": { "$ref": "#" },\n        "items": {\n            "anyOf": [\n                { "$ref": "#" },\n                { "$ref": "#/definitions/schemaArray" }\n            ],\n            "default": true\n        },\n        "maxItems": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "contains": { "$ref": "#" },\n        "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/definitions/stringArray" },\n        "additionalProperties": { "$ref": "#" },\n        "definitions": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "propertyNames": { "format": "regex" },\n            "default": {}\n        },\n        "dependencies": {\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$ref": "#" },\n                    { "$ref": "#/definitions/stringArray" }\n                ]\n            }\n        },\n        "propertyNames": { "$ref": "#" },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true,\n            "minItems": 1,\n            "uniqueItems": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/definitions/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/definitions/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        },\n        "format": { "type": "string" },\n        "contentMediaType": { "type": "string" },\n        "contentEncoding": { "type": "string" },\n        "if": { "$ref": "#" },\n        "then": { "$ref": "#" },\n        "else": { "$ref": "#" },\n        "allOf": { "$ref": "#/definitions/schemaArray" },\n        "anyOf": { "$ref": "#/definitions/schemaArray" },\n        "oneOf": { "$ref": "#/definitions/schemaArray" },\n        "not": { "$ref": "#" }\n    },\n    "default": true\n}')),ui.defineVocabulary(di,{validate:ri.validate,additionalItems:ri.additionalItems6,additionalProperties:ri.additionalProperties6,allOf:ri.allOf,anyOf:ri.anyOf,const:ri.const,contains:ri.contains,default:ri.metaData,definitions:ri.definitions,dependencies:ri.dependencies,description:ri.metaData,enum:ri.enum,exclusiveMaximum:ri.exclusiveMaximum,exclusiveMinimum:ri.exclusiveMinimum,format:ri.metaData,if:ri.if,then:ri.then,else:ri.else,items:ri.items,maxItems:ri.maxItems,maxLength:ri.maxLength6,maxProperties:ri.maxProperties,maximum:ri.maximum,minItems:ri.minItems,minLength:ri.minLength6,minProperties:ri.minProperties,minimum:ri.minimum,multipleOf:ri.multipleOf,not:ri.not,oneOf:ri.oneOf,pattern:ri.pattern,patternProperties:ri.patternProperties,properties:ri.properties,propertyNames:ri.propertyNames,readOnly:ri.metaData,required:ri.required,title:ri.metaData,type:ri.type,uniqueItems:ri.uniqueItems,writeOnly:ri.metaData});const{Core:hi,Schema:yi}=Dt,vi="https://json-schema.org/draft/2019-09/schema";yi.setConfig(vi,"baseToken","$id"),yi.setConfig(vi,"embeddedToken","$id"),yi.setConfig(vi,"anchorToken","$anchor"),yi.setConfig(vi,"recursiveAnchorToken","$recursiveAnchor"),yi.setConfig(vi,"vocabularyToken","$vocabulary"),yi.setConfig(vi,"mandatoryVocabularies",["https://json-schema.org/draft/2019-09/vocab/core"]),yi.add(JSON.parse('{\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$id": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2019-09/vocab/core": true,\n        "https://json-schema.org/draft/2019-09/vocab/applicator": true,\n        "https://json-schema.org/draft/2019-09/vocab/validation": true,\n        "https://json-schema.org/draft/2019-09/vocab/meta-data": true,\n        "https://json-schema.org/draft/2019-09/vocab/format": false,\n        "https://json-schema.org/draft/2019-09/vocab/content": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Core and Validation specifications meta-schema",\n    "allOf": [\n        {"$ref": "meta/core"},\n        {"$ref": "meta/applicator"},\n        {"$ref": "meta/validation"},\n        {"$ref": "meta/meta-data"},\n        {"$ref": "meta/format"},\n        {"$ref": "meta/content"}\n    ],\n    "type": ["object", "boolean"],\n    "properties": {\n        "definitions": {\n            "$comment": "While no longer an official keyword as it is replaced by $defs, this keyword is retained in the meta-schema to prevent incompatible extensions as it remains in common use.",\n            "type": "object",\n            "additionalProperties": { "$recursiveRef": "#" },\n            "default": {}\n        },\n        "dependencies": {\n            "$comment": "\\"dependencies\\" is no longer a keyword, but schema authors should avoid redefining it to facilitate a smooth transition to \\"dependentSchemas\\" and \\"dependentRequired\\"",\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$recursiveRef": "#" },\n                    { "$ref": "meta/validation#/$defs/stringArray" }\n                ]\n            }\n        }\n    }\n}')),yi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/core",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/core": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Core vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference",\n            "$comment": "Non-empty fragments not allowed.",\n            "pattern": "^[^#]*#?$"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$anchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z][-A-Za-z0-9.:_]*$"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$recursiveRef": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$recursiveAnchor": {\n            "type": "boolean",\n            "default": false\n        },\n        "$vocabulary": {\n            "type": "object",\n            "propertyNames": {\n                "type": "string",\n                "format": "uri"\n            },\n            "additionalProperties": {\n                "type": "boolean"\n            }\n        },\n        "$comment": {\n            "type": "string"\n        },\n        "$defs": {\n            "type": "object",\n            "additionalProperties": { "$recursiveRef": "#" },\n            "default": {}\n        }\n    }\n}')),hi.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/core",{validate:ri.validate,$defs:ri.definitions,$recursiveRef:ri.dynamicRef,$ref:ri.ref}),yi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/applicator",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2019-09/vocab/applicator": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Applicator vocabulary meta-schema",\n    "properties": {\n        "additionalItems": { "$recursiveRef": "#" },\n        "unevaluatedItems": { "$recursiveRef": "#" },\n        "items": {\n            "anyOf": [\n                { "$recursiveRef": "#" },\n                { "$ref": "#/$defs/schemaArray" }\n            ]\n        },\n        "contains": { "$recursiveRef": "#" },\n        "additionalProperties": { "$recursiveRef": "#" },\n        "unevaluatedProperties": { "$recursiveRef": "#" },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$recursiveRef": "#" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$recursiveRef": "#" },\n            "propertyNames": { "format": "regex" },\n            "default": {}\n        },\n        "dependentSchemas": {\n            "type": "object",\n            "additionalProperties": {\n                "$recursiveRef": "#"\n            }\n        },\n        "propertyNames": { "$recursiveRef": "#" },\n        "if": { "$recursiveRef": "#" },\n        "then": { "$recursiveRef": "#" },\n        "else": { "$recursiveRef": "#" },\n        "allOf": { "$ref": "#/$defs/schemaArray" },\n        "anyOf": { "$ref": "#/$defs/schemaArray" },\n        "oneOf": { "$ref": "#/$defs/schemaArray" },\n        "not": { "$recursiveRef": "#" }\n    },\n    "$defs": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$recursiveRef": "#" }\n        }\n    }\n}')),hi.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/applicator",{additionalItems:ri.additionalItems6,additionalProperties:ri.additionalProperties6,allOf:ri.allOf,anyOf:ri.anyOf,contains:ri.containsMinContainsMaxContains,dependentSchemas:ri.dependentSchemas,if:ri.if,then:ri.then,else:ri.else,items:ri.items,not:ri.not,oneOf:ri.oneOf,patternProperties:ri.patternProperties,properties:ri.properties,propertyNames:ri.propertyNames,unevaluatedItems:ri.unevaluatedItems,unevaluatedProperties:ri.unevaluatedProperties}),yi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/validation",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/validation": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Validation vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minLength": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "maxItems": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minItems": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxContains": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minContains": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 1\n        },\n        "maxProperties": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/$defs/stringArray" },\n        "dependentRequired": {\n            "type": "object",\n            "additionalProperties": {\n                "$ref": "#/$defs/stringArray"\n            }\n        },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/$defs/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/$defs/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        }\n    },\n    "$defs": {\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 0\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    }\n}')),hi.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/validation",{const:ri.const,dependentRequired:ri.dependentRequired,enum:ri.enum,exclusiveMaximum:ri.exclusiveMaximum,exclusiveMinimum:ri.exclusiveMinimum,maxItems:ri.maxItems,maxLength:ri.maxLength6,maxProperties:ri.maxProperties,maximum:ri.maximum,minItems:ri.minItems,minLength:ri.minLength6,minProperties:ri.minProperties,minimum:ri.minimum,multipleOf:ri.multipleOf,pattern:ri.pattern,required:ri.required,type:ri.type,uniqueItems:ri.uniqueItems}),yi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/meta-data",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/meta-data": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Meta-data vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": true,\n        "deprecated": {\n            "type": "boolean",\n            "default": false\n        },\n        "readOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "writeOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "examples": {\n            "type": "array",\n            "items": true\n        }\n    }\n}')),hi.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/meta-data",{default:ri.metaData,deprecated:ri.metaData,description:ri.metaData,examples:ri.metaData,readOnly:ri.metaData,title:ri.metaData,writeOnly:ri.metaData}),yi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/format",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/format": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Format vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),yi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/content",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/content": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Content vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "contentMediaType": { "type": "string" },\n        "contentEncoding": { "type": "string" },\n        "contentSchema": { "$recursiveRef": "#" }\n    }\n}')),hi.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/content",{contentEncoding:ri.metaData,contentMediaType:ri.metaData,contentSchema:ri.metaData});const{Core:gi,Schema:$i}=Dt,bi="https://json-schema.org/draft/2020-12/schema";$i.setConfig(bi,"baseToken","$id"),$i.setConfig(bi,"embeddedToken","$id"),$i.setConfig(bi,"anchorToken","$anchor"),$i.setConfig(bi,"dynamicAnchorToken","$dynamicAnchor"),$i.setConfig(bi,"vocabularyToken","$vocabulary"),$i.setConfig(bi,"mandatoryVocabularies",["https://json-schema.org/draft/2020-12/vocab/core"]),$i.add(JSON.parse('{\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$id": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/core": true,\n        "https://json-schema.org/draft/2020-12/vocab/applicator": true,\n        "https://json-schema.org/draft/2020-12/vocab/unevaluated": true,\n        "https://json-schema.org/draft/2020-12/vocab/validation": true,\n        "https://json-schema.org/draft/2020-12/vocab/meta-data": true,\n        "https://json-schema.org/draft/2020-12/vocab/format-annotation": true,\n        "https://json-schema.org/draft/2020-12/vocab/content": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Core and Validation specifications meta-schema",\n    "allOf": [\n        {"$ref": "meta/core"},\n        {"$ref": "meta/applicator"},\n        {"$ref": "meta/unevaluated"},\n        {"$ref": "meta/validation"},\n        {"$ref": "meta/meta-data"},\n        {"$ref": "meta/format-annotation"},\n        {"$ref": "meta/content"}\n    ],\n    "type": ["object", "boolean"],\n    "properties": {\n        "definitions": {\n            "$comment": "While no longer an official keyword as it is replaced by $defs, this keyword is retained in the meta-schema to prevent incompatible extensions as it remains in common use.",\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        },\n        "dependencies": {\n            "$comment": "\\"dependencies\\" is no longer a keyword, but schema authors should avoid redefining it to facilitate a smooth transition to \\"dependentSchemas\\" and \\"dependentRequired\\"",\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$dynamicRef": "#meta" },\n                    { "$ref": "meta/validation#/$defs/stringArray" }\n                ]\n            }\n        }\n    }\n}')),$i.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/core",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/core": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Core vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference",\n            "$comment": "Non-empty fragments not allowed.",\n            "pattern": "^[^#]*#?$"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$anchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z_][-A-Za-z0-9._]*$"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$dynamicRef": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$dynamicAnchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z_][-A-Za-z0-9._]*$"\n        },\n        "$vocabulary": {\n            "type": "object",\n            "propertyNames": {\n                "type": "string",\n                "format": "uri"\n            },\n            "additionalProperties": {\n                "type": "boolean"\n            }\n        },\n        "$comment": {\n            "type": "string"\n        },\n        "$defs": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        }\n    }\n}')),gi.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/core",{validate:ri.validate,$defs:ri.definitions,$dynamicRef:ri.dynamicRef,$ref:ri.ref}),$i.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/applicator",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/applicator": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Applicator vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "prefixItems": { "$ref": "#/$defs/schemaArray" },\n        "items": { "$dynamicRef": "#meta" },\n        "contains": { "$dynamicRef": "#meta" },\n        "additionalProperties": { "$dynamicRef": "#meta" },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "propertyNames": { "format": "regex" },\n            "default": {}\n        },\n        "dependentSchemas": {\n            "type": "object",\n            "additionalProperties": {\n                "$dynamicRef": "#meta"\n            }\n        },\n        "propertyNames": { "$dynamicRef": "#meta" },\n        "if": { "$dynamicRef": "#meta" },\n        "then": { "$dynamicRef": "#meta" },\n        "else": { "$dynamicRef": "#meta" },\n        "allOf": { "$ref": "#/$defs/schemaArray" },\n        "anyOf": { "$ref": "#/$defs/schemaArray" },\n        "oneOf": { "$ref": "#/$defs/schemaArray" },\n        "not": { "$dynamicRef": "#meta" }\n    },\n    "$defs": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$dynamicRef": "#meta" }\n        }\n    }\n}')),gi.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/applicator",{additionalProperties:ri.additionalProperties6,allOf:ri.allOf,anyOf:ri.anyOf,contains:ri.containsMinContainsMaxContains,dependentSchemas:ri.dependentSchemas,if:ri.if,then:ri.then,else:ri.else,items:ri.items202012,not:ri.not,oneOf:ri.oneOf,patternProperties:ri.patternProperties,prefixItems:ri.tupleItems,properties:ri.properties,propertyNames:ri.propertyNames}),$i.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/validation",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/validation": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Validation vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minLength": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "maxItems": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minItems": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxContains": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minContains": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 1\n        },\n        "maxProperties": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/$defs/stringArray" },\n        "dependentRequired": {\n            "type": "object",\n            "additionalProperties": {\n                "$ref": "#/$defs/stringArray"\n            }\n        },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/$defs/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/$defs/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        }\n    },\n    "$defs": {\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 0\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    }\n}')),gi.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/validation",{const:ri.const,dependentRequired:ri.dependentRequired,enum:ri.enum,exclusiveMaximum:ri.exclusiveMaximum,exclusiveMinimum:ri.exclusiveMinimum,maxItems:ri.maxItems,maxLength:ri.maxLength6,maxProperties:ri.maxProperties,maximum:ri.maximum,minItems:ri.minItems,minLength:ri.minLength6,minProperties:ri.minProperties,minimum:ri.minimum,multipleOf:ri.multipleOf,pattern:ri.pattern,required:ri.required,type:ri.type,uniqueItems:ri.uniqueItems}),$i.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/meta-data",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/meta-data": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Meta-data vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": true,\n        "deprecated": {\n            "type": "boolean",\n            "default": false\n        },\n        "readOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "writeOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "examples": {\n            "type": "array",\n            "items": true\n        }\n    }\n}')),gi.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/meta-data",{default:ri.metaData,deprecated:ri.metaData,description:ri.metaData,examples:ri.metaData,readOnly:ri.metaData,title:ri.metaData,writeOnly:ri.metaData}),$i.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/format-annotation",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/format-annotation": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Format vocabulary meta-schema for annotation results",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),gi.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/format-annotation",{format:ri.metaData}),$i.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/format-assertion",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/format-assertion": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Format vocabulary meta-schema for assertion results",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),$i.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/content",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/content": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Content vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "contentMediaType": { "type": "string" },\n        "contentEncoding": { "type": "string" },\n        "contentSchema": { "$dynamicRef": "#meta" }\n    }\n}')),gi.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/content",{contentEncoding:ri.metaData,contentMediaType:ri.metaData,contentSchema:ri.metaData}),$i.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/unevaluated",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/unevaluated": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Unevaluated applicator vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "unevaluatedItems": { "$dynamicRef": "#meta" },\n        "unevaluatedProperties": { "$dynamicRef": "#meta" }\n    }\n}')),gi.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/unevaluated",{unevaluatedItems:ri.unevaluatedItems,unevaluatedProperties:ri.unevaluatedProperties});const{Core:ji,Schema:Oi}=Dt,Ii="https://json-schema.org/draft/future/schema";Oi.setConfig(Ii,"baseToken","$id"),Oi.setConfig(Ii,"embeddedToken","$id"),Oi.setConfig(Ii,"anchorToken","$anchor"),Oi.setConfig(Ii,"dynamicAnchorToken","$dynamicAnchor"),Oi.setConfig(Ii,"vocabularyToken","$vocabulary"),Oi.setConfig(Ii,"mandatoryVocabularies",["https://json-schema.org/draft/future/vocab/core"]),Oi.add(JSON.parse('{\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$id": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/core": true,\n        "https://json-schema.org/draft/future/vocab/applicator": true,\n        "https://json-schema.org/draft/future/vocab/unevaluated": true,\n        "https://json-schema.org/draft/future/vocab/validation": true,\n        "https://json-schema.org/draft/future/vocab/meta-data": true,\n        "https://json-schema.org/draft/future/vocab/format-annotation": true,\n        "https://json-schema.org/draft/future/vocab/content": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Core and Validation specifications meta-schema",\n    "allOf": [\n        {"$ref": "meta/core"},\n        {"$ref": "meta/applicator"},\n        {"$ref": "meta/validation"},\n        {"$ref": "meta/meta-data"},\n        {"$ref": "meta/format-annotation"},\n        {"$ref": "meta/content"}\n    ],\n    "type": ["object", "boolean"],\n    "properties": {\n        "definitions": {\n            "$comment": "While no longer an official keyword as it is replaced by $defs, this keyword is retained in the meta-schema to prevent incompatible extensions as it remains in common use.",\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        },\n        "dependencies": {\n            "$comment": "\\"dependencies\\" is no longer a keyword, but schema authors should avoid redefining it to facilitate a smooth transition to \\"dependentSchemas\\" and \\"dependentRequired\\"",\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$dynamicRef": "#meta" },\n                    { "$ref": "meta/validation#/$defs/stringArray" }\n                ]\n            }\n        }\n    }\n}')),Oi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/core",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/core": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Core vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference",\n            "$comment": "Non-empty fragments not allowed.",\n            "pattern": "^[^#]*#?$"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$anchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z_][-A-Za-z0-9._]*$"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$dynamicRef": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$dynamicAnchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z_][-A-Za-z0-9._]*$"\n        },\n        "$vocabulary": {\n            "type": "object",\n            "propertyNames": {\n                "type": "string",\n                "format": "uri"\n            },\n            "additionalProperties": {\n                "type": "boolean"\n            }\n        },\n        "$comment": {\n            "type": "string"\n        },\n        "$defs": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        }\n    }\n}')),ji.defineVocabulary("https://json-schema.org/draft/future/vocab/core",{validate:ri.validate,$defs:ri.definitions,$dynamicRef:ri.dynamicRefFUTURE,$ref:ri.ref}),Oi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/applicator",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/applicator": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Applicator vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "prefixItems": { "$ref": "#/$defs/schemaArray" },\n        "items": { "$dynamicRef": "#meta" },\n        "contains": { "$dynamicRef": "#meta" },\n        "additionalProperties": { "$dynamicRef": "#meta" },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "propertyNames": { "format": "regex" },\n            "default": {}\n        },\n        "dependentSchemas": {\n            "type": "object",\n            "additionalProperties": {\n                "$dynamicRef": "#meta"\n            }\n        },\n        "propertyNames": { "$dynamicRef": "#meta" },\n        "if": { "$dynamicRef": "#meta" },\n        "then": { "$dynamicRef": "#meta" },\n        "else": { "$dynamicRef": "#meta" },\n        "allOf": { "$ref": "#/$defs/schemaArray" },\n        "anyOf": { "$ref": "#/$defs/schemaArray" },\n        "oneOf": { "$ref": "#/$defs/schemaArray" },\n        "not": { "$dynamicRef": "#meta" }\n    },\n    "$defs": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$dynamicRef": "#meta" }\n        }\n    }\n}')),ji.defineVocabulary("https://json-schema.org/draft/future/vocab/applicator",{additionalProperties:ri.additionalProperties6,allOf:ri.allOf,anyOf:ri.anyOf,contains:ri.containsMinContainsMaxContains,dependentSchemas:ri.dependentSchemas,if:ri.if,then:ri.then,else:ri.else,items:ri.items202012,not:ri.not,oneOf:ri.oneOf,patternProperties:ri.patternProperties,prefixItems:ri.tupleItems,properties:ri.properties,propertyNames:ri.propertyNames}),Oi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/validation",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/validation": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Validation vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minLength": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "maxItems": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minItems": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxContains": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minContains": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 1\n        },\n        "maxProperties": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/$defs/stringArray" },\n        "dependentRequired": {\n            "type": "object",\n            "additionalProperties": {\n                "$ref": "#/$defs/stringArray"\n            }\n        },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/$defs/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/$defs/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        }\n    },\n    "$defs": {\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 0\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    }\n}')),ji.defineVocabulary("https://json-schema.org/draft/future/vocab/validation",{const:ri.const,dependentRequired:ri.dependentRequired,enum:ri.enum,exclusiveMaximum:ri.exclusiveMaximum,exclusiveMinimum:ri.exclusiveMinimum,maxItems:ri.maxItems,maxLength:ri.maxLength6,maxProperties:ri.maxProperties,maximum:ri.maximum,minItems:ri.minItems,minLength:ri.minLength6,minProperties:ri.minProperties,minimum:ri.minimum,multipleOf:ri.multipleOf,pattern:ri.pattern,required:ri.required,type:ri.type,uniqueItems:ri.uniqueItems}),Oi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/meta-data",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/meta-data": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Meta-data vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": true,\n        "deprecated": {\n            "type": "boolean",\n            "default": false\n        },\n        "readOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "writeOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "examples": {\n            "type": "array",\n            "items": true\n        }\n    }\n}')),ji.defineVocabulary("https://json-schema.org/draft/future/vocab/meta-data",{default:ri.metaData,deprecated:ri.metaData,description:ri.metaData,examples:ri.metaData,readOnly:ri.metaData,title:ri.metaData,writeOnly:ri.metaData}),Oi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/format-annotation",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/format-annotation": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Format vocabulary meta-schema for annotation results",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),ji.defineVocabulary("https://json-schema.org/draft/future/vocab/format-annotation",{format:ri.metaData}),Oi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/format-assertion",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/format-assertion": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Format vocabulary meta-schema for assertion results",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),Oi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/content",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/content": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Content vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "contentMediaType": { "type": "string" },\n        "contentEncoding": { "type": "string" },\n        "contentSchema": { "$dynamicRef": "#meta" }\n    }\n}')),ji.defineVocabulary("https://json-schema.org/draft/future/vocab/content",{contentEncoding:ri.metaData,contentMediaType:ri.metaData,contentSchema:ri.metaData}),Oi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/unevaluated",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/unevaluated": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Unevaluated applicator vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "unevaluatedItems": { "$dynamicRef": "#meta" },\n        "unevaluatedProperties": { "$dynamicRef": "#meta" }\n    }\n}')),ji.defineVocabulary("https://json-schema.org/draft/future/vocab/unevaluated",{unevaluatedItems:ri.unevaluatedItems,unevaluatedProperties:ri.unevaluatedProperties});const{Core:Si,Schema:xi}=Dt;var wi={add:Si.add,get:xi.get,validate:Si.validate,compile:Si.compile,interpret:Si.interpret,setMetaOutputFormat:Si.setMetaOutputFormat,setShouldMetaValidate:Si.setShouldMetaValidate,FLAG:Si.FLAG,BASIC:Si.BASIC,DETAILED:Si.DETAILED,VERBOSE:Si.VERBOSE,Keywords:ri};wi.add,wi.get,wi.validate,wi.compile,wi.interpret,wi.setMetaOutputFormat,wi.setShouldMetaValidate,wi.FLAG,wi.BASIC,wi.DETAILED,wi.VERBOSE,wi.Keywords;const Ei='(?:\\\\["\\/\\\\brfnt]|\\\\u[0-9a-fA-F]{4}|[^"\\\\])',Pi=`"${Ei}*"`,Ai=`"${Ei}*"(?=\\s*:)`;var ki=_((function(e){var t,n;t=z,n=function(){var e=Object.prototype.hasOwnProperty,t=Object.prototype.toString,n="boolean"==typeof(new RegExp).sticky;function a(e){return e&&"[object RegExp]"===t.call(e)}function r(e){return e&&"object"==typeof e&&!a(e)&&!Array.isArray(e)}function i(e){return"("+e+")"}function o(e){return e.length?"(?:"+e.map((function(e){return"(?:"+e+")"})).join("|")+")":"(?!)"}function s(e){if("string"==typeof e)return"(?:"+e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")+")";if(a(e)){if(e.ignoreCase)throw new Error("RegExp /i flag not allowed");if(e.global)throw new Error("RegExp /g flag is implied");if(e.sticky)throw new Error("RegExp /y flag is implied");if(e.multiline)throw new Error("RegExp /m flag is implied");return e.source}throw new Error("Not a pattern: "+e)}function c(t,n){if(r(n)||(n={match:n}),n.include)throw new Error("Matching rules cannot also include states");var i={defaultType:t,lineBreaks:!!n.error||!!n.fallback,pop:!1,next:null,push:null,error:!1,fallback:!1,value:null,type:null,shouldThrow:!1};for(var o in n)e.call(n,o)&&(i[o]=n[o]);if("string"==typeof i.type&&t!==i.type)throw new Error("Type transform cannot be a string (type '"+i.type+"' for token '"+t+"')");var s=i.match;return i.match=Array.isArray(s)?s:s?[s]:[],i.match.sort((function(e,t){return a(e)&&a(t)?0:a(t)?-1:a(e)?1:t.length-e.length})),i}function l(e){return Array.isArray(e)?function(e){for(var t=[],n=0;n<e.length;n++){var a=e[n];if(a.include)for(var r=[].concat(a.include),i=0;i<r.length;i++)t.push({include:r[i]});else{if(!a.type)throw new Error("Rule has no type: "+JSON.stringify(a));t.push(c(a.type,a))}}return t}(e):function(e){for(var t=Object.getOwnPropertyNames(e),n=[],a=0;a<t.length;a++){var i=t[a],o=e[i],s=[].concat(o);if("include"!==i){var l=[];s.forEach((function(e){r(e)?(l.length&&n.push(c(i,l)),n.push(c(i,e)),l=[]):l.push(e)})),l.length&&n.push(c(i,l))}else for(var m=0;m<s.length;m++)n.push({include:s[m]})}return n}(e)}var m=c("error",{lineBreaks:!0,shouldThrow:!0});function p(e,t){for(var r=null,c=Object.create(null),l=!0,p=null,u=[],f=[],d=0;d<e.length;d++)e[d].fallback&&(l=!1);for(d=0;d<e.length;d++){var h=e[d];if(h.include)throw new Error("Inheritance is not allowed in stateless lexers");if(h.error||h.fallback){if(r)throw!h.fallback==!r.fallback?new Error("Multiple "+(h.fallback?"fallback":"error")+" rules not allowed (for token '"+h.defaultType+"')"):new Error("fallback and error are mutually exclusive (for token '"+h.defaultType+"')");r=h}var y=h.match.slice();if(l)for(;y.length&&"string"==typeof y[0]&&1===y[0].length;)c[y.shift().charCodeAt(0)]=h;if(h.pop||h.push||h.next){if(!t)throw new Error("State-switching options are not allowed in stateless lexers (for token '"+h.defaultType+"')");if(h.fallback)throw new Error("State-switching options are not allowed on fallback tokens (for token '"+h.defaultType+"')")}if(0!==y.length){l=!1,u.push(h);for(var v=0;v<y.length;v++){var g=y[v];if(a(g))if(null===p)p=g.unicode;else if(p!==g.unicode&&!1===h.fallback)throw new Error("If one rule is /u then all must be")}var $=o(y.map(s)),b=new RegExp($);if(b.test(""))throw new Error("RegExp matches empty string: "+b);if(new RegExp("|"+$).exec("").length-1>0)throw new Error("RegExp has capture groups: "+b+"\nUse (?: … ) instead");if(!h.lineBreaks&&b.test("\n"))throw new Error("Rule should declare lineBreaks: "+b);f.push(i($))}}var j=r&&r.fallback,O=n&&!j?"ym":"gm",I=n||j?"":"|";return!0===p&&(O+="u"),{regexp:new RegExp(o(f)+I,O),groups:u,fast:c,error:r||m}}function u(e,t,n){var a=e&&(e.push||e.next);if(a&&!n[a])throw new Error("Missing state '"+a+"' (in token '"+e.defaultType+"' of state '"+t+"')");if(e&&e.pop&&1!=+e.pop)throw new Error("pop must be 1 (in token '"+e.defaultType+"' of state '"+t+"')")}var f=function(e,t){this.startState=t,this.states=e,this.buffer="",this.stack=[],this.reset()};f.prototype.reset=function(e,t){return this.buffer=e||"",this.index=0,this.line=t?t.line:1,this.col=t?t.col:1,this.queuedToken=t?t.queuedToken:null,this.queuedThrow=t?t.queuedThrow:null,this.setState(t?t.state:this.startState),this.stack=t&&t.stack?t.stack.slice():[],this},f.prototype.save=function(){return{line:this.line,col:this.col,state:this.state,stack:this.stack.slice(),queuedToken:this.queuedToken,queuedThrow:this.queuedThrow}},f.prototype.setState=function(e){if(e&&this.state!==e){this.state=e;var t=this.states[e];this.groups=t.groups,this.error=t.error,this.re=t.regexp,this.fast=t.fast}},f.prototype.popState=function(){this.setState(this.stack.pop())},f.prototype.pushState=function(e){this.stack.push(this.state),this.setState(e)};var d=n?function(e,t){return e.exec(t)}:function(e,t){var n=e.exec(t);return 0===n[0].length?null:n};function h(){return this.value}if(f.prototype._getGroup=function(e){for(var t=this.groups.length,n=0;n<t;n++)if(void 0!==e[n+1])return this.groups[n];throw new Error("Cannot find token type for matched text")},f.prototype.next=function(){var e=this.index;if(this.queuedGroup){var t=this._token(this.queuedGroup,this.queuedText,e);return this.queuedGroup=null,this.queuedText="",t}var n=this.buffer;if(e!==n.length){if(o=this.fast[n.charCodeAt(e)])return this._token(o,n.charAt(e),e);var a=this.re;a.lastIndex=e;var r=d(a,n),i=this.error;if(null==r)return this._token(i,n.slice(e,n.length),e);var o=this._getGroup(r),s=r[0];return i.fallback&&r.index!==e?(this.queuedGroup=o,this.queuedText=s,this._token(i,n.slice(e,r.index),e)):this._token(o,s,e)}},f.prototype._token=function(e,t,n){var a=0;if(e.lineBreaks){var r=/\n/g,i=1;if("\n"===t)a=1;else for(;r.exec(t);)a++,i=r.lastIndex}var o={type:"function"==typeof e.type&&e.type(t)||e.defaultType,value:"function"==typeof e.value?e.value(t):t,text:t,toString:h,offset:n,lineBreaks:a,line:this.line,col:this.col},s=t.length;if(this.index+=s,this.line+=a,0!==a?this.col=s-i+1:this.col+=s,e.shouldThrow)throw new Error(this.formatError(o,"invalid syntax"));return e.pop?this.popState():e.push?this.pushState(e.push):e.next&&this.setState(e.next),o},"undefined"!=typeof Symbol&&Symbol.iterator){var y=function(e){this.lexer=e};y.prototype.next=function(){var e=this.lexer.next();return{value:e,done:!e}},y.prototype[Symbol.iterator]=function(){return this},f.prototype[Symbol.iterator]=function(){return new y(this)}}return f.prototype.formatError=function(e,t){if(null==e){var n=this.buffer.slice(this.index);e={text:n,offset:this.index,lineBreaks:-1===n.indexOf("\n")?0:1,line:this.line,col:this.col}}var a=Math.max(0,e.offset-e.col+1),r=e.lineBreaks?e.text.indexOf("\n"):e.text.length,i=this.buffer.substring(a,e.offset+r);return t+=" at line "+e.line+" col "+e.col+":\n\n",t+="  "+i+"\n",t+="  "+Array(e.col).join(" ")+"^"},f.prototype.clone=function(){return new f(this.states,this.state)},f.prototype.has=function(e){return!0},{compile:function(e){var t=p(l(e));return new f({start:t},"start")},states:function(e,t){var n=e.$all?l(e.$all):[];delete e.$all;var a=Object.getOwnPropertyNames(e);t||(t=a[0]);for(var r=Object.create(null),i=0;i<a.length;i++)r[$=a[i]]=l(e[$]).concat(n);for(i=0;i<a.length;i++)for(var o=r[$=a[i]],s=Object.create(null),c=0;c<o.length;c++){var m=o[c];if(m.include){var d=[c,1];if(m.include!==$&&!s[m.include]){s[m.include]=!0;var h=r[m.include];if(!h)throw new Error("Cannot include nonexistent state '"+m.include+"' (in state '"+$+"')");for(var y=0;y<h.length;y++){var v=h[y];-1===o.indexOf(v)&&d.push(v)}}o.splice.apply(o,d),c--}}var g=Object.create(null);for(i=0;i<a.length;i++){var $;g[$=a[i]]=p(r[$],!0)}for(i=0;i<a.length;i++){var b=a[i],j=g[b],O=j.groups;for(c=0;c<O.length;c++)u(O[c],b,g);var I=Object.getOwnPropertyNames(j.fast);for(c=0;c<I.length;c++)u(j.fast[I[c]],b,g)}return new f(g,t)},error:Object.freeze({error:!0}),fallback:Object.freeze({fallback:!0}),keywords:function(e){for(var t=Object.create(null),n=Object.create(null),a=Object.getOwnPropertyNames(e),r=0;r<a.length;r++){var i=a[r],o=e[i];(Array.isArray(o)?o:[o]).forEach((function(e){if((n[e.length]=n[e.length]||[]).push(e),"string"!=typeof e)throw new Error("keyword must be string (in keyword '"+i+"')");t[e]=i}))}function s(e){return JSON.stringify(e)}var c="";for(var l in c+="switch (value.length) {\n",n){var m=n[l];c+="case "+l+":\n",c+="switch (value) {\n",m.forEach((function(e){var n=t[e];c+="case "+s(e)+": return "+s(n)+"\n"})),c+="}\n"}return c+="}\n",Function("value",c)}}},e.exports?e.exports=n():t.moo=n()})).compile({WS:{match:/(?:(?:\r?\n)|[ \t])+/,lineBreaks:!0},punctuation:/[:,]/,number:new RegExp("-?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][-+][0-9]+)?"),property:new RegExp(Ai),string:new RegExp(Pi),grouping:["{","}","[","]"],boolean:["true","false"],null:["null"],other:/./});function Ni(e,t,n){const a=e.slice();return a[9]=t[n],a}function Ci(e,t,n){const a=e.slice();return a[12]=t[n],a[14]=n,a}function Ri(e){let t,n,f=e[14]+1+"";return{c(){t=a("div"),n=r(f),this.h()},l(e){t=i(e,"DIV",{class:!0});var a=o(t);n=s(a,f),a.forEach(c),this.h()},h(){l(t,"class","svelte-o0qsb5")},m(e,a){m(e,t,a),p(t,n)},p:u,d(e){e&&c(t)}}}function Ti(e){let t,n=e[9].value+"";return{c(){t=r(n)},l(e){t=s(e,n)},m(e,n){m(e,t,n)},p(e,a){16&a&&n!==(n=e[9].value+"")&&O(t,n)},d(e){e&&c(t)}}}function Di(e){let t,n,u=e[9].value+"";return{c(){t=a("span"),n=r(u),this.h()},l(e){t=i(e,"SPAN",{class:!0});var a=o(t);n=s(a,u),a.forEach(c),this.h()},h(){l(t,"class","null svelte-o0qsb5")},m(e,a){m(e,t,a),p(t,n)},p(e,t){16&t&&u!==(u=e[9].value+"")&&O(n,u)},d(e){e&&c(t)}}}function qi(e){let t,n,u=e[9].value+"";return{c(){t=a("span"),n=r(u),this.h()},l(e){t=i(e,"SPAN",{class:!0});var a=o(t);n=s(a,u),a.forEach(c),this.h()},h(){l(t,"class","boolean svelte-o0qsb5")},m(e,a){m(e,t,a),p(t,n)},p(e,t){16&t&&u!==(u=e[9].value+"")&&O(n,u)},d(e){e&&c(t)}}}function Mi(e){let t,n,u=e[9].value+"";return{c(){t=a("span"),n=r(u),this.h()},l(e){t=i(e,"SPAN",{class:!0});var a=o(t);n=s(a,u),a.forEach(c),this.h()},h(){l(t,"class","number svelte-o0qsb5")},m(e,a){m(e,t,a),p(t,n)},p(e,t){16&t&&u!==(u=e[9].value+"")&&O(n,u)},d(e){e&&c(t)}}}function Vi(e){let t,n,u,f,d=e[9].value.substring(1,e[9].value.length-1)+"";return{c(){t=r('"'),n=a("span"),u=r(d),f=r('"'),this.h()},l(e){t=s(e,'"'),n=i(e,"SPAN",{class:!0});var a=o(n);u=s(a,d),a.forEach(c),f=s(e,'"'),this.h()},h(){l(n,"class","string svelte-o0qsb5")},m(e,a){m(e,t,a),m(e,n,a),p(n,u),m(e,f,a)},p(e,t){16&t&&d!==(d=e[9].value.substring(1,e[9].value.length-1)+"")&&O(u,d)},d(e){e&&c(t),e&&c(n),e&&c(f)}}}function Li(e){let t,n,u,f,d=e[9].value.substring(1,e[9].value.length-1)+"";return{c(){t=r('"'),n=a("span"),u=r(d),f=r('"'),this.h()},l(e){t=s(e,'"'),n=i(e,"SPAN",{class:!0});var a=o(n);u=s(a,d),a.forEach(c),f=s(e,'"'),this.h()},h(){l(n,"class","property svelte-o0qsb5")},m(e,a){m(e,t,a),m(e,n,a),p(n,u),m(e,f,a)},p(e,t){16&t&&d!==(d=e[9].value.substring(1,e[9].value.length-1)+"")&&O(u,d)},d(e){e&&c(t),e&&c(n),e&&c(f)}}}function Ji(e){let t,n,u=e[9].value+"";return{c(){t=a("span"),n=r(u),this.h()},l(e){t=i(e,"SPAN",{class:!0});var a=o(t);n=s(a,u),a.forEach(c),this.h()},h(){l(t,"class","grouping svelte-o0qsb5")},m(e,a){m(e,t,a),p(t,n)},p(e,t){16&t&&u!==(u=e[9].value+"")&&O(n,u)},d(e){e&&c(t)}}}function zi(e){let t;function n(e,t){return"grouping"===e[9].type?Ji:"property"===e[9].type?Li:"string"===e[9].type?Vi:"number"===e[9].type?Mi:"boolean"===e[9].type?qi:"null"===e[9].type?Di:Ti}let a=n(e),r=a(e);return{c(){r.c(),t=f()},l(e){r.l(e),t=f()},m(e,n){r.m(e,n),m(e,t,n)},p(e,i){a===(a=n(e))&&r?r.p(e,i):(r.d(1),r=a(e),r&&(r.c(),r.m(t.parentNode,t)))},d(e){r.d(e),e&&c(t)}}}function _i(e){let t,n,r,s,f,b,j,O,I,S,x=[...Array(e[3])],w=[];for(let t=0;t<x.length;t+=1)w[t]=Ri(Ci(e,x,t));let E=e[4],P=[];for(let t=0;t<E.length;t+=1)P[t]=zi(Ni(e,E,t));return{c(){t=a("div"),n=a("div");for(let e=0;e<w.length;e+=1)w[e].c();r=d(),s=a("div"),f=a("pre");for(let e=0;e<P.length;e+=1)P[e].c();b=d(),j=a("textarea"),this.h()},l(e){t=i(e,"DIV",{class:!0});var a=o(t);n=i(a,"DIV",{class:!0});var l=o(n);for(let e=0;e<w.length;e+=1)w[e].l(l);l.forEach(c),r=h(a),s=i(a,"DIV",{class:!0});var m=o(s);f=i(m,"PRE",{class:!0});var p=o(f);for(let e=0;e<P.length;e+=1)P[e].l(p);p.forEach(c),b=h(m),j=i(m,"TEXTAREA",{class:!0,"aria-label":!0}),o(j).forEach(c),m.forEach(c),a.forEach(c),this.h()},h(){l(n,"class","line-numbers svelte-o0qsb5"),l(f,"class","highlighted svelte-o0qsb5"),l(j,"class","src svelte-o0qsb5"),l(j,"aria-label","Code Editor"),l(s,"class","editable svelte-o0qsb5"),l(t,"class",O="Editor "+e[1]+" svelte-o0qsb5")},m(a,i){m(a,t,i),p(t,n);for(let e=0;e<w.length;e+=1)w[e].m(n,null);p(t,r),p(t,s),p(s,f);for(let e=0;e<P.length;e+=1)P[e].m(f,null);p(s,b),p(s,j),e[7](j),y(j,e[0]),I||(S=[v(j,"input",e[8]),v(j,"input",e[6])],I=!0)},p(e,[a]){if(8&a){let t;for(x=[...Array(e[3])],t=0;t<x.length;t+=1){const r=Ci(e,x,t);w[t]?w[t].p(r,a):(w[t]=Ri(r),w[t].c(),w[t].m(n,null))}for(;t<w.length;t+=1)w[t].d(1);w.length=x.length}if(16&a){let t;for(E=e[4],t=0;t<E.length;t+=1){const n=Ni(e,E,t);P[t]?P[t].p(n,a):(P[t]=zi(n),P[t].c(),P[t].m(f,null))}for(;t<P.length;t+=1)P[t].d(1);P.length=E.length}1&a&&y(j,e[0]),2&a&&O!==(O="Editor "+e[1]+" svelte-o0qsb5")&&l(t,"class",O)},i:u,o:u,d(n){n&&c(t),g(w,n),g(P,n),e[7](null),I=!1,$(S)}}}function Ui(e,t,n){let a,r,i,{theme:o="solarized-dark"}=t,{value:s=""}=t;return e.$$set=e=>{"theme"in e&&n(1,o=e.theme),"value"in e&&n(0,s=e.value)},e.$$.update=()=>{1&e.$$.dirty&&n(3,a=(s.match(/\n/g)||[]).length+1),1&e.$$.dirty&&n(4,(ki.reset(s),r=Array.from(ki)))},[s,o,i,a,r,()=>{i.focus()},function(t){b(e,t)},function(e){j[e?"unshift":"push"]((()=>{i=e,n(2,i)}))},function(){s=this.value,n(0,s)}]}class Fi extends e{constructor(e){super(),t(this,e,Ui,_i,n,{theme:1,value:0,focus:5})}get focus(){return this.$$.ctx[5]}}function Bi(e,t,n){const a=e.slice();return a[16]=t[n],a[18]=n,a}function Ki(e){let t,n,u,f;function d(){return e[11](e[18])}return{c(){t=a("button"),n=r("×"),this.h()},l(e){t=i(e,"BUTTON",{class:!0});var a=o(t);n=s(a,"×"),a.forEach(c),this.h()},h(){l(t,"class","tab-close svelte-1ylgy73")},m(e,a){m(e,t,a),p(t,n),u||(f=v(t,"click",d),u=!0)},p(t,n){e=t},d(e){e&&c(t),u=!1,f()}}}function Gi(e){let t,n,u,f,y,g,$,b,j=e[16].label+"",S=!e[16].persistent&&e[0].length>e[5]&&Ki(e);function x(){return e[12](e[18])}return{c(){t=a("button"),n=a("span"),u=r(j),f=d(),S&&S.c(),this.h()},l(e){t=i(e,"BUTTON",{role:!0,id:!0,"aria-selected":!0,"aria-controls":!0,class:!0});var a=o(t);n=i(a,"SPAN",{class:!0});var r=o(n);u=s(r,j),r.forEach(c),f=h(a),S&&S.l(a),a.forEach(c),this.h()},h(){l(n,"class","tab-label svelte-1ylgy73"),l(t,"role","tab"),l(t,"id",y=`${e[2]}-tab-${e[18]}`),l(t,"aria-selected",g=e[18]===e[1]),l(t,"aria-controls","tabpanel"),l(t,"class","svelte-1ylgy73"),I(t,"active",e[18]===e[4])},m(e,a){m(e,t,a),p(t,n),p(n,u),p(t,f),S&&S.m(t,null),$||(b=v(t,"click",x),$=!0)},p(n,a){e=n,1&a&&j!==(j=e[16].label+"")&&O(u,j),!e[16].persistent&&e[0].length>e[5]?S?S.p(e,a):(S=Ki(e),S.c(),S.m(t,null)):S&&(S.d(1),S=null),4&a&&y!==(y=`${e[2]}-tab-${e[18]}`)&&l(t,"id",y),2&a&&g!==(g=e[18]===e[1])&&l(t,"aria-selected",g),16&a&&I(t,"active",e[18]===e[4])},d(e){e&&c(t),S&&S.d(),$=!1,b()}}}function Zi(e){let t,n,u,f,d,h;return{c(){t=a("button"),n=a("span"),u=r("+"),this.h()},l(e){t=i(e,"BUTTON",{role:!0,id:!0,class:!0});var a=o(t);n=i(a,"SPAN",{class:!0});var r=o(n);u=s(r,"+"),r.forEach(c),a.forEach(c),this.h()},h(){l(n,"class","tab-label svelte-1ylgy73"),l(t,"role","tab"),l(t,"id",f=`${e[2]}-tab-${e[0].length}`),l(t,"class","svelte-1ylgy73")},m(a,r){m(a,t,r),p(t,n),p(n,u),d||(h=v(t,"click",e[9]),d=!0)},p(e,n){5&n&&f!==(f=`${e[2]}-tab-${e[0].length}`)&&l(t,"id",f)},d(e){e&&c(t),d=!1,h()}}}function Hi(e){let t,n,r,s,u,f,y,v,$=e[0],b=[];for(let t=0;t<$.length;t+=1)b[t]=Gi(Bi(e,$,t));let O=e[3]&&Zi(e);function I(t){e[14](t)}let C={};return void 0!==e[0][e[1]].text&&(C.value=e[0][e[1]].text),u=new Fi({props:C}),e[13](u),j.push((()=>S(u,"value",I))),u.$on("input",e[15]),{c(){t=a("div");for(let e=0;e<b.length;e+=1)b[e].c();n=d(),O&&O.c(),r=d(),s=a("div"),x(u.$$.fragment),this.h()},l(e){t=i(e,"DIV",{role:!0,class:!0});var a=o(t);for(let e=0;e<b.length;e+=1)b[e].l(a);n=h(a),O&&O.l(a),a.forEach(c),r=h(e),s=i(e,"DIV",{role:!0,id:!0,"aria-labelledby":!0,class:!0});var l=o(s);w(u.$$.fragment,l),l.forEach(c),this.h()},h(){l(t,"role","tablist"),l(t,"class","svelte-1ylgy73"),l(s,"role","tabpanel"),l(s,"id","tabpanel"),l(s,"aria-labelledby",y=`${e[2]}-tab-${e[1]}`),l(s,"class","svelte-1ylgy73")},m(e,a){m(e,t,a);for(let e=0;e<b.length;e+=1)b[e].m(t,null);p(t,n),O&&O.m(t,null),m(e,r,a),m(e,s,a),E(u,s,null),v=!0},p(e,[a]){if(1335&a){let r;for($=e[0],r=0;r<$.length;r+=1){const i=Bi(e,$,r);b[r]?b[r].p(i,a):(b[r]=Gi(i),b[r].c(),b[r].m(t,n))}for(;r<b.length;r+=1)b[r].d(1);b.length=$.length}e[3]?O?O.p(e,a):(O=Zi(e),O.c(),O.m(t,null)):O&&(O.d(1),O=null);const r={};!f&&3&a&&(f=!0,r.value=e[0][e[1]].text,P((()=>f=!1))),u.$set(r),(!v||6&a&&y!==(y=`${e[2]}-tab-${e[1]}`))&&l(s,"aria-labelledby",y)},i(e){v||(A(u.$$.fragment,e),v=!0)},o(e){k(u.$$.fragment,e),v=!1},d(n){n&&c(t),g(b,n),O&&O.d(),n&&c(r),n&&c(s),e[13](null),N(u)}}}function Wi(e,t,n){let a,{ns:r=""}=t,{tabs:i=[]}=t,{newTab:o}=t,{active:s=0}=t,{selected:c=0}=t,{minTabs:l=1}=t;const m=C();function p(e){n(1,c=e),a.focus()}function u(e){c>=e&&c>0&&n(1,c-=1),i.splice(e,1),n(0,i),a.focus()}return e.$$set=e=>{"ns"in e&&n(2,r=e.ns),"tabs"in e&&n(0,i=e.tabs),"newTab"in e&&n(3,o=e.newTab),"active"in e&&n(4,s=e.active),"selected"in e&&n(1,c=e.selected),"minTabs"in e&&n(5,l=e.minTabs)},[i,c,r,o,s,l,a,m,p,function(){n(0,i[i.length]=o(),i),n(1,c=i.length-1),a.focus()},u,e=>u(e),e=>p(e),function(e){j[e?"unshift":"push"]((()=>{a=e,n(6,a)}))},function(t){e.$$.not_equal(i[c].text,t)&&(i[c].text=t,n(0,i))},e=>m("input",i)]}class Xi extends e{constructor(e){super(),t(this,e,Wi,Hi,n,{ns:2,tabs:0,newTab:3,active:4,selected:1,minTabs:5})}}function Qi(e,t,n){const a=e.slice();return a[2]=t[n],a}function Yi(e){let t;function n(e,t){return e[1].output?to:eo}let a=n(e),r=a(e);return{c(){r.c(),t=f()},l(e){r.l(e),t=f()},m(e,n){r.m(e,n),m(e,t,n)},p(e,i){a===(a=n(e))&&r?r.p(e,i):(r.d(1),r=a(e),r&&(r.c(),r.m(t.parentNode,t)))},d(e){r.d(e),e&&c(t)}}}function eo(e){let t,n=e[1]+"";return{c(){t=r(n)},l(e){t=s(e,n)},m(e,n){m(e,t,n)},p(e,a){1&a&&n!==(n=e[1]+"")&&O(t,n)},d(e){e&&c(t)}}}function to(e){let t,n,l=e[1].output.errors,p=[];for(let t=0;t<l.length;t+=1)p[t]=ao(Qi(e,l,t));return{c(){t=r("Invalid\n    "),n=a("ul");for(let e=0;e<p.length;e+=1)p[e].c()},l(e){t=s(e,"Invalid\n    "),n=i(e,"UL",{});var a=o(n);for(let e=0;e<p.length;e+=1)p[e].l(a);a.forEach(c)},m(e,a){m(e,t,a),m(e,n,a);for(let e=0;e<p.length;e+=1)p[e].m(n,null)},p(e,t){if(1&t){let a;for(l=e[1].output.errors,a=0;a<l.length;a+=1){const r=Qi(e,l,a);p[a]?p[a].p(r,t):(p[a]=ao(r),p[a].c(),p[a].m(n,null))}for(;a<p.length;a+=1)p[a].d(1);p.length=l.length}},d(e){e&&c(t),e&&c(n),g(p,e)}}}function no(e){let t,n,u,f,d,h,y=e[2].instanceLocation+"",v=e[2].absoluteKeywordLocation+"";return{c(){t=a("li"),n=a("code"),u=r(y),f=r(" fails schema constraint "),d=a("code"),h=r(v),this.h()},l(e){t=i(e,"LI",{class:!0});var a=o(t);n=i(a,"CODE",{class:!0});var r=o(n);u=s(r,y),r.forEach(c),f=s(a," fails schema constraint "),d=i(a,"CODE",{class:!0});var l=o(d);h=s(l,v),l.forEach(c),a.forEach(c),this.h()},h(){l(n,"class","svelte-1sdf2dp"),l(d,"class","svelte-1sdf2dp"),l(t,"class","svelte-1sdf2dp")},m(e,a){m(e,t,a),p(t,n),p(n,u),p(t,f),p(t,d),p(d,h)},p(e,t){1&t&&y!==(y=e[2].instanceLocation+"")&&O(u,y),1&t&&v!==(v=e[2].absoluteKeywordLocation+"")&&O(h,v)},d(e){e&&c(t)}}}function ao(e){let t,n=!e[2].valid&&!e[2].keyword.endsWith("#validate"),a=n&&no(e);return{c(){a&&a.c(),t=f()},l(e){a&&a.l(e),t=f()},m(e,n){a&&a.m(e,n),m(e,t,n)},p(e,r){1&r&&(n=!e[2].valid&&!e[2].keyword.endsWith("#validate")),n?a?a.p(e,r):(a=no(e),a.c(),a.m(t.parentNode,t)):a&&(a.d(1),a=null)},d(e){a&&a.d(e),e&&c(t)}}}function ro(e){let t,n=e[0]?"Valid":"";return{c(){t=r(n)},l(e){t=s(e,n)},m(e,n){m(e,t,n)},p(e,a){1&a&&n!==(n=e[0]?"Valid":"")&&O(t,n)},d(e){e&&c(t)}}}function io(e){let t;return{c(){t=r("Validating ...")},l(e){t=s(e,"Validating ...")},m(e,n){m(e,t,n)},p:u,d(e){e&&c(t)}}}function oo(e){let t,n,a={ctx:e,current:null,token:null,hasCatch:!0,pending:io,then:ro,catch:Yi,value:0,error:1};return R(n=e[0],a),{c(){t=f(),a.block.c()},l(e){t=f(),a.block.l(e)},m(e,n){m(e,t,n),a.block.m(e,a.anchor=n),a.mount=()=>t.parentNode,a.anchor=t},p(t,[r]){e=t,a.ctx=e,1&r&&n!==(n=e[0])&&R(n,a)||T(a,e,r)},i:u,o:u,d(e){e&&c(t),a.block.d(e),a.token=null,a=null}}}function so(e,t,n){let{results:a}=t;return e.$$set=e=>{"results"in e&&n(0,a=e.results)},[a]}class co extends e{constructor(e){super(),t(this,e,so,oo,n,{results:0})}}function lo(e){let t,n,r,s,u;const f=e[2].default,y=D(f,e,e[1],null);return{c(){t=a("a"),n=q("svg"),r=q("path"),s=d(),y&&y.c(),this.h()},l(e){t=i(e,"A",{href:!0,class:!0});var a=o(t);n=i(a,"svg",{height:!0,viewBox:!0,version:!0,"aria-hidden":!0,class:!0},1);var l=o(n);r=i(l,"path",{"fill-rule":!0,d:!0},1),o(r).forEach(c),l.forEach(c),s=h(a),y&&y.l(a),a.forEach(c),this.h()},h(){l(r,"fill-rule","evenodd"),l(r,"d","M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"),l(n,"height","1.5em"),l(n,"viewBox","0 0 16 16"),l(n,"version","1.1"),l(n,"aria-hidden","true"),l(n,"class","svelte-i8toq"),l(t,"href",e[0]),l(t,"class","svelte-i8toq")},m(e,a){m(e,t,a),p(t,n),p(n,r),p(t,s),y&&y.m(t,null),u=!0},p(e,[n]){y&&y.p&&(!u||2&n)&&M(y,f,e,e[1],n,null,null),(!u||1&n)&&l(t,"href",e[0])},i(e){u||(A(y,e),u=!0)},o(e){k(y,e),u=!1},d(e){e&&c(t),y&&y.d(e)}}}function mo(e,t,n){let{$$slots:a={},$$scope:r}=t,{href:i=""}=t;return e.$$set=e=>{"href"in e&&n(0,i=e.href),"$$scope"in e&&n(1,r=e.$$scope)},[i,r,a]}class po extends e{constructor(e){super(),t(this,e,mo,lo,n,{href:0})}}function uo(e){let t,n,r,s,u;const f=e[2].default,y=D(f,e,e[1],null);return{c(){t=a("a"),n=q("svg"),r=q("path"),s=d(),y&&y.c(),this.h()},l(e){t=i(e,"A",{href:!0,class:!0});var a=o(t);n=i(a,"svg",{height:!0,viewBox:!0,version:!0,"aria-hidden":!0,class:!0},1);var l=o(n);r=i(l,"path",{d:!0},1),o(r).forEach(c),l.forEach(c),s=h(a),y&&y.l(a),a.forEach(c),this.h()},h(){l(r,"d","M240,250h100v-50h100V0H240V250z M340,50h50v100h-50V50z M480,0v200h100V50h50v150h50V50h50v150h50V0H480z M0,200h100V50h50v150h50V0H0V200z"),l(n,"height","1em"),l(n,"viewBox","0 0 780 250"),l(n,"version","1.1"),l(n,"aria-hidden","true"),l(n,"class","svelte-wj8h0n"),l(t,"href",e[0]),l(t,"class","svelte-wj8h0n")},m(e,a){m(e,t,a),p(t,n),p(n,r),p(t,s),y&&y.m(t,null),u=!0},p(e,[n]){y&&y.p&&(!u||2&n)&&M(y,f,e,e[1],n,null,null),(!u||1&n)&&l(t,"href",e[0])},i(e){u||(A(y,e),u=!0)},o(e){k(y,e),u=!1},d(e){e&&c(t),y&&y.d(e)}}}function fo(e,t,n){let{$$slots:a={},$$scope:r}=t,{href:i=""}=t;return e.$$set=e=>{"href"in e&&n(0,i=e.href),"$$scope"in e&&n(1,r=e.$$scope)},[i,r,a]}class ho extends e{constructor(e){super(),t(this,e,fo,uo,n,{href:0})}}function yo(e){let t,n,r,s,u,f,y,v,g;const $=e[2].default,b=D($,e,e[1],null);return{c(){t=a("a"),n=q("svg"),r=q("g"),s=q("path"),u=q("path"),f=q("path"),y=q("path"),v=d(),b&&b.c(),this.h()},l(e){t=i(e,"A",{href:!0,class:!0});var a=o(t);n=i(a,"svg",{version:!0,viewBox:!0,height:!0,class:!0},1);var l=o(n);r=i(l,"g",{transform:!0,id:!0},1);var m=o(r);s=i(m,"path",{id:!0,d:!0,style:!0},1),o(s).forEach(c),u=i(m,"path",{id:!0,d:!0,style:!0},1),o(u).forEach(c),f=i(m,"path",{id:!0,d:!0,style:!0},1),o(f).forEach(c),y=i(m,"path",{id:!0,d:!0,style:!0},1),o(y).forEach(c),m.forEach(c),l.forEach(c),v=h(a),b&&b.l(a),a.forEach(c),this.h()},h(){l(s,"id","path4544"),l(s,"d","m 122.99401,114.18985 c -4.32897,-0.9404 -7.58044,-3.47848 -8.71251,-6.80095 -0.78921,-2.31618 -0.67682,-6.07238 0.33363,-11.150598 0.48507,-2.437836 0.88169,-5.347843 0.88139,-6.466688 -9.8e-4,-3.718098 -1.71106,-5.735418 -5.1001,-6.016462 l -1.9549,-0.162116 v -2.392655 -2.392657 l 1.85208,-0.250855 c 2.70243,-0.366031 3.74441,-1.02838 4.57629,-2.908984 0.61121,-1.381726 0.68884,-2.068648 0.50552,-4.472869 -0.11913,-1.562244 -0.53527,-4.348568 -0.92477,-6.191832 -0.98954,-4.682868 -0.94822,-8.485471 0.11707,-10.773163 1.56862,-3.368589 5.43705,-5.854553 9.93248,-6.382903 l 1.93299,-0.227185 v 2.518015 2.518015 h -1.29973 c -1.77186,0 -4.2497,1.262413 -4.8835,2.488054 -0.60797,1.175674 -0.65405,2.864146 -0.15834,5.802223 0.78343,4.643508 1.04707,9.098344 0.67592,11.421636 -0.42464,2.658142 -1.97477,5.796328 -3.6791,7.448236 l -1.18012,1.143813 1.61497,1.982752 c 1.99051,2.443801 2.76458,4.148744 3.24284,7.142561 0.37835,2.368341 0.0844,7.282673 -0.67072,11.213982 -1.05359,5.48514 0.1623,7.65141 4.66209,8.30613 l 1.67569,0.24382 v 2.44782 c 0,2.79211 0.17086,2.69708 -3.43917,1.91286 z"),V(s,"fill","stroke-width:0.35277775"),l(u,"id","path4546"),l(u,"d","m 152.2304,112.24932 v -2.42987 l 2.04969,-0.42336 c 2.26276,-0.46736 4.054,-1.8634 4.45842,-3.47475 0.1274,-0.50758 -0.11267,-3.16398 -0.53347,-5.90311 -1.37183,-8.929552 -0.6114,-13.537042 2.85482,-17.297452 l 1.48237,-1.60818 -1.1108,-1.26512 c -3.97855,-4.53132 -4.66885,-8.552208 -3.15364,-18.369547 0.76342,-4.946305 0.76409,-4.994322 0.087,-6.173611 -0.79713,-1.388278 -3.28385,-2.776033 -4.97438,-2.776033 h -1.15997 v -2.469445 c 0,-2.811057 -0.0583,-2.773846 3.24583,-2.072788 3.9645,0.841179 6.80448,2.853272 8.27787,5.864775 0.84544,1.728026 0.97275,2.400136 0.94911,5.010889 -0.015,1.658349 -0.35758,4.682054 -0.76125,6.719346 -1.49867,7.563594 -1.3651,9.576204 0.7654,11.532814 0.98915,0.90842 1.64012,1.17274 3.37032,1.36849 l 2.14439,0.24261 v 2.42387 2.42388 l -1.6757,7.1e-4 c -2.1517,7e-4 -3.9323,0.90924 -4.83869,2.46889 -0.95194,1.63803 -0.89239,5.20675 0.17364,10.40695 0.90648,4.421902 1.05253,8.458452 0.3882,10.728752 -0.70059,2.39406 -3.81995,5.29609 -6.74745,6.27718 -1.26118,0.42266 -2.96775,0.87096 -3.79236,0.99623 l -1.49931,0.22775 z"),V(u,"stroke-width","0.35277778"),l(f,"id","path4548"),l(f,"d","m 131.74239,108.26592 c -1.02163,-1.2988 -0.87294,-3.53652 0.38087,-5.73185 0.92776,-1.62446 4.80862,-6.948549 7.61066,-10.440949 l 1.13094,-1.40958 -1.80213,-5.22523 c -2.02147,-5.86123 -2.0098,-5.97467 0.65581,-6.37225 l 1.46834,-0.219 1.64076,3.3506 c 0.90242,1.84283 1.76982,3.35061 1.92755,3.35061 0.15774,0 1.77489,-1.75542 3.59368,-3.90092 3.15918,-3.72667 3.35688,-3.89165 4.42591,-3.69334 0.64552,0.11974 1.21858,0.0465 1.35432,-0.17316 0.31818,-0.51481 1.23083,0.24704 1.23083,1.02746 0,0.32009 -0.45438,1.13409 -1.00972,1.80888 -2.26771,2.75549 -7.10417,9.27155 -7.10417,9.5713 0,0.17685 0.97502,2.45302 2.16671,5.05816 l 2.1667,4.736609 -0.65823,0.98459 c -0.36203,0.54152 -0.66236,1.12603 -0.6674,1.29891 -0.005,0.17288 -0.27769,0.48371 -0.60588,0.69073 -0.83174,0.52464 -1.44656,-0.11541 -3.9894,-4.153119 -1.16417,-1.84856 -2.23163,-3.36491 -2.37215,-3.36967 -0.31309,-0.0106 -3.7911,5.131969 -6.47955,9.580639 -2.37093,3.92324 -1.93885,3.4204 -3.26614,3.80106 -0.95533,0.27398 -1.19348,0.19843 -1.79831,-0.57048 z"),V(f,"stroke-width","0.35277775"),l(y,"id","path4550"),l(y,"d","m 131.98567,83.677091 c -2.15148,-3.8472 -6.0183,-9.42829 -7.57842,-10.93815 -0.79252,-0.76698 -1.44094,-1.57494 -1.44094,-1.79546 0,-0.6016 1.61695,-1.21975 3.19058,-1.21975 1.69822,0 3.49597,1.47777 5.0997,4.19203 0.58208,0.98515 1.15641,1.79434 1.27629,1.79819 0.11988,0.004 0.80873,-1.65116 1.53078,-3.67779 1.5464,-4.34039 5.62351,-12.777999 7.22453,-14.951229 1.3726,-1.86316 3.42936,-2.865165 5.90274,-2.875676 3.23375,-0.01374 3.24268,0.130067 0.20474,3.296663 -4.63599,4.832327 -6.76321,8.809632 -11.25155,21.037252 -1.24637,3.39549 -2.39032,6.47895 -2.54212,6.85214 -0.23022,0.56597 -0.49833,0.28096 -1.61633,-1.71822 z"),V(y,"stroke-width","0.35277775"),l(r,"transform","translate(-104.22785,-45.507923)"),l(r,"id","layer1"),l(n,"version","1.1"),l(n,"viewBox","0 0 70.423268 70.42326"),l(n,"height","1.25em"),l(n,"class","svelte-27u907"),l(t,"href",e[0]),l(t,"class","svelte-27u907")},m(e,a){m(e,t,a),p(t,n),p(n,r),p(r,s),p(r,u),p(r,f),p(r,y),p(t,v),b&&b.m(t,null),g=!0},p(e,[n]){b&&b.p&&(!g||2&n)&&M(b,$,e,e[1],n,null,null),(!g||1&n)&&l(t,"href",e[0])},i(e){g||(A(b,e),g=!0)},o(e){k(b,e),g=!1},d(e){e&&c(t),b&&b.d(e)}}}function vo(e,t,n){let{$$slots:a={},$$scope:r}=t,{href:i=""}=t;return e.$$set=e=>{"href"in e&&n(0,i=e.href),"$$scope"in e&&n(1,r=e.$$scope)},[i,r,a]}class go extends e{constructor(e){super(),t(this,e,vo,yo,n,{href:0})}}function $o(e){let t;return{c(){t=r("hyperjump-io/json-schema.hyperjump.io")},l(e){t=s(e,"hyperjump-io/json-schema.hyperjump.io")},m(e,n){m(e,t,n)},d(e){e&&c(t)}}}function bo(e){let t;return{c(){t=r("hyperjump-io/json-schema-validator")},l(e){t=s(e,"hyperjump-io/json-schema-validator")},m(e,n){m(e,t,n)},d(e){e&&c(t)}}}function jo(e){let t;return{c(){t=r("@hyperjump/json-schema")},l(e){t=s(e,"@hyperjump/json-schema")},m(e,n){m(e,t,n)},d(e){e&&c(t)}}}function Oo(e){let t;return{c(){t=r("@hyperjump/json-schema-core")},l(e){t=s(e,"@hyperjump/json-schema-core")},m(e,n){m(e,t,n)},d(e){e&&c(t)}}}function Io(e){let t;return{c(){t=r("JSON Schema")},l(e){t=s(e,"JSON Schema")},m(e,n){m(e,t,n)},d(e){e&&c(t)}}}function So(e){let t,n,r,s,u,f,y,v,g,$,b,j,O,I,S,P,C;return s=new po({props:{href:"https://github.com/hyperjump-io/json-schema.hyperjump.io",$$slots:{default:[$o]},$$scope:{ctx:e}}}),y=new po({props:{href:"https://github.com/hyperjump-io/json-schema-validator",$$slots:{default:[bo]},$$scope:{ctx:e}}}),$=new ho({props:{href:"https://www.npmjs.com/package/@hyperjump/json-schema",$$slots:{default:[jo]},$$scope:{ctx:e}}}),O=new ho({props:{href:"https://www.npmjs.com/package/@hyperjump/json-schema-core",$$slots:{default:[Oo]},$$scope:{ctx:e}}}),P=new go({props:{href:"https://json-schema.org",$$slots:{default:[Io]},$$scope:{ctx:e}}}),{c(){t=a("footer"),n=a("ul"),r=a("li"),x(s.$$.fragment),u=d(),f=a("li"),x(y.$$.fragment),v=d(),g=a("li"),x($.$$.fragment),b=d(),j=a("li"),x(O.$$.fragment),I=d(),S=a("li"),x(P.$$.fragment),this.h()},l(e){t=i(e,"FOOTER",{class:!0});var a=o(t);n=i(a,"UL",{class:!0});var l=o(n);r=i(l,"LI",{class:!0});var m=o(r);w(s.$$.fragment,m),m.forEach(c),u=h(l),f=i(l,"LI",{class:!0});var p=o(f);w(y.$$.fragment,p),p.forEach(c),v=h(l),g=i(l,"LI",{class:!0});var d=o(g);w($.$$.fragment,d),d.forEach(c),b=h(l),j=i(l,"LI",{class:!0});var x=o(j);w(O.$$.fragment,x),x.forEach(c),I=h(l),S=i(l,"LI",{class:!0});var E=o(S);w(P.$$.fragment,E),E.forEach(c),l.forEach(c),a.forEach(c),this.h()},h(){l(r,"class","svelte-17tbtsq"),l(f,"class","svelte-17tbtsq"),l(g,"class","svelte-17tbtsq"),l(j,"class","svelte-17tbtsq"),l(S,"class","svelte-17tbtsq"),l(n,"class","links svelte-17tbtsq"),l(t,"class","svelte-17tbtsq")},m(e,a){m(e,t,a),p(t,n),p(n,r),E(s,r,null),p(n,u),p(n,f),E(y,f,null),p(n,v),p(n,g),E($,g,null),p(n,b),p(n,j),E(O,j,null),p(n,I),p(n,S),E(P,S,null),C=!0},p(e,[t]){const n={};1&t&&(n.$$scope={dirty:t,ctx:e}),s.$set(n);const a={};1&t&&(a.$$scope={dirty:t,ctx:e}),y.$set(a);const r={};1&t&&(r.$$scope={dirty:t,ctx:e}),$.$set(r);const i={};1&t&&(i.$$scope={dirty:t,ctx:e}),O.$set(i);const o={};1&t&&(o.$$scope={dirty:t,ctx:e}),P.$set(o)},i(e){C||(A(s.$$.fragment,e),A(y.$$.fragment,e),A($.$$.fragment,e),A(O.$$.fragment,e),A(P.$$.fragment,e),C=!0)},o(e){k(s.$$.fragment,e),k(y.$$.fragment,e),k($.$$.fragment,e),k(O.$$.fragment,e),k(P.$$.fragment,e),C=!1},d(e){e&&c(t),N(s),N(y),N($),N(O),N(P)}}}class xo extends e{constructor(e){super(),t(this,e,null,So,n,{})}}const{Core:wo,Keywords:Eo,Schema:Po}=Dt;Po.add(JSON.parse('{\n    "$id": "https://spec.openapis.org/oas/3.1/dialect/base",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/core": true,\n        "https://json-schema.org/draft/2020-12/vocab/applicator": true,\n        "https://json-schema.org/draft/2020-12/vocab/unevaluated": true,\n        "https://json-schema.org/draft/2020-12/vocab/validation": true,\n        "https://json-schema.org/draft/2020-12/vocab/meta-data": true,\n        "https://json-schema.org/draft/2020-12/vocab/format-annotation": true,\n        "https://json-schema.org/draft/2020-12/vocab/content": true,\n        "https://spec.openapis.org/oas/3.1/vocab/base": false\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "OpenAPI 3.1 Schema Object Dialect",\n    "allOf": [\n        { "$ref": "https://json-schema.org/draft/2020-12/schema" },\n        { "$ref": "https://spec.openapis.org/oas/3.1/meta/base" }\n    ]\n}')),Po.add(JSON.parse('{\n    "$id": "https://spec.openapis.org/oas/3.1/meta/base",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://spec.openapis.org/oas/3.1/vocab/base": true\n    },\n    "$dynamicAnchor": "meta",\n    "title": "OAS Base vocabulary",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "example": true,\n        "discriminator": { "$ref": "#/$defs/discriminator" },\n        "externalDocs": { "$ref": "#/$defs/external-docs" },\n        "xml": { "$ref": "#/$defs/xml" }\n    },\n    "$defs": {\n        "extensible": {\n            "patternProperties": {\n                "^x-": true\n            }\n        },\n        "discriminator": {\n            "$ref": "#/$defs/extensible",\n            "type": "object",\n            "properties": {\n                "propertyName": {\n                    "type": "string"\n                },\n                "mapping": {\n                    "type": "object",\n                    "additionalProperties": {\n                        "type": "string"\n                    }\n                }\n            },\n            "required": ["propertyName"],\n            "unevaluatedProperties": false\n        },\n        "external-docs": {\n            "$ref": "#/$defs/extensible",\n            "type": "object",\n            "properties": {\n                "url": {\n                    "type": "string",\n                    "format": "uri-reference"\n                },\n                "description": {\n                    "type": "string"\n                }\n            },\n            "required": ["url"],\n            "unevaluatedProperties": false\n        },\n        "xml": {\n            "$ref": "#/$defs/extensible",\n            "type": "object",\n            "properties": {\n                "name": {\n                    "type": "string"\n                },\n                "namespace": {\n                    "type": "string",\n                    "format": "uri"\n                },\n                "prefix": {\n                    "type": "string"\n                },\n                "attribute": {\n                    "type": "boolean"\n                },\n                "wrapped": {\n                    "type": "boolean"\n                }\n            },\n            "unevaluatedProperties": false\n        }\n    }\n}')),wo.defineVocabulary("https://spec.openapis.org/oas/3.1/vocab/extensions",{example:Eo.metaData,discriminator:Eo.metaData,externalDocs:Eo.metaData,xml:Eo.metaData});const{Core:Ao,Schema:ko}=Dt;Ao.add,ko.get,Ao.validate,Ao.setMetaOutputFormat,Ao.setShouldMetaValidate,Ao.FLAG,Ao.BASIC,Ao.DETAILED,Ao.VERBOSE;const{Core:No,Schema:Co,Instance:Ro}=Dt;var To={compile:async(e,t,n)=>{const a=await Co.step("items",n),r=Co.typeOf(a,"array")?Co.length(a):Number.MAX_SAFE_INTEGER;return Co.typeOf(e,"boolean")?[r,Co.value(e)]:[r,await No.compileSchema(e,t)]},interpret:([e,t],n,a,r)=>!Ro.typeOf(n,"array")||("string"==typeof t?Ro.every(((n,i)=>i<e||No.interpretSchema(t,n,a,r)),n):Ro.every(((n,a)=>a<e||t),n))};const{Core:Do,Schema:qo,Instance:Mo}=Dt,Vo=([e,t],n,a,r)=>!Mo.typeOf(n,"array")||Mo.every(((n,i)=>i<e||Do.interpretSchema(t,n,a,r)),n);var Lo={compile:async(e,t,n)=>{const a=await qo.step("items",n);return[qo.typeOf(a,"array")?qo.length(a):Number.MAX_SAFE_INTEGER,await Do.compileSchema(e,t)]},interpret:Vo,collectEvaluatedItems:(e,t,n,a)=>Vo(e,t,n,a)&&new Set(Mo.map(((e,t)=>t),t))};const{Core:Jo,Schema:zo,Instance:_o}=Dt;var Uo={compile:async(e,t,n)=>{const a=await zo.step("properties",n),r=zo.typeOf(a,"object")?zo.keys(a):[],i=await zo.step("patternProperties",n),o=zo.typeOf(i,"object")?zo.keys(i).map((e=>new RegExp(e))):[];return zo.typeOf(e,"boolean")?[r,o,zo.value(e)]:[r,o,await Jo.compileSchema(e,t)]},interpret:([e,t,n],a,r,i)=>{if(!_o.typeOf(a,"object"))return!0;const o=_o.entries(a).filter((([n])=>!e.includes(n)&&!t.some((e=>e.test(n)))));return"string"==typeof n?o.every((([,e])=>Jo.interpretSchema(n,e,r,i))):0===o.length||n}};const{Core:Fo,Schema:Bo,Instance:Ko}=Dt,Go=([e,t,n],a,r,i)=>!Ko.typeOf(a,"object")||Ko.entries(a).filter((([n])=>!e.includes(n)&&!t.some((e=>e.test(n))))).every((([,e])=>Fo.interpretSchema(n,e,r,i)));var Zo={compile:async(e,t,n)=>{const a=await Bo.step("properties",n),r=Bo.typeOf(a,"object")?Bo.keys(a):[],i=await Bo.step("patternProperties",n);return[r,Bo.typeOf(i,"object")?Bo.keys(i).map((e=>new RegExp(e))):[],await Fo.compileSchema(e,t)]},interpret:Go,collectEvaluatedProperties:(e,t,n,a)=>Go(e,t,n,a)&&[new RegExp("")]};const{Core:Ho,Schema:Wo}=Dt;var Xo={compile:(e,t)=>Ue.pipeline([Wo.map((async e=>Ho.compileSchema(await e,t))),Ue.all],e),interpret:(e,t,n,a)=>e.every((e=>Ho.interpretSchema(e,t,n,a))),collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,r)=>{const i=e&&Ho.collectEvaluatedProperties(r,t,n,a);return!1!==i&&[...e,...i]}),[]),collectEvaluatedItems:(e,t,n,a)=>e.reduce(((e,r)=>{const i=!1!==e&&Ho.collectEvaluatedItems(r,t,n,a);return!1!==i&&new Set([...e,...i])}),new Set)};const{Core:Qo,Schema:Yo}=Dt;var es={compile:(e,t)=>Ue.pipeline([Yo.map((async e=>Qo.compileSchema(await e,t))),Ue.all],e),interpret:(e,t,n,a)=>e.filter((e=>Qo.interpretSchema(e,t,n,a))).length>0,collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,r)=>{const i=Qo.collectEvaluatedProperties(r,t,n,a);return!1!==i?[...e||[],...i]:e}),!1),collectEvaluatedItems:(e,t,n,a)=>e.reduce(((e,r)=>{const i=Qo.collectEvaluatedItems(r,t,n,a);return!1!==i?new Set([...e||[],...i]):e}),!1)};const{Schema:ts,Instance:ns}=Dt;var as={compile:e=>mn(ts.value(e)),interpret:(e,t)=>mn(ns.value(t))===e};const{Core:rs,Instance:is}=Dt;var os={compile:(e,t)=>rs.compileSchema(e,t),interpret:(e,t,n,a)=>!is.typeOf(t,"array")||is.some((t=>rs.interpretSchema(e,t,n,a)),t)};const{Core:ss,Schema:cs,Instance:ls}=Dt,ms=({contains:e,minContains:t,maxContains:n},a,r,i)=>{if(!ls.typeOf(a,"array"))return!0;const o=ls.reduce(((t,n)=>ss.interpretSchema(e,n,r,i)?t+1:t),0,a);return o>=t&&o<=n};var ps={compile:async(e,t,n)=>{const a=await ss.compileSchema(e,t),r=await cs.step("minContains",n),i=cs.typeOf(r,"number")?cs.value(r):1,o=await cs.step("maxContains",n);return{contains:a,minContains:i,maxContains:cs.typeOf(o,"number")?cs.value(o):Number.MAX_SAFE_INTEGER}},interpret:ms,collectEvaluatedItems:(e,t,n,a)=>ms(e)&&ls.reduce(((t,r,i)=>ss.interpretSchema(e.contains,r,n,a)?t.add(i):t),new Set,t)};const{Core:us,Schema:fs}=Dt;var ds={compile:async(e,t)=>{await Ue.pipeline([fs.entries,Ue.map((([,e])=>us.compileSchema(e,t))),Ue.all],e)},interpret:()=>!0};const{Core:hs,Schema:ys,Instance:vs}=Dt;var gs={compile:(e,t)=>Ue.pipeline([ys.entries,Ue.map((async([e,n])=>[e,ys.typeOf(n,"array")?ys.value(n):await hs.compileSchema(n,t)])),Ue.all],e),interpret:(e,t,n,a)=>{const r=vs.value(t);return!vs.typeOf(t,"object")||e.every((([e,i])=>!(e in r)||(Array.isArray(i)?i.every((e=>e in r)):hs.interpretSchema(i,t,n,a))))}};const{Schema:$s,Instance:bs}=Dt;var js={compile:e=>Ue.pipeline([$s.entries,Ue.map((([e,t])=>[e,$s.value(t)])),Ue.all],e),interpret:(e,t)=>{const n=bs.value(t);return!bs.typeOf(t,"object")||e.every((([e,t])=>!(e in n)||t.every((e=>e in n))))}};const{Core:Os,Schema:Is,Instance:Ss}=Dt;var xs={compile:(e,t)=>Ue.pipeline([Is.entries,Ue.map((async([e,n])=>[e,await Os.compileSchema(n,t)])),Ue.all],e),interpret:(e,t,n,a)=>{const r=Ss.value(t);return!Ss.typeOf(t,"object")||e.every((([e,i])=>!(e in r)||Os.interpretSchema(i,t,n,a)))},collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,[r,i])=>{if(!e||!Ss.has(r,t))return e;const o=Os.collectEvaluatedProperties(i,t,n,a);return!1!==o&&e.concat(o)}),[])};const{Core:ws,Schema:Es}=Dt,{safeResolveUrl:Ps,splitUrl:As}=X;var ks={compile:e=>{const t=Ps(e.id,Es.value(e));return As(t)},interpret:([e,t],n,a,r)=>{const i=t in a.metaData[e].dynamicAnchors?r[t]:e,o=Es.getAnchorPointer(a.metaData[i],t);return ws.interpretSchema(`${i}#${o}`,n,a,r)},collectEvaluatedProperties:ws.collectEvaluatedProperties,collectEvaluatedItems:ws.collectEvaluatedItems};const{Core:Ns,Schema:Cs}=Dt,{safeResolveUrl:Rs,splitUrl:Ts}=X;var Ds={compile:e=>Ts(Cs.value(e)),interpret:([e,t],n,a,r)=>{if(!(t in r))throw Error(`No dynamic anchor found for "${t}"`);const i=Rs(r[t],e),o=Cs.getAnchorPointer(a.metaData[i],t);return Ns.interpretSchema(`${i}#${o}`,n,a,r)},collectEvaluatedProperties:Ns.collectEvaluatedProperties,collectEvaluatedItems:Ns.collectEvaluatedItems};const{Schema:qs,Instance:Ms}=Dt;var Vs={compile:e=>qs.value(e).map(mn),interpret:(e,t)=>e.some((e=>mn(Ms.value(t))===e))};const{Schema:Ls,Instance:Js}=Dt;var zs={compile:async e=>Ls.value(e),interpret:(e,t)=>!Js.typeOf(t,"number")||Js.value(t)<e};const{Schema:_s,Instance:Us}=Dt;var Fs={compile:async e=>_s.value(e),interpret:(e,t)=>!Us.typeOf(t,"number")||Us.value(t)>e};const{Core:Bs}=Dt;var Ks={compile:(e,t)=>Bs.compileSchema(e,t),interpret:(e,t,n,a)=>(Bs.interpretSchema(e,t,n,a),!0)};const{Core:Gs,Schema:Zs}=Dt,Hs=(e,t,n,a)=>{const r=n[e][2];return"boolean"==typeof r?r:r.every((([e,,r])=>Gs.getKeyword(e).interpret(r,t,n,a)))};var Ws={compile:async(e,t,n)=>{if(Zs.has("if",n)){const a=await Zs.step("if",n);return[await Gs.compileSchema(a,t),await Gs.compileSchema(e,t)]}return[]},interpret:([e,t],n,a,r)=>void 0===e||!Hs(e,n,a,r)||Gs.interpretSchema(t,n,a,r),collectEvaluatedProperties:([e,t],n,a,r)=>{if(void 0===e)return[];const i=Gs.collectEvaluatedProperties(e,n,a,r);if(!1===i)return[];const o=Gs.collectEvaluatedProperties(t,n,a,r);return!1!==o&&[...i,...o]},collectEvaluatedItems:([e,t],n,a,r)=>{if(void 0===e)return new Set;const i=Gs.collectEvaluatedItems(e,n,a,r);if(!1===i)return new Set;const o=Gs.collectEvaluatedItems(t,n,a,r);return!1!==o&&new Set([...i,...o])}};const{Core:Xs,Schema:Qs}=Dt,Ys=(e,t,n,a)=>{const r=n[e][2];return"boolean"==typeof r?r:r.every((([e,,r])=>Xs.getKeyword(e).interpret(r,t,n,a)))};var ec={compile:async(e,t,n)=>{if(Qs.has("if",n)){const a=await Qs.step("if",n);return[await Xs.compileSchema(a,t),await Xs.compileSchema(e,t)]}return[]},interpret:([e,t],n,a,r)=>void 0===e||Ys(e,n,a,r)||Xs.interpretSchema(t,n,a,r),collectEvaluatedProperties:([e,t],n,a,r)=>void 0===e||!1!==Xs.collectEvaluatedProperties(e,n,a,r)?[]:Xs.collectEvaluatedProperties(t,n,a,r),collectEvaluatedItems:([e,t],n,a,r)=>void 0===e||!1!==Xs.collectEvaluatedItems(e,n,a,r)?new Set:Xs.collectEvaluatedItems(t,n,a,r)};const{Core:tc,Schema:nc,Instance:ac}=Dt,rc=(e,t,n,a)=>!ac.typeOf(t,"array")||("string"==typeof e?ac.every((t=>tc.interpretSchema(e,t,n,a)),t):ac.every(((t,r)=>!(r in e)||tc.interpretSchema(e[r],t,n,a)),t));var ic={compile:(e,t)=>nc.typeOf(e,"array")?Ue.pipeline([nc.map((e=>tc.compileSchema(e,t))),Ue.all],e):tc.compileSchema(e,t),interpret:rc,collectEvaluatedItems:(e,t,n,a)=>rc(e,t,n,a)&&("string"==typeof e?new Set(ac.map(((e,t)=>t),t)):new Set(e.map(((e,t)=>t))))};const{Core:oc,Schema:sc,Instance:cc}=Dt,lc=([e,t],n,a,r)=>!cc.typeOf(n,"array")||cc.every(((n,i)=>i<e||oc.interpretSchema(t,n,a,r)),n);var mc={compile:async(e,t,n)=>{const a=await sc.step("prefixItems",n);return[sc.typeOf(a,"array")?sc.length(a):0,await oc.compileSchema(e,t)]},interpret:lc,collectEvaluatedItems:(e,t,n,a)=>lc(e,t,n,a)&&new Set(cc.map(((e,t)=>t),t))};const{Schema:pc,Instance:uc}=Dt;var fc={compile:e=>pc.value(e),interpret:(e,t)=>!uc.typeOf(t,"array")||uc.length(t)<=e};const{Schema:dc,Instance:hc}=Dt;var yc={compile:e=>dc.value(e),interpret:(e,t)=>!hc.typeOf(t,"string")||hc.length(t)<=e};const{Schema:vc,Instance:gc}=Dt;var $c={compile:e=>vc.value(e),interpret:(e,t)=>!gc.typeOf(t,"string")||[...gc.value(t)].length<=e};const{Schema:bc,Instance:jc}=Dt;var Oc={compile:e=>bc.value(e),interpret:(e,t)=>!jc.typeOf(t,"object")||jc.keys(t).length<=e};const{Schema:Ic,Instance:Sc}=Dt;var xc={compile:async(e,t,n)=>{const a=await Ic.step("exclusiveMaximum",n),r=Ic.value(a);return[Ic.value(e),r]},interpret:([e,t],n)=>{if(!Sc.typeOf(n,"number"))return!0;const a=Sc.value(n);return t?a<e:a<=e}};const{Schema:wc,Instance:Ec}=Dt;var Pc={compile:async e=>wc.value(e),interpret:(e,t)=>!Ec.typeOf(t,"number")||Ec.value(t)<=e};const{Schema:Ac,Instance:kc}=Dt;var Nc={compile:e=>Ac.value(e),interpret:(e,t)=>!kc.typeOf(t,"array")||kc.length(t)>=e};const{Schema:Cc,Instance:Rc}=Dt;var Tc={compile:e=>Cc.value(e),interpret:(e,t)=>!Rc.typeOf(t,"string")||Rc.value(t).length>=e};const{Schema:Dc,Instance:qc}=Dt;var Mc={compile:e=>Dc.value(e),interpret:(e,t)=>!qc.typeOf(t,"string")||[...qc.value(t)].length>=e};const{Schema:Vc,Instance:Lc}=Dt;var Jc={compile:e=>Vc.value(e),interpret:(e,t)=>{const n=Lc.value(t);return!Lc.typeOf(t,"object")||Object.keys(n).length>=e}};const{Schema:zc,Instance:_c}=Dt;var Uc={compile:async(e,t,n)=>{const a=await zc.step("exclusiveMinimum",n),r=zc.value(a);return[zc.value(e),r]},interpret:([e,t],n)=>{if(!_c.typeOf(n,"number"))return!0;const a=_c.value(n);return t?a>e:a>=e}};const{Schema:Fc,Instance:Bc}=Dt;var Kc={compile:async e=>Fc.value(e),interpret:(e,t)=>!Bc.typeOf(t,"number")||Bc.value(t)>=e};const{Schema:Gc,Instance:Zc}=Dt,Hc=(e,t)=>Math.abs(e-t)<1.1920929e-7;var Wc={compile:e=>Gc.value(e),interpret:(e,t)=>{if(!Zc.typeOf(t,"number"))return!0;const n=Zc.value(t)%e;return Hc(0,n)||Hc(e,n)}};const{Core:Xc}=Dt;var Qc={compile:Xc.compileSchema,interpret:(e,t,n,a)=>!Xc.interpretSchema(e,t,n,a)};const{Core:Yc,Schema:el}=Dt;var tl={compile:(e,t)=>Ue.pipeline([el.map((async e=>Yc.compileSchema(await e,t))),Ue.all],e),interpret:(e,t,n,a)=>{let r=0;for(const i of e)if(Yc.interpretSchema(i,t,n,a)&&r++,r>1)break;return 1===r},collectEvaluatedProperties:(e,t,n,a)=>{let r=0;return e.reduce(((e,i)=>{if(r>1)return!1;const o=Yc.collectEvaluatedProperties(i,t,n,a);return o?0==r++&&o:e}),!1)},collectEvaluatedItems:(e,t,n,a)=>{let r=0;return e.reduce(((e,i)=>{if(r>1)return!1;const o=Yc.collectEvaluatedItems(i,t,n,a);return o?0==r++&&o:e}),!1)}};const{Schema:nl,Instance:al}=Dt;var rl={compile:e=>new RegExp(nl.value(e),"u"),interpret:(e,t)=>!al.typeOf(t,"string")||e.test(al.value(t))};const{Core:il,Schema:ol,Instance:sl}=Dt,cl=(e,t,n,a)=>!sl.typeOf(t,"object")||e.every((([e,r])=>sl.entries(t).filter((([t])=>e.test(t))).every((([,e])=>il.interpretSchema(r,e,n,a)))));var ll={compile:(e,t)=>Ue.pipeline([ol.entries,Ue.map((async([e,n])=>[new RegExp(e,"u"),await il.compileSchema(n,t)])),Ue.all],e),interpret:cl,collectEvaluatedProperties:(e,t,n,a)=>cl(e,t,n,a)&&e.map((([e])=>e))};var ml={isObject:e=>"object"==typeof e&&!Array.isArray(e)&&null!==e,escapeRegExp:e=>e.replace(/[.*+\-?^${}()|[\]\\]/g,"\\$&")};const{Core:pl,Schema:ul,Instance:fl}=Dt,{escapeRegExp:dl}=ml,hl=(e,t,n,a)=>!fl.typeOf(t,"object")||fl.entries(t).filter((([t])=>t in e)).every((([t,r])=>pl.interpretSchema(e[t],r,n,a)));var yl={compile:(e,t)=>Ue.pipeline([ul.entries,Ue.reduce((async(e,[n,a])=>(e[n]=await pl.compileSchema(a,t),e)),Object.create(null))],e),interpret:hl,collectEvaluatedProperties:(e,t,n,a)=>hl(e,t,n,a)&&Object.keys(e).map((e=>new RegExp(`^${dl(e)}$`)))};const{Core:vl,Instance:gl}=Dt;var $l={compile:(e,t)=>vl.compileSchema(e,t),interpret:(e,t,n,a)=>!gl.typeOf(t,"object")||gl.keys(t).every((t=>vl.interpretSchema(e,gl.cons(t),n,a)))};const{Core:bl,Schema:jl}=Dt;var Ol={compile:async(e,t)=>{const n=await jl.get(jl.value(e),e);return bl.compileSchema(n,t)},interpret:bl.interpretSchema,collectEvaluatedProperties:bl.collectEvaluatedProperties,collectEvaluatedItems:bl.collectEvaluatedItems};const{Schema:Il,Instance:Sl}=Dt;var xl={compile:e=>Il.value(e),interpret:(e,t)=>!Sl.typeOf(t,"object")||e.every((e=>Sl.value(t).hasOwnProperty(e)))};const{Core:wl,Schema:El,Instance:Pl}=Dt,Al=(e,t,n,a)=>!Pl.typeOf(t,"array")||Pl.every(((t,r)=>!(r in e)||wl.interpretSchema(e[r],t,n,a)),t);var kl={compile:(e,t)=>Ue.pipeline([El.map((e=>wl.compileSchema(e,t))),Ue.all],e),interpret:Al,collectEvaluatedItems:(e,t,n,a)=>Al(e,t,n,a)&&new Set(e.map(((e,t)=>t)))};const{Schema:Nl,Instance:Cl}=Dt;var Rl={compile:e=>Nl.value(e),interpret:(e,t)=>"string"==typeof e?Cl.typeOf(t,e):e.some(Cl.typeOf(t))};const{Core:Tl,Schema:Dl,Instance:ql}=Dt,Ml=([e,t],n,a,r)=>{if(!ql.typeOf(n,"array"))return!0;const i=Tl.collectEvaluatedItems(e,n,a,r,!0);return!1===i||ql.every(((e,o)=>i.has(o)||Tl.interpretSchema(t,ql.step(o,n),a,r)),n)};var Vl={compile:async(e,t,n)=>[Dl.uri(n),await Tl.compileSchema(e,t)],interpret:Ml,collectEvaluatedItems:(e,t,n,a)=>Ml(e,t,n,a)&&new Set(ql.map(((e,t)=>t),t))};const{Core:Ll,Schema:Jl,Instance:zl}=Dt,_l=([e,t],n,a,r)=>{if(!zl.typeOf(n,"object"))return!0;const i=Ll.collectEvaluatedProperties(e,n,a,r,!0);return!i||zl.entries(n).filter((([e])=>!i.some((t=>e.match(t))))).every((([,e])=>Ll.interpretSchema(t,e,a,r)))};var Ul={compile:async(e,t,n)=>[Jl.uri(n),await Ll.compileSchema(e,t)],interpret:_l,collectEvaluatedProperties:(e,t,n,a)=>_l(e,t,n,a)&&[new RegExp("")]};const{Schema:Fl,Instance:Bl}=Dt;var Kl={compile:e=>Fl.value(e),interpret:(e,t)=>{if(!Bl.typeOf(t,"array")||!1===e)return!0;const n=Bl.map((e=>mn(Bl.value(e))),t);return new Set(n).size===n.length}};const{Keywords:Gl}=Dt;var Zl={additionalItems:To,additionalItems6:Lo,additionalProperties:Uo,additionalProperties6:Zo,allOf:Xo,anyOf:es,const:as,contains:os,containsMinContainsMaxContains:ps,definitions:ds,dependencies:gs,dependentRequired:js,dependentSchemas:xs,dynamicRef:ks,dynamicRefFUTURE:Ds,enum:Vs,exclusiveMaximum:zs,exclusiveMinimum:Fs,if:Ks,then:Ws,else:ec,items:ic,items202012:mc,maxItems:fc,maxLength:yc,maxLength6:$c,maxProperties:Oc,maximumExclusiveMaximum:xc,maximum:Pc,metaData:Gl.metaData,minItems:Nc,minLength:Tc,minLength6:Mc,minProperties:Jc,minimumExclusiveMinimum:Uc,minimum:Kc,multipleOf:Wc,not:Qc,oneOf:tl,pattern:rl,patternProperties:ll,properties:yl,propertyNames:$l,ref:Ol,required:xl,tupleItems:kl,type:Rl,unevaluatedItems:Vl,unevaluatedProperties:Ul,uniqueItems:Kl,validate:Gl.validate};const{Core:Hl,Schema:Wl}=Dt,Xl="https://json-schema.org/draft/future/schema";function Ql(e){return{c:u,l:u,m:u,p:u,i:u,o:u,d:u}}function Yl(e){let t,n;return t=new co({props:{results:e[4]}}),{c(){x(t.$$.fragment)},l(e){w(t.$$.fragment,e)},m(e,a){E(t,e,a),n=!0},p(e,n){const a={};16&n&&(a.results=e[4]),t.$set(a)},i(e){n||(A(t.$$.fragment,e),n=!0)},o(e){k(t.$$.fragment,e),n=!1},d(e){N(t,e)}}}function em(e){return{c:u,l:u,m:u,p:u,i:u,o:u,d:u}}function tm(e){let t,n,u,f,y,v,g,$,b,O,I,C,D,q,M,V,J,z,_,U,F;function B(t){e[9](t)}function K(t){e[10](t)}g=new Xi({props:{ns:"schemas",tabs:e[0],newTab:e[5],active:0}}),g.$on("input",e[7]);let G={ns:"instances",tabs:e[1],newTab:e[6]};void 0!==e[2]&&(G.selected=e[2]),void 0!==e[2]&&(G.active=e[2]),O=new Xi({props:G}),j.push((()=>S(O,"selected",B))),j.push((()=>S(O,"active",K))),O.$on("input",e[8]),M=new co({props:{results:e[3]}});let Z={ctx:e,current:null,token:null,hasCatch:!1,pending:em,then:Yl,catch:Ql,value:12,blocks:[,,,]};return R(z=e[3],Z),U=new xo({}),{c(){t=d(),n=a("main"),u=a("h1"),f=r("Hyperjump - JSON Schema Validator"),y=d(),v=a("div"),x(g.$$.fragment),$=d(),b=a("div"),x(O.$$.fragment),D=d(),q=a("div"),x(M.$$.fragment),V=d(),J=a("div"),Z.block.c(),_=d(),x(U.$$.fragment),this.h()},l(e){L('[data-svelte="svelte-14138tz"]',document.head).forEach(c),t=h(e),n=i(e,"MAIN",{class:!0});var a=o(n);u=i(a,"H1",{class:!0});var r=o(u);f=s(r,"Hyperjump - JSON Schema Validator"),r.forEach(c),y=h(a),v=i(a,"DIV",{class:!0});var l=o(v);w(g.$$.fragment,l),l.forEach(c),$=h(a),b=i(a,"DIV",{class:!0});var m=o(b);w(O.$$.fragment,m),m.forEach(c),D=h(a),q=i(a,"DIV",{class:!0});var p=o(q);w(M.$$.fragment,p),p.forEach(c),V=h(a),J=i(a,"DIV",{class:!0});var d=o(J);Z.block.l(d),d.forEach(c),_=h(a),w(U.$$.fragment,a),a.forEach(c),this.h()},h(){document.title="Hyperjump - JSON Schema Validator",l(u,"class","svelte-1fbysc"),l(v,"class","editor-section svelte-1fbysc"),l(b,"class","editor-section svelte-1fbysc"),l(q,"class","results "+am+" svelte-1fbysc"),l(J,"class","results "+am+" svelte-1fbysc"),l(n,"class","svelte-1fbysc")},m(e,a){m(e,t,a),m(e,n,a),p(n,u),p(u,f),p(n,y),p(n,v),E(g,v,null),p(n,$),p(n,b),E(O,b,null),p(n,D),p(n,q),E(M,q,null),p(n,V),p(n,J),Z.block.m(J,Z.anchor=null),Z.mount=()=>J,Z.anchor=null,p(n,_),E(U,n,null),F=!0},p(t,[n]){e=t;const a={};1&n&&(a.tabs=e[0]),g.$set(a);const r={};2&n&&(r.tabs=e[1]),!I&&4&n&&(I=!0,r.selected=e[2],P((()=>I=!1))),!C&&4&n&&(C=!0,r.active=e[2],P((()=>C=!1))),O.$set(r);const i={};8&n&&(i.results=e[3]),M.$set(i),Z.ctx=e,8&n&&z!==(z=e[3])&&R(z,Z)||T(Z,e,n)},i(e){F||(A(g.$$.fragment,e),A(O.$$.fragment,e),A(M.$$.fragment,e),A(Z.block),A(U.$$.fragment,e),F=!0)},o(e){k(g.$$.fragment,e),k(O.$$.fragment,e),k(M.$$.fragment,e);for(let e=0;e<3;e+=1){const t=Z.blocks[e];k(t)}k(U.$$.fragment,e),F=!1},d(e){e&&c(t),e&&c(n),N(g),N(O),N(M),Z.block.d(),Z.token=null,Z=null,N(U)}}}Wl.setConfig(Xl,"baseToken","$id"),Wl.setConfig(Xl,"embeddedToken","$id"),Wl.setConfig(Xl,"anchorToken","$anchor"),Wl.setConfig(Xl,"dynamicAnchorToken","$dynamicAnchor"),Wl.setConfig(Xl,"vocabularyToken","$vocabulary"),Wl.setConfig(Xl,"mandatoryVocabularies",["https://json-schema.org/draft/future/vocab/core"]),Wl.add(JSON.parse('{\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$id": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/core": true,\n        "https://json-schema.org/draft/future/vocab/applicator": true,\n        "https://json-schema.org/draft/future/vocab/unevaluated": true,\n        "https://json-schema.org/draft/future/vocab/validation": true,\n        "https://json-schema.org/draft/future/vocab/meta-data": true,\n        "https://json-schema.org/draft/future/vocab/format-annotation": true,\n        "https://json-schema.org/draft/future/vocab/content": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Core and Validation specifications meta-schema",\n    "allOf": [\n        {"$ref": "meta/core"},\n        {"$ref": "meta/applicator"},\n        {"$ref": "meta/validation"},\n        {"$ref": "meta/meta-data"},\n        {"$ref": "meta/format-annotation"},\n        {"$ref": "meta/content"}\n    ],\n    "type": ["object", "boolean"],\n    "properties": {\n        "definitions": {\n            "$comment": "While no longer an official keyword as it is replaced by $defs, this keyword is retained in the meta-schema to prevent incompatible extensions as it remains in common use.",\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        },\n        "dependencies": {\n            "$comment": "\\"dependencies\\" is no longer a keyword, but schema authors should avoid redefining it to facilitate a smooth transition to \\"dependentSchemas\\" and \\"dependentRequired\\"",\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$dynamicRef": "#meta" },\n                    { "$ref": "meta/validation#/$defs/stringArray" }\n                ]\n            }\n        }\n    }\n}')),Wl.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/core",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/core": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Core vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference",\n            "$comment": "Non-empty fragments not allowed.",\n            "pattern": "^[^#]*#?$"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$anchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z_][-A-Za-z0-9._]*$"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$dynamicRef": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$dynamicAnchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z_][-A-Za-z0-9._]*$"\n        },\n        "$vocabulary": {\n            "type": "object",\n            "propertyNames": {\n                "type": "string",\n                "format": "uri"\n            },\n            "additionalProperties": {\n                "type": "boolean"\n            }\n        },\n        "$comment": {\n            "type": "string"\n        },\n        "$defs": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        }\n    }\n}')),Hl.defineVocabulary("https://json-schema.org/draft/future/vocab/core",{validate:Zl.validate,$defs:Zl.definitions,$dynamicRef:Zl.dynamicRefFUTURE,$ref:Zl.ref}),Wl.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/applicator",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/applicator": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Applicator vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "prefixItems": { "$ref": "#/$defs/schemaArray" },\n        "items": { "$dynamicRef": "#meta" },\n        "contains": { "$dynamicRef": "#meta" },\n        "additionalProperties": { "$dynamicRef": "#meta" },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "propertyNames": { "format": "regex" },\n            "default": {}\n        },\n        "dependentSchemas": {\n            "type": "object",\n            "additionalProperties": {\n                "$dynamicRef": "#meta"\n            }\n        },\n        "propertyNames": { "$dynamicRef": "#meta" },\n        "if": { "$dynamicRef": "#meta" },\n        "then": { "$dynamicRef": "#meta" },\n        "else": { "$dynamicRef": "#meta" },\n        "allOf": { "$ref": "#/$defs/schemaArray" },\n        "anyOf": { "$ref": "#/$defs/schemaArray" },\n        "oneOf": { "$ref": "#/$defs/schemaArray" },\n        "not": { "$dynamicRef": "#meta" }\n    },\n    "$defs": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$dynamicRef": "#meta" }\n        }\n    }\n}')),Hl.defineVocabulary("https://json-schema.org/draft/future/vocab/applicator",{additionalProperties:Zl.additionalProperties6,allOf:Zl.allOf,anyOf:Zl.anyOf,contains:Zl.containsMinContainsMaxContains,dependentSchemas:Zl.dependentSchemas,if:Zl.if,then:Zl.then,else:Zl.else,items:Zl.items202012,not:Zl.not,oneOf:Zl.oneOf,patternProperties:Zl.patternProperties,prefixItems:Zl.tupleItems,properties:Zl.properties,propertyNames:Zl.propertyNames}),Wl.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/validation",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/validation": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Validation vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minLength": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "maxItems": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minItems": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxContains": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minContains": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 1\n        },\n        "maxProperties": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/$defs/stringArray" },\n        "dependentRequired": {\n            "type": "object",\n            "additionalProperties": {\n                "$ref": "#/$defs/stringArray"\n            }\n        },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/$defs/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/$defs/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        }\n    },\n    "$defs": {\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 0\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    }\n}')),Hl.defineVocabulary("https://json-schema.org/draft/future/vocab/validation",{const:Zl.const,dependentRequired:Zl.dependentRequired,enum:Zl.enum,exclusiveMaximum:Zl.exclusiveMaximum,exclusiveMinimum:Zl.exclusiveMinimum,maxItems:Zl.maxItems,maxLength:Zl.maxLength6,maxProperties:Zl.maxProperties,maximum:Zl.maximum,minItems:Zl.minItems,minLength:Zl.minLength6,minProperties:Zl.minProperties,minimum:Zl.minimum,multipleOf:Zl.multipleOf,pattern:Zl.pattern,required:Zl.required,type:Zl.type,uniqueItems:Zl.uniqueItems}),Wl.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/meta-data",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/meta-data": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Meta-data vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": true,\n        "deprecated": {\n            "type": "boolean",\n            "default": false\n        },\n        "readOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "writeOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "examples": {\n            "type": "array",\n            "items": true\n        }\n    }\n}')),Hl.defineVocabulary("https://json-schema.org/draft/future/vocab/meta-data",{default:Zl.metaData,deprecated:Zl.metaData,description:Zl.metaData,examples:Zl.metaData,readOnly:Zl.metaData,title:Zl.metaData,writeOnly:Zl.metaData}),Wl.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/format-annotation",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/format-annotation": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Format vocabulary meta-schema for annotation results",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),Hl.defineVocabulary("https://json-schema.org/draft/future/vocab/format-annotation",{format:Zl.metaData}),Wl.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/format-assertion",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/format-assertion": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Format vocabulary meta-schema for assertion results",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),Wl.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/content",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/content": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Content vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "contentMediaType": { "type": "string" },\n        "contentEncoding": { "type": "string" },\n        "contentSchema": { "$dynamicRef": "#meta" }\n    }\n}')),Hl.defineVocabulary("https://json-schema.org/draft/future/vocab/content",{contentEncoding:Zl.metaData,contentMediaType:Zl.metaData,contentSchema:Zl.metaData}),Wl.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/unevaluated",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/unevaluated": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Unevaluated applicator vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "unevaluatedItems": { "$dynamicRef": "#meta" },\n        "unevaluatedProperties": { "$dynamicRef": "#meta" }\n    }\n}')),Hl.defineVocabulary("https://json-schema.org/draft/future/vocab/unevaluated",{unevaluatedItems:Zl.unevaluatedItems,unevaluatedProperties:Zl.unevaluatedProperties});const nm="https://json-schema.hyperjump.io/schema",am="solarized-dark";function rm(e,t,n){let a,r;const i=function(){let e=1;return(t,n,a=!1)=>{const r=n||`${nm}${++e}`;return{label:t||`Schema ${e}`,text:`{\n  "$id": "${r}",\n  "$schema": "https://json-schema.org/draft/2020-12/schema"\n}`,persistent:a}}}(),o=function(){let e=1;return()=>({label:"Instance "+e++,text:""})}();let s=[i("Schema",nm,!0)],c=[o("Instance")],l=0;const m=function(e,t){let n;return({detail:a})=>{clearTimeout(n),n=setTimeout((()=>e(a)),t)}},p=m((e=>n(0,s=e)),750),u=m((e=>n(1,c=e)),750);return wi.setMetaOutputFormat(wi.BASIC),e.$$.update=()=>{1&e.$$.dirty&&n(3,a=async function(){s.forEach(((e,t)=>{const n=0===t?nm:"";wi.add(JSON.parse(e.text||"true"),n,"https://json-schema.org/draft/2020-12/schema")}));const e=await wi.get(nm);return wi.validate(e)}()),14&e.$$.dirty&&n(4,r=async function(){if(""!==c[l].text){let e;try{e=await a}catch(e){}if(e){const t=e(JSON.parse(c[l].text),wi.BASIC);if(t.valid)return t;throw{output:t}}}}())},[s,c,l,a,r,i,o,p,u,function(e){l=e,n(2,l)},function(e){l=e,n(2,l)}]}export default class extends e{constructor(e){super(),t(this,e,rm,tm,n,{})}}
