import{S as e,i as t,s as n,e as a,t as r,c as i,a as s,b as o,d as c,f as l,g as m,h as p,n as u,j as f,k as d,l as h,m as y,o as v,p as g,r as $,q as b,u as O,v as S,w as I,x as w,y as x,z as j,A as E,B as P,C as A,D as k,E as C,F as N,G as R,H as T,I as D,J as q,K as M,L as V,M as L}from"./client.64683c9e.js";var J=function(e,t){return function n(){null==t&&(t=e.length);var a=[].slice.call(arguments);return a.length>=t?e.apply(this,a):function(){return n.apply(this,a.concat([].slice.call(arguments)))}}};var _="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function z(e,t,n){return e(n={path:t,exports:{},require:function(e,t){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==t&&n.path)}},n.exports),n.exports}var U=z((function(e,t){var n;n={},("object"==typeof window&&window||_).PubSub=n,function(e){var t={},n=-1,a="*";function r(e){var t;for(t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!0;return!1}function i(e){return function(){throw e}}function s(e,t,n){try{e(t,n)}catch(e){setTimeout(i(e),0)}}function o(e,t,n){e(t,n)}function c(e,n,a,r){var i,c=t[n],l=r?o:s;if(Object.prototype.hasOwnProperty.call(t,n))for(i in c)Object.prototype.hasOwnProperty.call(c,i)&&l(c[i],e,a)}function l(e,t,n){return function(){var r=String(e),i=r.lastIndexOf(".");for(c(e,e,t,n);-1!==i;)i=(r=r.substr(0,i)).lastIndexOf("."),c(e,r,t,n);c(e,a,t,n)}}function m(e){var n=String(e);return Boolean(Object.prototype.hasOwnProperty.call(t,n)&&r(t[n]))}function p(e){for(var t=String(e),n=m(t)||m(a),r=t.lastIndexOf(".");!n&&-1!==r;)r=(t=t.substr(0,r)).lastIndexOf("."),n=m(t);return n}function u(e,t,n,a){var r=l(e="symbol"==typeof e?e.toString():e,t,a);return!!p(e)&&(!0===n?r():setTimeout(r,0),!0)}e.publish=function(t,n){return u(t,n,!1,e.immediateExceptions)},e.publishSync=function(t,n){return u(t,n,!0,e.immediateExceptions)},e.subscribe=function(e,a){if("function"!=typeof a)return!1;e="symbol"==typeof e?e.toString():e,Object.prototype.hasOwnProperty.call(t,e)||(t[e]={});var r="uid_"+String(++n);return t[e][r]=a,r},e.subscribeAll=function(t){return e.subscribe(a,t)},e.subscribeOnce=function(t,n){var a=e.subscribe(t,(function(){e.unsubscribe(a),n.apply(this,arguments)}));return e},e.clearAllSubscriptions=function(){t={}},e.clearSubscriptions=function(e){var n;for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&0===n.indexOf(e)&&delete t[n]},e.countSubscriptions=function(e){var n,a,r=0;for(n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&0===n.indexOf(e)){for(a in t[n])r++;break}return r},e.getSubscriptions=function(e){var n,a=[];for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&0===n.indexOf(e)&&a.push(n);return a},e.unsubscribe=function(n){var a,r,i,s=function(e){var n;for(n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&0===n.indexOf(e))return!0;return!1},o="string"==typeof n&&(Object.prototype.hasOwnProperty.call(t,n)||s(n)),c=!o&&"string"==typeof n,l="function"==typeof n,m=!1;if(!o){for(a in t)if(Object.prototype.hasOwnProperty.call(t,a)){if(r=t[a],c&&r[n]){delete r[n],m=n;break}if(l)for(i in r)Object.prototype.hasOwnProperty.call(r,i)&&r[i]===n&&(delete r[i],m=!0)}return m}e.clearSubscriptions(n)}}(n),void 0!==e&&e.exports&&(t=e.exports=n),t.PubSub=n,e.exports=t=n}));U.PubSub;var F=function(e,t){if(e=e.trim(),(t=t.trim()).startsWith("about:"))return t;const n=function(e){const t={host:"",path:"",query:"",protocol:""};let n=e,a=e.indexOf("//");t.protocol=n.substring(0,a),a+=2;const r=e.indexOf("/",a),i=e.indexOf("?"),s=e.indexOf("#");-1!==s&&(n=n.substring(0,s));if(-1!==i){const e=n.substring(i);t.query=e,n=n.substring(0,i)}if(-1!==r){const e=n.substring(0,r);t.host=e,n=n.substring(r),t.path=n}else t.host=n;return t}(e),a=function(e){const t={href:e,hash:"",query:"",netPath:!1,absolutePath:!1,relativePath:!1};if(G.test(e))return t.netPath=!0,t;"/"===e[0]?t.absolutePath=!0:""!==e&&(t.relativePath=!0);let n=e;const a=e.indexOf("?"),r=e.indexOf("#");if(-1!==r){const e=n.substring(r);t.hash=e,n=n.substring(0,r)}if(-1!==a){const e=n.substring(a);t.query=e,n=n.substring(0,a)}return t.path=n,t}(t);if(!n.protocol&&!a.netPath)throw new Error("Error, protocol is not specified");if(a.netPath)return a.href.startsWith("//")&&(a.href=n.protocol+a.href),function(e){const t=e.indexOf("//")+2,n=!e.includes("/",t),a=!e.includes("?",t),r=!e.includes("#",t);return n&&a&&r}(a.href)?B(a.href):a.href;if(a.absolutePath){const{path:e,query:t,hash:r}=a;return n.host+K(e)+t+r}if(a.relativePath){const{path:e,query:t,hash:r}=a;let i,s=n.path,o=n.host;return 0===e.length?i=s:(s=s.substring(0,s.lastIndexOf("/")),i=K(s+"/"+e)),o+=""!==i||t||r?i+t+r:"/",o}{const{host:e,path:t,query:r}=n;return t||r?e+t+r+a.hash:B(e)}};function B(e){return e+("/"===e[e.length-1]?"":"/")}function K(e){let t=e.split("/");""===t[0]&&(t=t.slice(1));let n=[];return t.forEach(((e,a)=>{"."!==e&&(".."===e?n.pop():""===e&&a!==t.length-1||n.push(e))})),"/"+n.join("/")}const G=new RegExp("^([a-z][a-z0-9+.-]*:)?//","i");const Z={null:e=>null===e,boolean:e=>"boolean"==typeof e,object:e=>"object"==typeof e&&!Array.isArray(e)&&null!==e,array:e=>Array.isArray(e),number:e=>"number"==typeof e,integer:e=>Number.isInteger(e),string:e=>"string"==typeof e},H=e=>{const t=e.indexOf("#"),n=-1===t?e.length:t,a=e.slice(0,n),r=e.slice(n+1);return[decodeURI(a),decodeURI(r)]},W=e=>{const t=e.match(/^(.+):\/\//);return t?t[1]:""};var X={jsonTypeOf:(e,t)=>Z[t](e),splitUrl:H,safeResolveUrl:(e,t)=>{const n=F(e,t),a=H(e)[0];if(a&&"file"===W(n)&&"file"!==W(a))throw Error(`Can't access file '${n}' resource from network context '${e}'`);return n}};const Q=e=>{if(e.length>0&&"/"!==e[0])throw Error("Invalid JSON Pointer");return e.split("/").slice(1).map(ie)},Y=(e,t,n,a)=>{if(0===e.length)return n;if(e.length>1){const r=e.shift();return{...t,[r]:Y(e,oe(t,r,a),n,ae(r,a))}}if(Array.isArray(t)){const a=[...t];return a[se(t,e[0])]=n,a}return"object"==typeof t&&null!==t?{...t,[e[0]]:n}:oe(t,e[0],a)},ee=(e,t,n,a)=>{if(0!==e.length)if(1!==e.length||ce(t)){const r=e.shift();ee(e,oe(t,r,a),n,ae(r,a))}else{t[se(t,e[0])]=n}},te=(e,t,n)=>{if(0!=e.length){if(e.length>1){const a=e.shift(),r=oe(t,a,n);return{...t,[a]:te(e,r,ae(a,n))}}if(Array.isArray(t))return t.filter(((t,n)=>n!=e[0]));if("object"==typeof t&&null!==t){const{[e[0]]:n,...a}=t;return a}return oe(t,e[0],n)}},ne=(e,t,n)=>{if(0!==e.length)if(e.length>1){const a=e.shift(),r=oe(t,a,n);ne(e,r,ae(a,n))}else Array.isArray(t)?t.splice(e[0],1):"object"==typeof t&&null!==t?delete t[e[0]]:oe(t,e[0],n)},ae=J(((e,t)=>t+"/"+re(e))),re=e=>e.toString().replace(/~/g,"~0").replace(/\//g,"~1"),ie=e=>e.toString().replace(/~1/g,"/").replace(/~0/g,"~"),se=(e,t)=>Array.isArray(e)&&"-"===t?e.length:t,oe=(e,t,n="")=>{if(void 0===e)throw TypeError(`Value at '${n}' is undefined and does not have property '${t}'`);if(null===e)throw TypeError(`Value at '${n}' is null and does not have property '${t}'`);if(ce(e))throw TypeError(`Value at '${n}' is a ${typeof e} and does not have property '${t}'`);return e[se(e,t)]},ce=e=>null===e||"object"!=typeof e;var le={nil:"",append:ae,get:(e,t)=>{const n=Q(e),a=e=>n.reduce((([e,t],n)=>[oe(e,n,t),ae(n,t)]),[e,""])[0];return void 0===t?a:a(t)},set:(e,t,n)=>{const a=Q(e),r=J(((e,t)=>Y(a,e,t,"")));return void 0===t?r:r(t,n)},assign:(e,t,n)=>{const a=Q(e),r=J(((e,t)=>ee(a,e,t,"")));return void 0===t?r:r(t,n)},unset:(e,t)=>{const n=Q(e),a=e=>te(n,e,"");return void 0===t?a:a(t)},delete:(e,t)=>{const n=Q(e),a=e=>ne(n,e,"");return void 0===t?a:a(t)}};le.nil,le.append,le.get,le.set,le.assign,le.unset;const me=Symbol("$__value"),pe=Symbol("$__href");var ue=(e,t)=>Object.freeze({[pe]:e,[me]:t}),fe=e=>e&&void 0!==e[pe],de=e=>e[pe],he=e=>e[me];const{jsonTypeOf:ye}=X,ve=Object.freeze({id:"",pointer:"",instance:void 0,value:void 0}),ge=e=>fe(e.value)?he(e.value):e.value,$e=J(((e,t)=>ye(ge(e),t))),be=(e,t)=>Object.freeze({...t,pointer:le.append(e,t.pointer),value:ge(t)[e]}),Oe=J(((e,t)=>ge(t).map(((n,a,r,i)=>e(be(a,t),a,r,i))))),Se=J(((e,t)=>ge(t).map(((e,n,a,r)=>be(n,t))).filter(((t,n,a,r)=>e(t,n,a,r))))),Ie=J(((e,t,n)=>ge(n).reduce(((t,a,r)=>e(t,be(r,n),r)),t))),we=J(((e,t)=>ge(t).every(((n,a,r,i)=>e(be(a,t),a,r,i))))),xe=J(((e,t)=>ge(t).some(((n,a,r,i)=>e(be(a,t),a,r,i)))));var je={cons:(e,t="")=>Object.freeze({...ve,id:t,instance:e,value:e}),uri:e=>`${e.id}#${encodeURI(e.pointer)}`,value:ge,has:(e,t)=>e in ge(t),typeOf:$e,step:be,entries:e=>Object.keys(ge(e)).map((t=>[t,be(t,e)])),keys:e=>Object.keys(ge(e)),map:Oe,filter:Se,reduce:Ie,every:we,some:xe,length:e=>ge(e).length},Ee=/; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g,Pe=/^[\u000b\u0020-\u007e\u0080-\u00ff]+$/,Ae=/^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/,ke=/\\([\u000b\u0020-\u00ff])/g,Ce=/([\\"])/g,Ne=/^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;function Re(e){var t=String(e);if(Ae.test(t))return t;if(t.length>0&&!Pe.test(t))throw new TypeError("invalid parameter value");return'"'+t.replace(Ce,"\\$1")+'"'}function Te(e){this.parameters=Object.create(null),this.type=e}var De={format:function(e){if(!e||"object"!=typeof e)throw new TypeError("argument obj is required");var t=e.parameters,n=e.type;if(!n||!Ne.test(n))throw new TypeError("invalid type");var a=n;if(t&&"object"==typeof t)for(var r,i=Object.keys(t).sort(),s=0;s<i.length;s++){if(r=i[s],!Ae.test(r))throw new TypeError("invalid parameter name");a+="; "+r+"="+Re(t[r])}return a},parse:function(e){if(!e)throw new TypeError("argument string is required");var t="object"==typeof e?function(e){var t;"function"==typeof e.getHeader?t=e.getHeader("content-type"):"object"==typeof e.headers&&(t=e.headers&&e.headers["content-type"]);if("string"!=typeof t)throw new TypeError("content-type header is missing from object");return t}(e):e;if("string"!=typeof t)throw new TypeError("argument string is required to be a string");var n=t.indexOf(";"),a=-1!==n?t.substr(0,n).trim():t.trim();if(!Ne.test(a))throw new TypeError("invalid media type");var r=new Te(a.toLowerCase());if(-1!==n){var i,s,o;for(Ee.lastIndex=n;s=Ee.exec(t);){if(s.index!==n)throw new TypeError("invalid parameter format");n+=s[0].length,i=s[1].toLowerCase(),'"'===(o=s[2])[0]&&(o=o.substr(1,o.length-2).replace(ke,"$1")),r.parameters[i]=o}if(n!==t.length)throw new TypeError("invalid parameter format")}return r}},qe=async e=>Object.entries(await e),Me=J((async(e,t)=>(await t).map(e))),Ve=J((async(e,t,n)=>(await n).reduce((async(t,n)=>e(await t,n)),t))),Le=J((async(e,t,n={})=>Ve((async(t,n)=>await e(n)?t.concat([n]):t),[],t,n))),Je=J((async(e,t)=>{const n=await Me(e,t);return(await Promise.all(n)).some((e=>e))})),_e=J((async(e,t)=>{const n=await Me(e,t);return(await Promise.all(n)).every((e=>e))})),ze=J(((e,t)=>e.reduce((async(e,t)=>t(await e)),t))),Ue={entries:qe,map:Me,filter:Le,reduce:Ve,some:Je,every:_e,pipeline:ze,all:e=>Promise.all(e),allValues:e=>ze([qe,Ve((async(e,[t,n])=>(e[t]=await n,e)),{})],e)};Ue.entries,Ue.map,Ue.filter,Ue.reduce,Ue.some,Ue.every,Ue.pipeline,Ue.all,Ue.allValues;var Fe=fetch;const{jsonTypeOf:Be,splitUrl:Ke,safeResolveUrl:Ge}=X,Ze={},He={},We=(e,t)=>{const n=e in He?He[e]:e;if(n in Ze)return Ze[n][t]},Xe={},Qe={},Ye=(e,t="",n="")=>{e=JSON.parse(JSON.stringify(e));const a=Ke(e.$schema||n)[0];if(!a)throw Error("Couldn't determine schema version");delete e.$schema;const r=We(a,"baseToken"),i=We(a,"anchorToken"),s=Ke(t)[0];if(!s&&!Ke(e[r]||"")[0])throw Error("Couldn't determine an identifier for the schema");const o=Ge(s,e[r]||""),[c,l]=Ke(o);delete e[r],l&&r===i&&(e[i]=i!==r?encodeURI(l):`#${encodeURI(l)}`),s&&(Qe[s]=c);const m={},p=We(a,"recursiveAnchorToken");let u;!0===e[p]&&(m[""]=c,e[i]="",delete e[p]);const f=We(a,"vocabularyToken");Be(e[f],"object")?(He[c]=a,u=e[f],delete e[f]):(He[c]=a,u={[a]:!0});const d={"":""};return Xe[c]={id:c,schemaVersion:a,schema:et(e,c,a,le.nil,d,m),anchors:d,dynamicAnchors:m,vocabulary:u,validated:!1},Xe[c]},et=(e,t,n,a,r,i)=>{if(Be(e,"object")){const s="string"==typeof e.$schema?Ke(e.$schema)[0]:n,o=We(s,"embeddedToken"),c=We(s,"anchorToken");if("string"==typeof e[o]&&(o!==c||"#"!==e[o][0])){const a=Ge(t,e[o]);return e[o]=a,Ye(e,a,n),ue(e[o],e)}const l=We(n,"anchorToken"),m=We(n,"dynamicAnchorToken");"string"==typeof e[m]&&(i[e[m]]=t,r[e[m]]=a,delete e[m]);const p=We(n,"embeddedToken");if("string"==typeof e[l]){const t=l!==p?e[l]:e[l].slice(1);r[t]=a,delete e[l]}const u=We(n,"jrefToken");if("string"==typeof e[u])return ue(e[u],e);for(let s in e)e[s]=et(e[s],t,n,le.append(s,a),r,i);return e}return Array.isArray(e)?e.map(((e,s)=>et(e,t,n,le.append(s,a),r,i))):e},tt=e=>Xe[Qe[e]]||Xe[e],nt=Object.freeze({id:"",schemaVersion:void 0,vocabulary:{},pointer:le.nil,schema:void 0,value:void 0,anchors:{},dynamicAnchors:{},validated:!0}),at=async(e,t=nt)=>{const n=Ge(st(t),e),[a,r]=Ke(n);if(!(e=>e in Xe||e in Qe)(a)){const e=await Fe(a,{headers:{Accept:"application/schema+json"}});if(e.status>=400)throw await e.text(),Error(`Failed to retrieve schema with id: ${a}`);if(e.headers.has("content-type")){const t=De.parse(e.headers.get("content-type")).type;if("application/schema+json"!==t)throw Error(`${a} is not a schema. Found a document with media type: ${t}`)}Ye(await e.json(),a)}const i=tt(a),s="/"!==r[0]?it(i,r):r,o=Object.freeze({...i,pointer:s,value:le.get(s,i.schema)});return rt(o)},rt=e=>fe(e.value)?at(de(e.value),e):e,it=(e,t)=>{if(!(t in e.anchors))throw Error(`No such anchor '${encodeURI(e.id)}#${encodeURI(t)}'`);return e.anchors[t]},st=e=>`${e.id}#${encodeURI(e.pointer)}`,ot=e=>fe(e.value)?he(e.value):e.value,ct=(e,t)=>{const n=tt(t.id),a=Object.freeze({...t,pointer:le.append(e,t.pointer),value:ot(t)[e],validated:n.validated});return rt(a)},lt=J(((e,t)=>Ue.pipeline([ot,Ue.map((async(n,a)=>e(await ct(a,t),a))),Ue.all],t)));var mt={setConfig:(e,t,n)=>{Ze[e]||(Ze[e]={}),Ze[e][t]=n},getConfig:We,add:Ye,get:at,markValidated:e=>{Xe[e].validated=!0},uri:st,value:ot,getAnchorPointer:it,typeOf:(e,t)=>Be(ot(e),t),has:(e,t)=>e in ot(t),step:ct,keys:e=>Object.keys(ot(e)),entries:e=>Ue.pipeline([ot,Object.keys,Ue.map((async t=>[t,await ct(t,e)])),Ue.all],e),map:lt,length:e=>ot(e).length};mt.setConfig,mt.getConfig,mt.add,mt.get,mt.markValidated,mt.uri,mt.value,mt.getAnchorPointer,mt.typeOf,mt.has,mt.step,mt.keys,mt.entries,mt.map,mt.length;class pt extends Error{constructor(e){super("Invalid Schema"),this.name=this.constructor.name,this.output=e}}var ut=pt;const{splitUrl:ft}=X,dt="FLAG",ht="BASIC",yt="DETAILED",vt="VERBOSE";let gt=yt,$t=!0;const bt=async e=>{const t={metaData:{}};return{ast:t,schemaUri:await Pt(e,t)}},Ot=J((({ast:e,schemaUri:t},n,a=dt)=>{if(![dt,ht,yt,vt].includes(a))throw Error(`The '${a}' error format is not supported`);let r=[];const i=U.subscribe("result",St(a,r));return At(t,n,e,{}),U.unsubscribe(i),r[0]})),St=(e,t)=>{const n=[];return(a,r)=>{if("result"===a){const{keyword:e,absoluteKeywordLocation:t,instanceLocation:a,valid:i}=r,s={keyword:e,absoluteKeywordLocation:t,instanceLocation:a,valid:i,errors:[]};n.push(s)}else if("result.start"===a)n.push(a);else if("result.end"===a){const a=n.pop();for(;"result.start"!==n[n.length-1];){const t=n.pop(),r=[t];e===ht&&(r.push(...t.errors),delete t.errors),(e===vt||e!==dt&&!t.valid)&&a.errors.unshift(...r)}n[n.length-1]=a,t[0]=a}}},It={},wt=e=>It[e],xt=e=>e in It,jt={},Et={},Pt=async(e,t)=>{if(!xt(`${e.schemaVersion}#validate`)){const t=await mt.get(e.schemaVersion);(mt.getConfig(t.id,"mandatoryVocabularies")||[]).forEach((e=>{if(!t.vocabulary[e])throw Error(`Vocabulary '${e}' must be explicitly declared and required`)})),Object.entries(t.vocabulary).forEach((([e,n])=>{if(e in jt)Object.entries(jt[e]).forEach((([e,n])=>{((e,t)=>{It[e]={collectEvaluatedItems:(e,n,a)=>t.interpret(e,n,a)&&new Set,collectEvaluatedProperties:(e,n,a)=>t.interpret(e,n,a)&&[],...t}})(`${t.id}#${e}`,n)}));else if(n)throw Error(`Missing required vocabulary: ${e}`)}))}if($t&&!e.validated){if(mt.markValidated(e.id),!(e.schemaVersion in Et)){const t=await mt.get(e.schemaVersion),n={metaData:{}},a=await Pt(t,n);Et[t.id]=Ot({ast:n,schemaUri:a})}const t=je.cons(e.schema,e.id),n=Et[e.schemaVersion](t,gt);if(!n.valid)throw new ut(n)}return e.id in t.metaData||(t.metaData[e.id]={id:e.id,dynamicAnchors:e.dynamicAnchors,anchors:e.anchors}),await wt(`${e.schemaVersion}#validate`).compile(e,t),mt.uri(e)},At=(e,t,n,a)=>{const r=kt(e,n),i=ft(e)[0];return wt(r).interpret(e,t,n,{...n.metaData[i].dynamicAnchors,...a})},kt=(e,t)=>{if(!(e in t))throw Error(`No schema found at ${e}`);return t[e][0]};var Ct={validate:async(e,t,n)=>{const a=await bt(e),r=(e,t=dt)=>Ot(a,je.cons(e),t);return void 0===t?r:r(t,n)},compile:bt,interpret:Ot,setMetaOutputFormat:e=>{gt=e},setShouldMetaValidate:e=>{$t=e},FLAG:dt,BASIC:ht,DETAILED:yt,VERBOSE:vt,add:(e,t="",n="")=>{const{id:a}=mt.add(e,t,n);delete Et[a]},getKeyword:wt,hasKeyword:xt,defineVocabulary:(e,t)=>{jt[e]=t},compileSchema:Pt,interpretSchema:At,collectEvaluatedProperties:(e,t,n,a,r)=>{const i=kt(e,n);return wt(i).collectEvaluatedProperties(e,t,n,a,r)},collectEvaluatedItems:(e,t,n,a,r)=>{const i=kt(e,n);return wt(i).collectEvaluatedItems(e,t,n,a,r)}};var Nt={compile:e=>mt.value(e),interpret:()=>!0};var Rt={compile:async(e,t)=>{const n=mt.uri(e);if(!(n in t)){t[n]=!1;const a=mt.value(e);if(!["object","boolean"].includes(typeof a))throw Error(`No schema found at '${mt.uri(e)}'`);t[n]=[`${e.schemaVersion}#validate`,mt.uri(e),"boolean"==typeof a?a:await Ue.pipeline([mt.entries,Ue.map((([t,n])=>[`${e.schemaVersion}#${t}`,n])),Ue.filter((([t])=>Ct.hasKeyword(t)&&t!==`${e.schemaVersion}#validate`)),Ue.map((async([n,a])=>{const r=await Ct.getKeyword(n).compile(a,t,e);return[n,mt.uri(a),r]})),Ue.all],e)]}return n},interpret:(e,t,n,a)=>{const[r,i,s]=n[e];U.publishSync("result.start");const o="boolean"==typeof s?s:s.every((([e,r,i])=>{U.publishSync("result.start");const s=Ct.getKeyword(e).interpret(i,t,n,a);return U.publishSync("result",{keyword:e,absoluteKeywordLocation:r,instanceLocation:je.uri(t),valid:s,ast:i}),U.publishSync("result.end"),s}));return U.publishSync("result",{keyword:r,absoluteKeywordLocation:i,instanceLocation:je.uri(t),valid:o,ast:e}),U.publishSync("result.end"),o},collectEvaluatedProperties:(e,t,n,a,r=!1)=>{const i=n[e][2];return"boolean"==typeof i?!!i&&[]:i.filter((([e])=>!r||!e.endsWith("#unevaluatedProperties"))).reduce(((e,[r,,i])=>{const s=e&&Ct.getKeyword(r).collectEvaluatedProperties(i,t,n,a);return!1!==s&&[...e,...s]}),[])},collectEvaluatedItems:(e,t,n,a,r=!1)=>{const i=n[e][2];return"boolean"==typeof i?!!i&&new Set:i.filter((([e])=>!r||!e.endsWith("#unevaluatedItems"))).reduce(((e,[r,,i])=>{const s=!1!==e&&Ct.getKeyword(r).collectEvaluatedItems(i,t,n,a);return!1!==s&&new Set([...e,...s])}),new Set)}},Tt={metaData:Nt,validate:Rt},Dt={Core:Ct,Schema:mt,Instance:je,Keywords:Tt};const{Core:qt,Schema:Mt,Instance:Vt}=Dt;var Lt={compile:async(e,t,n)=>{const a=await Mt.step("items",n),r=Mt.typeOf(a,"array")?Mt.length(a):Number.MAX_SAFE_INTEGER;return Mt.typeOf(e,"boolean")?[r,Mt.value(e)]:[r,await qt.compileSchema(e,t)]},interpret:([e,t],n,a,r)=>!Vt.typeOf(n,"array")||("string"==typeof t?Vt.every(((n,i)=>i<e||qt.interpretSchema(t,n,a,r)),n):Vt.every(((n,a)=>a<e||t),n))};const{Core:Jt,Schema:_t,Instance:zt}=Dt,Ut=([e,t],n,a,r)=>!zt.typeOf(n,"array")||zt.every(((n,i)=>i<e||Jt.interpretSchema(t,n,a,r)),n);var Ft={compile:async(e,t,n)=>{const a=await _t.step("items",n);return[_t.typeOf(a,"array")?_t.length(a):Number.MAX_SAFE_INTEGER,await Jt.compileSchema(e,t)]},interpret:Ut,collectEvaluatedItems:(e,t,n,a)=>Ut(e,t,n,a)&&new Set(zt.map(((e,t)=>t),t))};const{Core:Bt,Schema:Kt,Instance:Gt}=Dt;var Zt={compile:async(e,t,n)=>{const a=await Kt.step("properties",n),r=Kt.typeOf(a,"object")?Kt.keys(a):[],i=await Kt.step("patternProperties",n),s=Kt.typeOf(i,"object")?Kt.keys(i).map((e=>new RegExp(e))):[];return Kt.typeOf(e,"boolean")?[r,s,Kt.value(e)]:[r,s,await Bt.compileSchema(e,t)]},interpret:([e,t,n],a,r,i)=>{if(!Gt.typeOf(a,"object"))return!0;const s=Gt.entries(a).filter((([n])=>!e.includes(n)&&!t.some((e=>e.test(n)))));return"string"==typeof n?s.every((([,e])=>Bt.interpretSchema(n,e,r,i))):0===s.length||n}};const{Core:Ht,Schema:Wt,Instance:Xt}=Dt,Qt=([e,t,n],a,r,i)=>!Xt.typeOf(a,"object")||Xt.entries(a).filter((([n])=>!e.includes(n)&&!t.some((e=>e.test(n))))).every((([,e])=>Ht.interpretSchema(n,e,r,i)));var Yt={compile:async(e,t,n)=>{const a=await Wt.step("properties",n),r=Wt.typeOf(a,"object")?Wt.keys(a):[],i=await Wt.step("patternProperties",n);return[r,Wt.typeOf(i,"object")?Wt.keys(i).map((e=>new RegExp(e))):[],await Ht.compileSchema(e,t)]},interpret:Qt,collectEvaluatedProperties:(e,t,n,a)=>Qt(e,t,n,a)&&[new RegExp("")]};const{Core:en,Schema:tn}=Dt;var nn={compile:(e,t)=>Ue.pipeline([tn.map((async e=>en.compileSchema(await e,t))),Ue.all],e),interpret:(e,t,n,a)=>e.every((e=>en.interpretSchema(e,t,n,a))),collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,r)=>{const i=e&&en.collectEvaluatedProperties(r,t,n,a);return!1!==i&&[...e,...i]}),[]),collectEvaluatedItems:(e,t,n,a)=>e.reduce(((e,r)=>{const i=!1!==e&&en.collectEvaluatedItems(r,t,n,a);return!1!==i&&new Set([...e,...i])}),new Set)};const{Core:an,Schema:rn}=Dt;var sn={compile:(e,t)=>Ue.pipeline([rn.map((async e=>an.compileSchema(await e,t))),Ue.all],e),interpret:(e,t,n,a)=>e.filter((e=>an.interpretSchema(e,t,n,a))).length>0,collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,r)=>{const i=an.collectEvaluatedProperties(r,t,n,a);return!1!==i?[...e||[],...i]:e}),!1),collectEvaluatedItems:(e,t,n,a)=>e.reduce(((e,r)=>{const i=an.collectEvaluatedItems(r,t,n,a);return!1!==i?new Set([...e||[],...i]):e}),!1)},on=Object.keys,cn=JSON.stringify;function ln(e,t){var n,a,r,i,s,o,c;if("string"===(c=typeof e))return cn(e);if(!0===e)return"true";if(!1===e)return"false";if(null===e)return"null";if(e instanceof Array){for(r="[",a=e.length-1,n=0;n<a;n++)r+=ln(e[n],!1)+",";return a>-1&&(r+=ln(e[n],!1)),r+"]"}if(e instanceof Object){if("function"==typeof e.toJSON)return ln(e.toJSON(),t);for(a=(i=on(e).sort()).length,r="",n=0;n<a;)void 0!==(o=ln(e[s=i[n]],!0))&&(n&&""!==r&&(r+=","),r+=cn(s)+":"+o),n++;return"{"+r+"}"}switch(c){case"function":case"undefined":return t?void 0:null;default:return isFinite(e)?e:null}}var mn=function(e){return""+ln(e,!1)};const{Schema:pn,Instance:un}=Dt;var fn={compile:e=>mn(pn.value(e)),interpret:(e,t)=>mn(un.value(t))===e};const{Core:dn,Instance:hn}=Dt;var yn={compile:(e,t)=>dn.compileSchema(e,t),interpret:(e,t,n,a)=>!hn.typeOf(t,"array")||hn.some((t=>dn.interpretSchema(e,t,n,a)),t)};const{Core:vn,Schema:gn,Instance:$n}=Dt,bn=({contains:e,minContains:t,maxContains:n},a,r,i)=>{if(!$n.typeOf(a,"array"))return!0;const s=$n.reduce(((t,n)=>vn.interpretSchema(e,n,r,i)?t+1:t),0,a);return s>=t&&s<=n};var On={compile:async(e,t,n)=>{const a=await vn.compileSchema(e,t),r=await gn.step("minContains",n),i=gn.typeOf(r,"number")?gn.value(r):1,s=await gn.step("maxContains",n);return{contains:a,minContains:i,maxContains:gn.typeOf(s,"number")?gn.value(s):Number.MAX_SAFE_INTEGER}},interpret:bn,collectEvaluatedItems:(e,t,n,a)=>bn(e,t,n,a)&&$n.reduce(((t,r,i)=>vn.interpretSchema(e.contains,r,n,a)?t.add(i):t),new Set,t)};const{Core:Sn,Schema:In}=Dt;var wn={compile:async(e,t)=>{await Ue.pipeline([In.entries,Ue.map((([,e])=>Sn.compileSchema(e,t))),Ue.all],e)},interpret:()=>!0};const{Core:xn,Schema:jn,Instance:En}=Dt;var Pn={compile:(e,t)=>Ue.pipeline([jn.entries,Ue.map((async([e,n])=>[e,jn.typeOf(n,"array")?jn.value(n):await xn.compileSchema(n,t)])),Ue.all],e),interpret:(e,t,n,a)=>{const r=En.value(t);return!En.typeOf(t,"object")||e.every((([e,i])=>!(e in r)||(Array.isArray(i)?i.every((e=>e in r)):xn.interpretSchema(i,t,n,a))))}};const{Schema:An,Instance:kn}=Dt;var Cn={compile:e=>Ue.pipeline([An.entries,Ue.map((([e,t])=>[e,An.value(t)])),Ue.all],e),interpret:(e,t)=>{const n=kn.value(t);return!kn.typeOf(t,"object")||e.every((([e,t])=>!(e in n)||t.every((e=>e in n))))}};const{Core:Nn,Schema:Rn,Instance:Tn}=Dt;var Dn={compile:(e,t)=>Ue.pipeline([Rn.entries,Ue.map((async([e,n])=>[e,await Nn.compileSchema(n,t)])),Ue.all],e),interpret:(e,t,n,a)=>{const r=Tn.value(t);return!Tn.typeOf(t,"object")||e.every((([e,i])=>!(e in r)||Nn.interpretSchema(i,t,n,a)))},collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,[r,i])=>{if(!e||!Tn.has(r,t))return e;const s=Nn.collectEvaluatedProperties(i,t,n,a);return!1!==s&&e.concat(s)}),[])};const{Schema:qn,Instance:Mn}=Dt;var Vn={compile:e=>qn.value(e).map(mn),interpret:(e,t)=>e.some((e=>mn(Mn.value(t))===e))};const{Schema:Ln,Instance:Jn}=Dt;var _n={compile:async e=>Ln.value(e),interpret:(e,t)=>!Jn.typeOf(t,"number")||Jn.value(t)<e};const{Schema:zn,Instance:Un}=Dt;var Fn={compile:async e=>zn.value(e),interpret:(e,t)=>!Un.typeOf(t,"number")||Un.value(t)>e};const{Core:Bn}=Dt;var Kn={compile:(e,t)=>Bn.compileSchema(e,t),interpret:(e,t,n,a)=>(Bn.interpretSchema(e,t,n,a),!0),collectEvaluatedProperties:(e,t,n,a)=>Bn.collectEvaluatedProperties(e,t,n,a)||[],collectEvaluatedItems:(e,t,n,a)=>Bn.collectEvaluatedItems(e,t,n,a)||new Set};const{Core:Gn,Schema:Zn}=Dt,Hn=(e,t,n,a)=>{const r=n[e][2];return"boolean"==typeof r?r:r.every((([e,,r])=>Gn.getKeyword(e).interpret(r,t,n,a)))};var Wn={compile:async(e,t,n)=>{if(Zn.has("if",n)){const a=await Zn.step("if",n);return[await Gn.compileSchema(a,t),await Gn.compileSchema(e,t)]}return[]},interpret:([e,t],n,a,r)=>void 0===e||!Hn(e,n,a,r)||Gn.interpretSchema(t,n,a,r),collectEvaluatedProperties:([e,t],n,a,r)=>void 0!==e&&Hn(e,n,a,r)?Gn.collectEvaluatedProperties(t,n,a,r):[],collectEvaluatedItems:([e,t],n,a,r)=>void 0!==e&&Hn(e,n,a,r)?Gn.collectEvaluatedItems(t,n,a,r):new Set};const{Core:Xn,Schema:Qn}=Dt,Yn=(e,t,n,a)=>{const r=n[e][2];return"boolean"==typeof r?r:r.every((([e,,r])=>Xn.getKeyword(e).interpret(r,t,n,a)))};var ea={compile:async(e,t,n)=>{if(Qn.has("if",n)){const a=await Qn.step("if",n);return[await Xn.compileSchema(a,t),await Xn.compileSchema(e,t)]}return[]},interpret:([e,t],n,a,r)=>void 0===e||Yn(e,n,a,r)||Xn.interpretSchema(t,n,a,r),collectEvaluatedProperties:([e,t],n,a,r)=>void 0===e||Yn(e,n,a,r)?[]:Xn.collectEvaluatedProperties(t,n,a,r),collectEvaluatedItems:([e,t],n,a,r)=>void 0===e||Yn(e,n,a,r)?new Set:Xn.collectEvaluatedItems(t,n,a,r)};const{Core:ta,Schema:na,Instance:aa}=Dt,ra=(e,t,n,a)=>!aa.typeOf(t,"array")||("string"==typeof e?aa.every((t=>ta.interpretSchema(e,t,n,a)),t):aa.every(((t,r)=>!(r in e)||ta.interpretSchema(e[r],t,n,a)),t));var ia={compile:(e,t)=>na.typeOf(e,"array")?Ue.pipeline([na.map((e=>ta.compileSchema(e,t))),Ue.all],e):ta.compileSchema(e,t),interpret:ra,collectEvaluatedItems:(e,t,n,a)=>ra(e,t,n,a)&&("string"==typeof e?new Set(aa.map(((e,t)=>t),t)):new Set(e.map(((e,t)=>t))))};const{Core:sa,Schema:oa,Instance:ca}=Dt,la=([e,t],n,a,r)=>!ca.typeOf(n,"array")||ca.every(((n,i)=>i<e||sa.interpretSchema(t,n,a,r)),n);var ma={compile:async(e,t,n)=>{const a=await oa.step("prefixItems",n);return[oa.typeOf(a,"array")?oa.length(a):0,await sa.compileSchema(e,t)]},interpret:la,collectEvaluatedItems:(e,t,n,a)=>la(e,t,n,a)&&new Set(ca.map(((e,t)=>t),t))};const{Schema:pa,Instance:ua}=Dt;var fa={compile:e=>pa.value(e),interpret:(e,t)=>!ua.typeOf(t,"array")||ua.length(t)<=e};const{Schema:da,Instance:ha}=Dt;var ya={compile:e=>da.value(e),interpret:(e,t)=>!ha.typeOf(t,"string")||ha.length(t)<=e};const{Schema:va,Instance:ga}=Dt;var $a={compile:e=>va.value(e),interpret:(e,t)=>!ga.typeOf(t,"string")||[...ga.value(t)].length<=e};const{Schema:ba,Instance:Oa}=Dt;var Sa={compile:e=>ba.value(e),interpret:(e,t)=>!Oa.typeOf(t,"object")||Oa.keys(t).length<=e};const{Schema:Ia,Instance:wa}=Dt;var xa={compile:async(e,t,n)=>{const a=await Ia.step("exclusiveMaximum",n),r=Ia.value(a);return[Ia.value(e),r]},interpret:([e,t],n)=>{if(!wa.typeOf(n,"number"))return!0;const a=wa.value(n);return t?a<e:a<=e}};const{Schema:ja,Instance:Ea}=Dt;var Pa={compile:async e=>ja.value(e),interpret:(e,t)=>!Ea.typeOf(t,"number")||Ea.value(t)<=e};const{Schema:Aa,Instance:ka}=Dt;var Ca={compile:e=>Aa.value(e),interpret:(e,t)=>!ka.typeOf(t,"array")||ka.length(t)>=e};const{Schema:Na,Instance:Ra}=Dt;var Ta={compile:e=>Na.value(e),interpret:(e,t)=>!Ra.typeOf(t,"string")||Ra.value(t).length>=e};const{Schema:Da,Instance:qa}=Dt;var Ma={compile:e=>Da.value(e),interpret:(e,t)=>!qa.typeOf(t,"string")||[...qa.value(t)].length>=e};const{Schema:Va,Instance:La}=Dt;var Ja={compile:e=>Va.value(e),interpret:(e,t)=>{const n=La.value(t);return!La.typeOf(t,"object")||Object.keys(n).length>=e}};const{Schema:_a,Instance:za}=Dt;var Ua={compile:async(e,t,n)=>{const a=await _a.step("exclusiveMinimum",n),r=_a.value(a);return[_a.value(e),r]},interpret:([e,t],n)=>{if(!za.typeOf(n,"number"))return!0;const a=za.value(n);return t?a>e:a>=e}};const{Schema:Fa,Instance:Ba}=Dt;var Ka={compile:async e=>Fa.value(e),interpret:(e,t)=>!Ba.typeOf(t,"number")||Ba.value(t)>=e};const{Schema:Ga,Instance:Za}=Dt,Ha=(e,t)=>Math.abs(e-t)<1.1920929e-7;var Wa={compile:e=>Ga.value(e),interpret:(e,t)=>{if(!Za.typeOf(t,"number"))return!0;const n=Za.value(t)%e;return Ha(0,n)||Ha(e,n)}};const{Core:Xa}=Dt;var Qa={compile:Xa.compileSchema,interpret:(e,t,n,a)=>!Xa.interpretSchema(e,t,n,a)};const{Core:Ya,Schema:er}=Dt;var tr={compile:(e,t)=>Ue.pipeline([er.map((async e=>Ya.compileSchema(await e,t))),Ue.all],e),interpret:(e,t,n,a)=>{let r=0;for(const i of e)if(Ya.interpretSchema(i,t,n,a)&&r++,r>1)break;return 1===r},collectEvaluatedProperties:(e,t,n,a)=>{let r=0;return e.reduce(((e,i)=>{if(r>1)return!1;const s=Ya.collectEvaluatedProperties(i,t,n,a);return s?0==r++&&s:e}),!1)},collectEvaluatedItems:(e,t,n,a)=>{let r=0;return e.reduce(((e,i)=>{if(r>1)return!1;const s=Ya.collectEvaluatedItems(i,t,n,a);return s?0==r++&&s:e}),!1)}};const{Schema:nr,Instance:ar}=Dt;var rr={compile:e=>new RegExp(nr.value(e),"u"),interpret:(e,t)=>!ar.typeOf(t,"string")||e.test(ar.value(t))};const{Core:ir,Schema:sr,Instance:or}=Dt,cr=(e,t,n,a)=>!or.typeOf(t,"object")||e.every((([e,r])=>or.entries(t).filter((([t])=>e.test(t))).every((([,e])=>ir.interpretSchema(r,e,n,a)))));var lr={compile:(e,t)=>Ue.pipeline([sr.entries,Ue.map((async([e,n])=>[new RegExp(e,"u"),await ir.compileSchema(n,t)])),Ue.all],e),interpret:cr,collectEvaluatedProperties:(e,t,n,a)=>cr(e,t,n,a)&&e.map((([e])=>e))};var mr={isObject:e=>"object"==typeof e&&!Array.isArray(e)&&null!==e,escapeRegExp:e=>e.replace(/[.*+\-?^${}()|[\]\\]/g,"\\$&")};const{Core:pr,Schema:ur,Instance:fr}=Dt,{escapeRegExp:dr}=mr,hr=(e,t,n,a)=>!fr.typeOf(t,"object")||fr.entries(t).filter((([t])=>t in e)).every((([t,r])=>pr.interpretSchema(e[t],r,n,a)));var yr={compile:(e,t)=>Ue.pipeline([ur.entries,Ue.reduce((async(e,[n,a])=>(e[n]=await pr.compileSchema(a,t),e)),Object.create(null))],e),interpret:hr,collectEvaluatedProperties:(e,t,n,a)=>hr(e,t,n,a)&&Object.keys(e).map((e=>new RegExp(`^${dr(e)}$`)))};const{Core:vr,Instance:gr}=Dt;var $r={compile:(e,t)=>vr.compileSchema(e,t),interpret:(e,t,n,a)=>!gr.typeOf(t,"object")||gr.keys(t).every((t=>vr.interpretSchema(e,gr.cons(t),n,a)))};const{Core:br,Schema:Or}=Dt,{safeResolveUrl:Sr,splitUrl:Ir}=X;var wr={compile:e=>{const t=Sr(e.id,Or.value(e));return Ir(t)},interpret:([e,t],n,a,r)=>{const i=t in a.metaData[e].dynamicAnchors?r[t]:e,s=Or.getAnchorPointer(a.metaData[i],t);return br.interpretSchema(`${i}#${s}`,n,a,r)},collectEvaluatedProperties:br.collectEvaluatedProperties,collectEvaluatedItems:br.collectEvaluatedItems};const{Core:xr,Schema:jr}=Dt;var Er={compile:async(e,t)=>{const n=await jr.get(jr.value(e),e);return xr.compileSchema(n,t)},interpret:xr.interpretSchema,collectEvaluatedProperties:xr.collectEvaluatedProperties,collectEvaluatedItems:xr.collectEvaluatedItems};const{Schema:Pr,Instance:Ar}=Dt;var kr={compile:e=>Pr.value(e),interpret:(e,t)=>!Ar.typeOf(t,"object")||e.every((e=>Ar.value(t).hasOwnProperty(e)))};const{Core:Cr,Schema:Nr,Instance:Rr}=Dt,Tr=(e,t,n,a)=>!Rr.typeOf(t,"array")||Rr.every(((t,r)=>!(r in e)||Cr.interpretSchema(e[r],t,n,a)),t);var Dr={compile:(e,t)=>Ue.pipeline([Nr.map((e=>Cr.compileSchema(e,t))),Ue.all],e),interpret:Tr,collectEvaluatedItems:(e,t,n,a)=>Tr(e,t,n,a)&&new Set(e.map(((e,t)=>t)))};const{Schema:qr,Instance:Mr}=Dt;var Vr={compile:e=>qr.value(e),interpret:(e,t)=>"string"==typeof e?Mr.typeOf(t,e):e.some(Mr.typeOf(t))};const{Core:Lr,Schema:Jr,Instance:_r}=Dt,zr=([e,t],n,a,r)=>{if(!_r.typeOf(n,"array"))return!0;const i=Lr.collectEvaluatedItems(e,n,a,r,!0);return!1===i||_r.every(((e,s)=>i.has(s)||Lr.interpretSchema(t,_r.step(s,n),a,r)),n)};var Ur={compile:async(e,t,n)=>[Jr.uri(n),await Lr.compileSchema(e,t)],interpret:zr,collectEvaluatedItems:(e,t,n,a)=>zr(e,t,n,a)&&new Set(_r.map(((e,t)=>t),t))};const{Core:Fr,Schema:Br,Instance:Kr}=Dt,Gr=([e,t],n,a,r)=>{if(!Kr.typeOf(n,"object"))return!0;const i=Fr.collectEvaluatedProperties(e,n,a,r,!0);return!i||Kr.entries(n).filter((([e])=>!i.some((t=>e.match(t))))).every((([,e])=>Fr.interpretSchema(t,e,a,r)))};var Zr={compile:async(e,t,n)=>[Br.uri(n),await Fr.compileSchema(e,t)],interpret:Gr,collectEvaluatedProperties:(e,t,n,a)=>Gr(e,t,n,a)&&[new RegExp("")]};const{Schema:Hr,Instance:Wr}=Dt;var Xr={compile:e=>Hr.value(e),interpret:(e,t)=>{if(!Wr.typeOf(t,"array")||!1===e)return!0;const n=Wr.map((e=>mn(Wr.value(e))),t);return new Set(n).size===n.length}};const{Keywords:Qr}=Dt;var Yr={additionalItems:Lt,additionalItems6:Ft,additionalProperties:Zt,additionalProperties6:Yt,allOf:nn,anyOf:sn,const:fn,contains:yn,containsMinContainsMaxContains:On,definitions:wn,dependencies:Pn,dependentRequired:Cn,dependentSchemas:Dn,enum:Vn,exclusiveMaximum:_n,exclusiveMinimum:Fn,if:Kn,then:Wn,else:ea,items:ia,items202012:ma,maxItems:fa,maxLength:ya,maxLength6:$a,maxProperties:Sa,maximumExclusiveMaximum:xa,maximum:Pa,metaData:Qr.metaData,minItems:Ca,minLength:Ta,minLength6:Ma,minProperties:Ja,minimumExclusiveMinimum:Ua,minimum:Ka,multipleOf:Wa,not:Qa,oneOf:tr,pattern:rr,patternProperties:lr,properties:yr,propertyNames:$r,dynamicRef:wr,ref:Er,required:kr,tupleItems:Dr,type:Vr,unevaluatedItems:Ur,unevaluatedProperties:Zr,uniqueItems:Xr,validate:Qr.validate};const{Core:ei,Schema:ti}=Dt,ni="http://json-schema.org/draft-04/schema";ti.setConfig(ni,"baseToken","id"),ti.setConfig(ni,"embeddedToken","id"),ti.setConfig(ni,"anchorToken","id"),ti.setConfig(ni,"jrefToken","$ref"),ti.add(JSON.parse('{\n    "id": "http://json-schema.org/draft-04/schema#",\n    "$schema": "http://json-schema.org/draft-04/schema#",\n    "description": "Core schema meta-schema",\n    "definitions": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$ref": "#" }\n        },\n        "positiveInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "positiveIntegerDefault0": {\n            "allOf": [ { "$ref": "#/definitions/positiveInteger" }, { "default": 0 } ]\n        },\n        "simpleTypes": {\n            "enum": [ "array", "boolean", "integer", "null", "number", "object", "string" ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "minItems": 1,\n            "uniqueItems": true\n        }\n    },\n    "type": "object",\n    "properties": {\n        "id": {\n            "type": "string"\n        },\n        "$schema": {\n            "type": "string"\n        },\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": {},\n        "multipleOf": {\n            "type": "number",\n            "minimum": 0,\n            "exclusiveMinimum": true\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "boolean",\n            "default": false\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxLength": { "$ref": "#/definitions/positiveInteger" },\n        "minLength": { "$ref": "#/definitions/positiveIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "additionalItems": {\n            "anyOf": [\n                { "type": "boolean" },\n                { "$ref": "#" }\n            ],\n            "default": {}\n        },\n        "items": {\n            "anyOf": [\n                { "$ref": "#" },\n                { "$ref": "#/definitions/schemaArray" }\n            ],\n            "default": {}\n        },\n        "maxItems": { "$ref": "#/definitions/positiveInteger" },\n        "minItems": { "$ref": "#/definitions/positiveIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxProperties": { "$ref": "#/definitions/positiveInteger" },\n        "minProperties": { "$ref": "#/definitions/positiveIntegerDefault0" },\n        "required": { "$ref": "#/definitions/stringArray" },\n        "additionalProperties": {\n            "anyOf": [\n                { "type": "boolean" },\n                { "$ref": "#" }\n            ],\n            "default": {}\n        },\n        "definitions": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "dependencies": {\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$ref": "#" },\n                    { "$ref": "#/definitions/stringArray" }\n                ]\n            }\n        },\n        "enum": {\n            "type": "array",\n            "minItems": 1,\n            "uniqueItems": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/definitions/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/definitions/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        },\n        "format": { "type": "string" },\n        "allOf": { "$ref": "#/definitions/schemaArray" },\n        "anyOf": { "$ref": "#/definitions/schemaArray" },\n        "oneOf": { "$ref": "#/definitions/schemaArray" },\n        "not": { "$ref": "#" }\n    },\n    "dependencies": {\n        "exclusiveMaximum": [ "maximum" ],\n        "exclusiveMinimum": [ "minimum" ]\n    },\n    "default": {}\n}')),ei.defineVocabulary(ni,{validate:Yr.validate,additionalItems:Yr.additionalItems,additionalProperties:Yr.additionalProperties,allOf:Yr.allOf,anyOf:Yr.anyOf,default:Yr.metaData,definitions:Yr.definitions,dependencies:Yr.dependencies,description:Yr.metaData,enum:Yr.enum,format:Yr.metaData,items:Yr.items,maxItems:Yr.maxItems,maxLength:Yr.maxLength,maxProperties:Yr.maxProperties,maximum:Yr.maximumExclusiveMaximum,minItems:Yr.minItems,minLength:Yr.minLength,minProperties:Yr.minProperties,minimum:Yr.minimumExclusiveMinimum,multipleOf:Yr.multipleOf,not:Yr.not,oneOf:Yr.oneOf,pattern:Yr.pattern,patternProperties:Yr.patternProperties,properties:Yr.properties,required:Yr.required,title:Yr.metaData,type:Yr.type,uniqueItems:Yr.uniqueItems});const ai="http://json-schema.org/draft-04/hyper-schema";ti.setConfig(ai,"baseToken","id"),ti.setConfig(ai,"embeddedToken","id"),ti.setConfig(ai,"anchorToken","id"),ti.setConfig(ai,"jrefToken","$ref"),ti.add(JSON.parse('{\n    "$schema": "http://json-schema.org/draft-04/hyper-schema#",\n    "id": "http://json-schema.org/draft-04/hyper-schema#",\n    "title": "JSON Hyper-Schema",\n    "allOf": [\n        {"$ref": "http://json-schema.org/draft-04/schema#"}\n    ],\n    "properties": {\n        "additionalItems": {\n            "anyOf": [\n                {"type": "boolean"},\n                {"$ref": "#"}\n            ]\n        },\n        "additionalProperties": {\n            "anyOf": [\n                {"type": "boolean"},\n                {"$ref": "#"}\n            ]\n        },\n        "dependencies": {\n            "additionalProperties": {\n                "anyOf": [\n                    {"$ref": "#"},\n                    {"type": "array"}\n                ]\n            }\n        },\n        "items": {\n            "anyOf": [\n                {"$ref": "#"},\n                {"$ref": "#/definitions/schemaArray"}\n            ]\n        },\n        "definitions": {\n            "additionalProperties": {"$ref": "#"}\n        },\n        "patternProperties": {\n            "additionalProperties": {"$ref": "#"}\n        },\n        "properties": {\n            "additionalProperties": {"$ref": "#"}\n        },\n        "allOf": {"$ref": "#/definitions/schemaArray"},\n        "anyOf": {"$ref": "#/definitions/schemaArray"},\n        "oneOf": {"$ref": "#/definitions/schemaArray"},\n        "not": { "$ref": "#" },\n\n        "links": {\n            "type": "array",\n            "items": {"$ref": "#/definitions/linkDescription"}\n        },\n        "fragmentResolution": {\n            "type": "string"\n        },\n        "media": {\n            "type": "object",\n            "properties": {\n                "type": {\n                    "description": "A media type, as described in RFC 2046",\n                    "type": "string"\n                },\n                "binaryEncoding": {\n                    "description": "A content encoding scheme, as described in RFC 2045",\n                    "type": "string"\n                }\n            }\n        },\n        "pathStart": {\n            "description": "Instances\' URIs must start with this value for this schema to apply to them",\n            "type": "string",\n            "format": "uri"\n        }\n    },\n    "definitions": {\n        "schemaArray": {\n            "type": "array",\n            "items": {"$ref": "#"}\n        },\n        "linkDescription": {\n            "title": "Link Description Object",\n            "type": "object",\n            "required": ["href", "rel"],\n            "properties": {\n                "href": {\n                    "description": "a URI template, as defined by RFC 6570, with the addition of the $, ( and ) characters for pre-processing",\n                    "type": "string"\n                },\n                "rel": {\n                    "description": "relation to the target resource of the link",\n                    "type": "string"\n                },\n                "title": {\n                    "description": "a title for the link",\n                    "type": "string"\n                },\n                "targetSchema": {\n                    "description": "JSON Schema describing the link target",\n                    "$ref": "#"\n                },\n                "mediaType": {\n                    "description": "media type (as defined by RFC 2046) describing the link target",\n                    "type": "string"\n                },\n                "method": {\n                    "description": "method for requesting the target of the link (e.g. for HTTP this might be \\"GET\\" or \\"DELETE\\")",\n                    "type": "string"\n                },\n                "encType": {\n                    "description": "The media type in which to submit data along with the request",\n                    "type": "string",\n                    "default": "application/json"\n                },\n                "schema": {\n                    "description": "Schema describing the data to submit along with the request",\n                    "$ref": "#"\n                }\n            }\n        },\n        "readOnly": {\n            "description": "If true, indicates that the value of this property is controlled by the server.",\n            "type": "boolean",\n            "default": false\n        }\n    },\n    "links": [\n        {\n            "rel": "self",\n            "href": "{+id}"\n        },\n        {\n            "rel": "full",\n            "href": "{+($ref)}"\n        }\n    ]\n}')),ei.defineVocabulary(ai,{validate:Yr.validate,additionalItems:Yr.additionalItems,additionalProperties:Yr.additionalProperties,allOf:Yr.allOf,anyOf:Yr.anyOf,default:Yr.metaData,definitions:Yr.definitions,dependencies:Yr.dependencies,description:Yr.metaData,enum:Yr.enum,format:Yr.metaData,fragmentResolution:Yr.metaData,items:Yr.items,maxItems:Yr.maxItems,minProperties:Yr.minProperties,maxProperties:Yr.maxProperties,maximum:Yr.maximumExclusiveMaximum,media:Yr.metaData,minItems:Yr.minItems,minLength:Yr.minLength,maxLength:Yr.maxLength,minimum:Yr.minimumExclusiveMinimum,multipleOf:Yr.multipleOf,links:Yr.metaData,not:Yr.not,oneOf:Yr.oneOf,pathStart:Yr.metaData,pattern:Yr.pattern,patternProperties:Yr.patternProperties,properties:Yr.properties,readOnly:Yr.metaData,required:Yr.required,title:Yr.metaData,type:Yr.type,uniqueItems:Yr.uniqueItems});const{Core:ri,Schema:ii}=Dt,si="http://json-schema.org/draft-06/schema";ii.setConfig(si,"baseToken","$id"),ii.setConfig(si,"embeddedToken","$id"),ii.setConfig(si,"anchorToken","$id"),ii.setConfig(si,"jrefToken","$ref"),ii.add(JSON.parse('{\n    "$schema": "http://json-schema.org/draft-06/schema#",\n    "$id": "http://json-schema.org/draft-06/schema#",\n    "title": "Core schema meta-schema",\n    "definitions": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$ref": "#" }\n        },\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "allOf": [\n                { "$ref": "#/definitions/nonNegativeInteger" },\n                { "default": 0 }\n            ]\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    },\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": {},\n        "examples": {\n            "type": "array",\n            "items": {}\n        },\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "additionalItems": { "$ref": "#" },\n        "items": {\n            "anyOf": [\n                { "$ref": "#" },\n                { "$ref": "#/definitions/schemaArray" }\n            ],\n            "default": {}\n        },\n        "maxItems": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "contains": { "$ref": "#" },\n        "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/definitions/stringArray" },\n        "additionalProperties": { "$ref": "#" },\n        "definitions": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "dependencies": {\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$ref": "#" },\n                    { "$ref": "#/definitions/stringArray" }\n                ]\n            }\n        },\n        "propertyNames": { "$ref": "#" },\n        "const": {},\n        "enum": {\n            "type": "array",\n            "minItems": 1,\n            "uniqueItems": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/definitions/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/definitions/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        },\n        "format": { "type": "string" },\n        "allOf": { "$ref": "#/definitions/schemaArray" },\n        "anyOf": { "$ref": "#/definitions/schemaArray" },\n        "oneOf": { "$ref": "#/definitions/schemaArray" },\n        "not": { "$ref": "#" }\n    },\n    "default": {}\n}')),ri.defineVocabulary(si,{validate:Yr.validate,additionalItems:Yr.additionalItems6,additionalProperties:Yr.additionalProperties6,allOf:Yr.allOf,anyOf:Yr.anyOf,const:Yr.const,contains:Yr.contains,default:Yr.metaData,definitions:Yr.definitions,dependencies:Yr.dependencies,description:Yr.metaData,enum:Yr.enum,examples:Yr.metaData,exclusiveMaximum:Yr.exclusiveMaximum,exclusiveMinimum:Yr.exclusiveMinimum,format:Yr.metaData,items:Yr.items,maxItems:Yr.maxItems,maxLength:Yr.maxLength6,maxProperties:Yr.maxProperties,maximum:Yr.maximum,minItems:Yr.minItems,minLength:Yr.minLength6,minProperties:Yr.minProperties,minimum:Yr.minimum,multipleOf:Yr.multipleOf,not:Yr.not,oneOf:Yr.oneOf,pattern:Yr.pattern,patternProperties:Yr.patternProperties,properties:Yr.properties,propertyNames:Yr.propertyNames,required:Yr.required,title:Yr.metaData,type:Yr.type,uniqueItems:Yr.uniqueItems});const{Core:oi,Schema:ci}=Dt,li="http://json-schema.org/draft-07/schema";ci.setConfig(li,"baseToken","$id"),ci.setConfig(li,"embeddedToken","$id"),ci.setConfig(li,"anchorToken","$id"),ci.setConfig(li,"jrefToken","$ref"),ci.add(JSON.parse('{\n    "$schema": "http://json-schema.org/draft-07/schema#",\n    "$id": "http://json-schema.org/draft-07/schema#",\n    "title": "Core schema meta-schema",\n    "definitions": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$ref": "#" }\n        },\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "allOf": [\n                { "$ref": "#/definitions/nonNegativeInteger" },\n                { "default": 0 }\n            ]\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    },\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$comment": {\n            "type": "string"\n        },\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": true,\n        "readOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "writeOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "examples": {\n            "type": "array",\n            "items": true\n        },\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "additionalItems": { "$ref": "#" },\n        "items": {\n            "anyOf": [\n                { "$ref": "#" },\n                { "$ref": "#/definitions/schemaArray" }\n            ],\n            "default": true\n        },\n        "maxItems": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "contains": { "$ref": "#" },\n        "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/definitions/stringArray" },\n        "additionalProperties": { "$ref": "#" },\n        "definitions": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "propertyNames": { "format": "regex" },\n            "default": {}\n        },\n        "dependencies": {\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$ref": "#" },\n                    { "$ref": "#/definitions/stringArray" }\n                ]\n            }\n        },\n        "propertyNames": { "$ref": "#" },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true,\n            "minItems": 1,\n            "uniqueItems": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/definitions/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/definitions/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        },\n        "format": { "type": "string" },\n        "contentMediaType": { "type": "string" },\n        "contentEncoding": { "type": "string" },\n        "if": { "$ref": "#" },\n        "then": { "$ref": "#" },\n        "else": { "$ref": "#" },\n        "allOf": { "$ref": "#/definitions/schemaArray" },\n        "anyOf": { "$ref": "#/definitions/schemaArray" },\n        "oneOf": { "$ref": "#/definitions/schemaArray" },\n        "not": { "$ref": "#" }\n    },\n    "default": true\n}')),oi.defineVocabulary(li,{validate:Yr.validate,additionalItems:Yr.additionalItems6,additionalProperties:Yr.additionalProperties6,allOf:Yr.allOf,anyOf:Yr.anyOf,const:Yr.const,contains:Yr.contains,default:Yr.metaData,definitions:Yr.definitions,dependencies:Yr.dependencies,description:Yr.metaData,enum:Yr.enum,exclusiveMaximum:Yr.exclusiveMaximum,exclusiveMinimum:Yr.exclusiveMinimum,format:Yr.metaData,if:Yr.if,then:Yr.then,else:Yr.else,items:Yr.items,maxItems:Yr.maxItems,maxLength:Yr.maxLength6,maxProperties:Yr.maxProperties,maximum:Yr.maximum,minItems:Yr.minItems,minLength:Yr.minLength6,minProperties:Yr.minProperties,minimum:Yr.minimum,multipleOf:Yr.multipleOf,not:Yr.not,oneOf:Yr.oneOf,pattern:Yr.pattern,patternProperties:Yr.patternProperties,properties:Yr.properties,propertyNames:Yr.propertyNames,readOnly:Yr.metaData,required:Yr.required,title:Yr.metaData,type:Yr.type,uniqueItems:Yr.uniqueItems,writeOnly:Yr.metaData});const{Core:mi,Schema:pi}=Dt,ui="https://json-schema.org/draft/2019-09/schema";pi.setConfig(ui,"baseToken","$id"),pi.setConfig(ui,"embeddedToken","$id"),pi.setConfig(ui,"anchorToken","$anchor"),pi.setConfig(ui,"recursiveAnchorToken","$recursiveAnchor"),pi.setConfig(ui,"vocabularyToken","$vocabulary"),pi.setConfig(ui,"mandatoryVocabularies",["https://json-schema.org/draft/2019-09/vocab/core"]),pi.add(JSON.parse('{\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$id": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2019-09/vocab/core": true,\n        "https://json-schema.org/draft/2019-09/vocab/applicator": true,\n        "https://json-schema.org/draft/2019-09/vocab/validation": true,\n        "https://json-schema.org/draft/2019-09/vocab/meta-data": true,\n        "https://json-schema.org/draft/2019-09/vocab/format": false,\n        "https://json-schema.org/draft/2019-09/vocab/content": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Core and Validation specifications meta-schema",\n    "allOf": [\n        {"$ref": "meta/core"},\n        {"$ref": "meta/applicator"},\n        {"$ref": "meta/validation"},\n        {"$ref": "meta/meta-data"},\n        {"$ref": "meta/format"},\n        {"$ref": "meta/content"}\n    ],\n    "type": ["object", "boolean"],\n    "properties": {\n        "definitions": {\n            "$comment": "While no longer an official keyword as it is replaced by $defs, this keyword is retained in the meta-schema to prevent incompatible extensions as it remains in common use.",\n            "type": "object",\n            "additionalProperties": { "$recursiveRef": "#" },\n            "default": {}\n        },\n        "dependencies": {\n            "$comment": "\\"dependencies\\" is no longer a keyword, but schema authors should avoid redefining it to facilitate a smooth transition to \\"dependentSchemas\\" and \\"dependentRequired\\"",\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$recursiveRef": "#" },\n                    { "$ref": "meta/validation#/$defs/stringArray" }\n                ]\n            }\n        }\n    }\n}')),pi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/core",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/core": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Core vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference",\n            "$comment": "Non-empty fragments not allowed.",\n            "pattern": "^[^#]*#?$"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$anchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z][-A-Za-z0-9.:_]*$"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$recursiveRef": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$recursiveAnchor": {\n            "type": "boolean",\n            "default": false\n        },\n        "$vocabulary": {\n            "type": "object",\n            "propertyNames": {\n                "type": "string",\n                "format": "uri"\n            },\n            "additionalProperties": {\n                "type": "boolean"\n            }\n        },\n        "$comment": {\n            "type": "string"\n        },\n        "$defs": {\n            "type": "object",\n            "additionalProperties": { "$recursiveRef": "#" },\n            "default": {}\n        }\n    }\n}')),mi.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/core",{validate:Yr.validate,$defs:Yr.definitions,$recursiveRef:Yr.dynamicRef,$ref:Yr.ref}),pi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/applicator",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2019-09/vocab/applicator": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Applicator vocabulary meta-schema",\n    "properties": {\n        "additionalItems": { "$recursiveRef": "#" },\n        "unevaluatedItems": { "$recursiveRef": "#" },\n        "items": {\n            "anyOf": [\n                { "$recursiveRef": "#" },\n                { "$ref": "#/$defs/schemaArray" }\n            ]\n        },\n        "contains": { "$recursiveRef": "#" },\n        "additionalProperties": { "$recursiveRef": "#" },\n        "unevaluatedProperties": { "$recursiveRef": "#" },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$recursiveRef": "#" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$recursiveRef": "#" },\n            "propertyNames": { "format": "regex" },\n            "default": {}\n        },\n        "dependentSchemas": {\n            "type": "object",\n            "additionalProperties": {\n                "$recursiveRef": "#"\n            }\n        },\n        "propertyNames": { "$recursiveRef": "#" },\n        "if": { "$recursiveRef": "#" },\n        "then": { "$recursiveRef": "#" },\n        "else": { "$recursiveRef": "#" },\n        "allOf": { "$ref": "#/$defs/schemaArray" },\n        "anyOf": { "$ref": "#/$defs/schemaArray" },\n        "oneOf": { "$ref": "#/$defs/schemaArray" },\n        "not": { "$recursiveRef": "#" }\n    },\n    "$defs": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$recursiveRef": "#" }\n        }\n    }\n}')),mi.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/applicator",{additionalItems:Yr.additionalItems6,additionalProperties:Yr.additionalProperties6,allOf:Yr.allOf,anyOf:Yr.anyOf,contains:Yr.containsMinContainsMaxContains,dependentSchemas:Yr.dependentSchemas,if:Yr.if,then:Yr.then,else:Yr.else,items:Yr.items,not:Yr.not,oneOf:Yr.oneOf,patternProperties:Yr.patternProperties,properties:Yr.properties,propertyNames:Yr.propertyNames,unevaluatedItems:Yr.unevaluatedItems,unevaluatedProperties:Yr.unevaluatedProperties}),pi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/validation",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/validation": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Validation vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minLength": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "maxItems": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minItems": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxContains": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minContains": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 1\n        },\n        "maxProperties": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/$defs/stringArray" },\n        "dependentRequired": {\n            "type": "object",\n            "additionalProperties": {\n                "$ref": "#/$defs/stringArray"\n            }\n        },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/$defs/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/$defs/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        }\n    },\n    "$defs": {\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 0\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    }\n}')),mi.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/validation",{const:Yr.const,dependentRequired:Yr.dependentRequired,enum:Yr.enum,exclusiveMaximum:Yr.exclusiveMaximum,exclusiveMinimum:Yr.exclusiveMinimum,maxItems:Yr.maxItems,maxLength:Yr.maxLength6,maxProperties:Yr.maxProperties,maximum:Yr.maximum,minItems:Yr.minItems,minLength:Yr.minLength6,minProperties:Yr.minProperties,minimum:Yr.minimum,multipleOf:Yr.multipleOf,pattern:Yr.pattern,required:Yr.required,type:Yr.type,uniqueItems:Yr.uniqueItems}),pi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/meta-data",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/meta-data": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Meta-data vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": true,\n        "deprecated": {\n            "type": "boolean",\n            "default": false\n        },\n        "readOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "writeOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "examples": {\n            "type": "array",\n            "items": true\n        }\n    }\n}')),mi.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/meta-data",{default:Yr.metaData,deprecated:Yr.metaData,description:Yr.metaData,examples:Yr.metaData,readOnly:Yr.metaData,title:Yr.metaData,writeOnly:Yr.metaData}),pi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/format",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/format": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Format vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),pi.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/content",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/content": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Content vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "contentMediaType": { "type": "string" },\n        "contentEncoding": { "type": "string" },\n        "contentSchema": { "$recursiveRef": "#" }\n    }\n}')),mi.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/content",{contentEncoding:Yr.metaData,contentMediaType:Yr.metaData,contentSchema:Yr.metaData});const{Core:fi,Schema:di}=Dt,hi="https://json-schema.org/draft/2020-12/schema";di.setConfig(hi,"baseToken","$id"),di.setConfig(hi,"embeddedToken","$id"),di.setConfig(hi,"anchorToken","$anchor"),di.setConfig(hi,"dynamicAnchorToken","$dynamicAnchor"),di.setConfig(hi,"vocabularyToken","$vocabulary"),di.setConfig(hi,"mandatoryVocabularies",["https://json-schema.org/draft/2020-12/vocab/core"]),di.add(JSON.parse('{\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$id": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/core": true,\n        "https://json-schema.org/draft/2020-12/vocab/applicator": true,\n        "https://json-schema.org/draft/2020-12/vocab/unevaluated": true,\n        "https://json-schema.org/draft/2020-12/vocab/validation": true,\n        "https://json-schema.org/draft/2020-12/vocab/meta-data": true,\n        "https://json-schema.org/draft/2020-12/vocab/format-annotation": true,\n        "https://json-schema.org/draft/2020-12/vocab/content": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Core and Validation specifications meta-schema",\n    "allOf": [\n        {"$ref": "meta/core"},\n        {"$ref": "meta/applicator"},\n        {"$ref": "meta/unevaluated"},\n        {"$ref": "meta/validation"},\n        {"$ref": "meta/meta-data"},\n        {"$ref": "meta/format-annotation"},\n        {"$ref": "meta/content"}\n    ],\n    "type": ["object", "boolean"],\n    "properties": {\n        "definitions": {\n            "$comment": "While no longer an official keyword as it is replaced by $defs, this keyword is retained in the meta-schema to prevent incompatible extensions as it remains in common use.",\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        },\n        "dependencies": {\n            "$comment": "\\"dependencies\\" is no longer a keyword, but schema authors should avoid redefining it to facilitate a smooth transition to \\"dependentSchemas\\" and \\"dependentRequired\\"",\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$dynamicRef": "#meta" },\n                    { "$ref": "meta/validation#/$defs/stringArray" }\n                ]\n            }\n        }\n    }\n}')),di.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/core",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/core": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Core vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference",\n            "$comment": "Non-empty fragments not allowed.",\n            "pattern": "^[^#]*#?$"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$anchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z_][-A-Za-z0-9._]*$"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$dynamicRef": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$dynamicAnchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z_][-A-Za-z0-9._]*$"\n        },\n        "$vocabulary": {\n            "type": "object",\n            "propertyNames": {\n                "type": "string",\n                "format": "uri"\n            },\n            "additionalProperties": {\n                "type": "boolean"\n            }\n        },\n        "$comment": {\n            "type": "string"\n        },\n        "$defs": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        }\n    }\n}')),fi.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/core",{validate:Yr.validate,$defs:Yr.definitions,$dynamicRef:Yr.dynamicRef,$ref:Yr.ref}),di.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/applicator",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/applicator": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Applicator vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "prefixItems": { "$ref": "#/$defs/schemaArray" },\n        "items": { "$dynamicRef": "#meta" },\n        "contains": { "$dynamicRef": "#meta" },\n        "additionalProperties": { "$dynamicRef": "#meta" },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "propertyNames": { "format": "regex" },\n            "default": {}\n        },\n        "dependentSchemas": {\n            "type": "object",\n            "additionalProperties": {\n                "$dynamicRef": "#meta"\n            }\n        },\n        "propertyNames": { "$dynamicRef": "#meta" },\n        "if": { "$dynamicRef": "#meta" },\n        "then": { "$dynamicRef": "#meta" },\n        "else": { "$dynamicRef": "#meta" },\n        "allOf": { "$ref": "#/$defs/schemaArray" },\n        "anyOf": { "$ref": "#/$defs/schemaArray" },\n        "oneOf": { "$ref": "#/$defs/schemaArray" },\n        "not": { "$dynamicRef": "#meta" }\n    },\n    "$defs": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$dynamicRef": "#meta" }\n        }\n    }\n}')),fi.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/applicator",{additionalProperties:Yr.additionalProperties6,allOf:Yr.allOf,anyOf:Yr.anyOf,contains:Yr.containsMinContainsMaxContains,dependentSchemas:Yr.dependentSchemas,if:Yr.if,then:Yr.then,else:Yr.else,items:Yr.items202012,not:Yr.not,oneOf:Yr.oneOf,patternProperties:Yr.patternProperties,prefixItems:Yr.tupleItems,properties:Yr.properties,propertyNames:Yr.propertyNames}),di.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/validation",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/validation": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Validation vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minLength": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "maxItems": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minItems": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxContains": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minContains": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 1\n        },\n        "maxProperties": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/$defs/stringArray" },\n        "dependentRequired": {\n            "type": "object",\n            "additionalProperties": {\n                "$ref": "#/$defs/stringArray"\n            }\n        },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/$defs/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/$defs/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        }\n    },\n    "$defs": {\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 0\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    }\n}')),fi.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/validation",{const:Yr.const,dependentRequired:Yr.dependentRequired,enum:Yr.enum,exclusiveMaximum:Yr.exclusiveMaximum,exclusiveMinimum:Yr.exclusiveMinimum,maxItems:Yr.maxItems,maxLength:Yr.maxLength6,maxProperties:Yr.maxProperties,maximum:Yr.maximum,minItems:Yr.minItems,minLength:Yr.minLength6,minProperties:Yr.minProperties,minimum:Yr.minimum,multipleOf:Yr.multipleOf,pattern:Yr.pattern,required:Yr.required,type:Yr.type,uniqueItems:Yr.uniqueItems}),di.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/meta-data",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/meta-data": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Meta-data vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": true,\n        "deprecated": {\n            "type": "boolean",\n            "default": false\n        },\n        "readOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "writeOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "examples": {\n            "type": "array",\n            "items": true\n        }\n    }\n}')),fi.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/meta-data",{default:Yr.metaData,deprecated:Yr.metaData,description:Yr.metaData,examples:Yr.metaData,readOnly:Yr.metaData,title:Yr.metaData,writeOnly:Yr.metaData}),di.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/format-annotation",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/format-annotation": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Format vocabulary meta-schema for annotation results",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),fi.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/format-annotation",{format:Yr.metaData}),di.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/format-assertion",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/format-assertion": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Format vocabulary meta-schema for assertion results",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),di.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/content",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/content": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Content vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "contentMediaType": { "type": "string" },\n        "contentEncoding": { "type": "string" },\n        "contentSchema": { "$dynamicRef": "#meta" }\n    }\n}')),fi.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/content",{contentEncoding:Yr.metaData,contentMediaType:Yr.metaData,contentSchema:Yr.metaData}),di.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2020-12/meta/unevaluated",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/unevaluated": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Unevaluated applicator vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "unevaluatedItems": { "$dynamicRef": "#meta" },\n        "unevaluatedProperties": { "$dynamicRef": "#meta" }\n    }\n}')),fi.defineVocabulary("https://json-schema.org/draft/2020-12/vocab/unevaluated",{unevaluatedItems:Yr.unevaluatedItems,unevaluatedProperties:Yr.unevaluatedProperties});const{Core:yi,Schema:vi}=Dt;var gi={add:yi.add,get:vi.get,validate:yi.validate,compile:yi.compile,interpret:yi.interpret,setMetaOutputFormat:yi.setMetaOutputFormat,setShouldMetaValidate:yi.setShouldMetaValidate,FLAG:yi.FLAG,BASIC:yi.BASIC,DETAILED:yi.DETAILED,VERBOSE:yi.VERBOSE,Keywords:Yr};gi.add,gi.get,gi.validate,gi.compile,gi.interpret,gi.setMetaOutputFormat,gi.setShouldMetaValidate,gi.FLAG,gi.BASIC,gi.DETAILED,gi.VERBOSE,gi.Keywords;const $i='(?:\\\\["\\/\\\\brfnt]|\\\\u[0-9a-fA-F]{4}|[^"\\\\])',bi=`"${$i}*"`,Oi=`"${$i}*"(?=\\s*:)`;var Si=z((function(e){var t,n;t=_,n=function(){var e=Object.prototype.hasOwnProperty,t=Object.prototype.toString,n="boolean"==typeof(new RegExp).sticky;function a(e){return e&&"[object RegExp]"===t.call(e)}function r(e){return e&&"object"==typeof e&&!a(e)&&!Array.isArray(e)}function i(e){return"("+e+")"}function s(e){return e.length?"(?:"+e.map((function(e){return"(?:"+e+")"})).join("|")+")":"(?!)"}function o(e){if("string"==typeof e)return"(?:"+e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")+")";if(a(e)){if(e.ignoreCase)throw new Error("RegExp /i flag not allowed");if(e.global)throw new Error("RegExp /g flag is implied");if(e.sticky)throw new Error("RegExp /y flag is implied");if(e.multiline)throw new Error("RegExp /m flag is implied");return e.source}throw new Error("Not a pattern: "+e)}function c(t,n){if(r(n)||(n={match:n}),n.include)throw new Error("Matching rules cannot also include states");var i={defaultType:t,lineBreaks:!!n.error||!!n.fallback,pop:!1,next:null,push:null,error:!1,fallback:!1,value:null,type:null,shouldThrow:!1};for(var s in n)e.call(n,s)&&(i[s]=n[s]);if("string"==typeof i.type&&t!==i.type)throw new Error("Type transform cannot be a string (type '"+i.type+"' for token '"+t+"')");var o=i.match;return i.match=Array.isArray(o)?o:o?[o]:[],i.match.sort((function(e,t){return a(e)&&a(t)?0:a(t)?-1:a(e)?1:t.length-e.length})),i}function l(e){return Array.isArray(e)?function(e){for(var t=[],n=0;n<e.length;n++){var a=e[n];if(a.include)for(var r=[].concat(a.include),i=0;i<r.length;i++)t.push({include:r[i]});else{if(!a.type)throw new Error("Rule has no type: "+JSON.stringify(a));t.push(c(a.type,a))}}return t}(e):function(e){for(var t=Object.getOwnPropertyNames(e),n=[],a=0;a<t.length;a++){var i=t[a],s=e[i],o=[].concat(s);if("include"!==i){var l=[];o.forEach((function(e){r(e)?(l.length&&n.push(c(i,l)),n.push(c(i,e)),l=[]):l.push(e)})),l.length&&n.push(c(i,l))}else for(var m=0;m<o.length;m++)n.push({include:o[m]})}return n}(e)}var m=c("error",{lineBreaks:!0,shouldThrow:!0});function p(e,t){for(var r=null,c=Object.create(null),l=!0,p=null,u=[],f=[],d=0;d<e.length;d++)e[d].fallback&&(l=!1);for(d=0;d<e.length;d++){var h=e[d];if(h.include)throw new Error("Inheritance is not allowed in stateless lexers");if(h.error||h.fallback){if(r)throw!h.fallback==!r.fallback?new Error("Multiple "+(h.fallback?"fallback":"error")+" rules not allowed (for token '"+h.defaultType+"')"):new Error("fallback and error are mutually exclusive (for token '"+h.defaultType+"')");r=h}var y=h.match.slice();if(l)for(;y.length&&"string"==typeof y[0]&&1===y[0].length;)c[y.shift().charCodeAt(0)]=h;if(h.pop||h.push||h.next){if(!t)throw new Error("State-switching options are not allowed in stateless lexers (for token '"+h.defaultType+"')");if(h.fallback)throw new Error("State-switching options are not allowed on fallback tokens (for token '"+h.defaultType+"')")}if(0!==y.length){l=!1,u.push(h);for(var v=0;v<y.length;v++){var g=y[v];if(a(g))if(null===p)p=g.unicode;else if(p!==g.unicode&&!1===h.fallback)throw new Error("If one rule is /u then all must be")}var $=s(y.map(o)),b=new RegExp($);if(b.test(""))throw new Error("RegExp matches empty string: "+b);if(new RegExp("|"+$).exec("").length-1>0)throw new Error("RegExp has capture groups: "+b+"\nUse (?: … ) instead");if(!h.lineBreaks&&b.test("\n"))throw new Error("Rule should declare lineBreaks: "+b);f.push(i($))}}var O=r&&r.fallback,S=n&&!O?"ym":"gm",I=n||O?"":"|";return!0===p&&(S+="u"),{regexp:new RegExp(s(f)+I,S),groups:u,fast:c,error:r||m}}function u(e,t,n){var a=e&&(e.push||e.next);if(a&&!n[a])throw new Error("Missing state '"+a+"' (in token '"+e.defaultType+"' of state '"+t+"')");if(e&&e.pop&&1!=+e.pop)throw new Error("pop must be 1 (in token '"+e.defaultType+"' of state '"+t+"')")}var f=function(e,t){this.startState=t,this.states=e,this.buffer="",this.stack=[],this.reset()};f.prototype.reset=function(e,t){return this.buffer=e||"",this.index=0,this.line=t?t.line:1,this.col=t?t.col:1,this.queuedToken=t?t.queuedToken:null,this.queuedThrow=t?t.queuedThrow:null,this.setState(t?t.state:this.startState),this.stack=t&&t.stack?t.stack.slice():[],this},f.prototype.save=function(){return{line:this.line,col:this.col,state:this.state,stack:this.stack.slice(),queuedToken:this.queuedToken,queuedThrow:this.queuedThrow}},f.prototype.setState=function(e){if(e&&this.state!==e){this.state=e;var t=this.states[e];this.groups=t.groups,this.error=t.error,this.re=t.regexp,this.fast=t.fast}},f.prototype.popState=function(){this.setState(this.stack.pop())},f.prototype.pushState=function(e){this.stack.push(this.state),this.setState(e)};var d=n?function(e,t){return e.exec(t)}:function(e,t){var n=e.exec(t);return 0===n[0].length?null:n};function h(){return this.value}if(f.prototype._getGroup=function(e){for(var t=this.groups.length,n=0;n<t;n++)if(void 0!==e[n+1])return this.groups[n];throw new Error("Cannot find token type for matched text")},f.prototype.next=function(){var e=this.index;if(this.queuedGroup){var t=this._token(this.queuedGroup,this.queuedText,e);return this.queuedGroup=null,this.queuedText="",t}var n=this.buffer;if(e!==n.length){if(s=this.fast[n.charCodeAt(e)])return this._token(s,n.charAt(e),e);var a=this.re;a.lastIndex=e;var r=d(a,n),i=this.error;if(null==r)return this._token(i,n.slice(e,n.length),e);var s=this._getGroup(r),o=r[0];return i.fallback&&r.index!==e?(this.queuedGroup=s,this.queuedText=o,this._token(i,n.slice(e,r.index),e)):this._token(s,o,e)}},f.prototype._token=function(e,t,n){var a=0;if(e.lineBreaks){var r=/\n/g,i=1;if("\n"===t)a=1;else for(;r.exec(t);)a++,i=r.lastIndex}var s={type:"function"==typeof e.type&&e.type(t)||e.defaultType,value:"function"==typeof e.value?e.value(t):t,text:t,toString:h,offset:n,lineBreaks:a,line:this.line,col:this.col},o=t.length;if(this.index+=o,this.line+=a,0!==a?this.col=o-i+1:this.col+=o,e.shouldThrow)throw new Error(this.formatError(s,"invalid syntax"));return e.pop?this.popState():e.push?this.pushState(e.push):e.next&&this.setState(e.next),s},"undefined"!=typeof Symbol&&Symbol.iterator){var y=function(e){this.lexer=e};y.prototype.next=function(){var e=this.lexer.next();return{value:e,done:!e}},y.prototype[Symbol.iterator]=function(){return this},f.prototype[Symbol.iterator]=function(){return new y(this)}}return f.prototype.formatError=function(e,t){if(null==e){var n=this.buffer.slice(this.index);e={text:n,offset:this.index,lineBreaks:-1===n.indexOf("\n")?0:1,line:this.line,col:this.col}}var a=Math.max(0,e.offset-e.col+1),r=e.lineBreaks?e.text.indexOf("\n"):e.text.length,i=this.buffer.substring(a,e.offset+r);return t+=" at line "+e.line+" col "+e.col+":\n\n",t+="  "+i+"\n",t+="  "+Array(e.col).join(" ")+"^"},f.prototype.clone=function(){return new f(this.states,this.state)},f.prototype.has=function(e){return!0},{compile:function(e){var t=p(l(e));return new f({start:t},"start")},states:function(e,t){var n=e.$all?l(e.$all):[];delete e.$all;var a=Object.getOwnPropertyNames(e);t||(t=a[0]);for(var r=Object.create(null),i=0;i<a.length;i++)r[$=a[i]]=l(e[$]).concat(n);for(i=0;i<a.length;i++)for(var s=r[$=a[i]],o=Object.create(null),c=0;c<s.length;c++){var m=s[c];if(m.include){var d=[c,1];if(m.include!==$&&!o[m.include]){o[m.include]=!0;var h=r[m.include];if(!h)throw new Error("Cannot include nonexistent state '"+m.include+"' (in state '"+$+"')");for(var y=0;y<h.length;y++){var v=h[y];-1===s.indexOf(v)&&d.push(v)}}s.splice.apply(s,d),c--}}var g=Object.create(null);for(i=0;i<a.length;i++){var $;g[$=a[i]]=p(r[$],!0)}for(i=0;i<a.length;i++){var b=a[i],O=g[b],S=O.groups;for(c=0;c<S.length;c++)u(S[c],b,g);var I=Object.getOwnPropertyNames(O.fast);for(c=0;c<I.length;c++)u(O.fast[I[c]],b,g)}return new f(g,t)},error:Object.freeze({error:!0}),fallback:Object.freeze({fallback:!0}),keywords:function(e){for(var t=Object.create(null),n=Object.create(null),a=Object.getOwnPropertyNames(e),r=0;r<a.length;r++){var i=a[r],s=e[i];(Array.isArray(s)?s:[s]).forEach((function(e){if((n[e.length]=n[e.length]||[]).push(e),"string"!=typeof e)throw new Error("keyword must be string (in keyword '"+i+"')");t[e]=i}))}function o(e){return JSON.stringify(e)}var c="";for(var l in c+="switch (value.length) {\n",n){var m=n[l];c+="case "+l+":\n",c+="switch (value) {\n",m.forEach((function(e){var n=t[e];c+="case "+o(e)+": return "+o(n)+"\n"})),c+="}\n"}return c+="}\n",Function("value",c)}}},e.exports?e.exports=n():t.moo=n()})).compile({WS:{match:/(?:(?:\r?\n)|[ \t])+/,lineBreaks:!0},punctuation:/[:,]/,number:new RegExp("-?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][-+][0-9]+)?"),property:new RegExp(Oi),string:new RegExp(bi),grouping:["{","}","[","]"],boolean:["true","false"],null:["null"],other:/./});function Ii(e,t,n){const a=e.slice();return a[9]=t[n],a}function wi(e,t,n){const a=e.slice();return a[12]=t[n],a[14]=n,a}function xi(e){let t,n,f=e[14]+1+"";return{c(){t=a("div"),n=r(f),this.h()},l(e){t=i(e,"DIV",{class:!0});var a=s(t);n=o(a,f),a.forEach(c),this.h()},h(){l(t,"class","svelte-o0qsb5")},m(e,a){m(e,t,a),p(t,n)},p:u,d(e){e&&c(t)}}}function ji(e){let t,n=e[9].value+"";return{c(){t=r(n)},l(e){t=o(e,n)},m(e,n){m(e,t,n)},p(e,a){16&a&&n!==(n=e[9].value+"")&&S(t,n)},d(e){e&&c(t)}}}function Ei(e){let t,n,u=e[9].value+"";return{c(){t=a("span"),n=r(u),this.h()},l(e){t=i(e,"SPAN",{class:!0});var a=s(t);n=o(a,u),a.forEach(c),this.h()},h(){l(t,"class","null svelte-o0qsb5")},m(e,a){m(e,t,a),p(t,n)},p(e,t){16&t&&u!==(u=e[9].value+"")&&S(n,u)},d(e){e&&c(t)}}}function Pi(e){let t,n,u=e[9].value+"";return{c(){t=a("span"),n=r(u),this.h()},l(e){t=i(e,"SPAN",{class:!0});var a=s(t);n=o(a,u),a.forEach(c),this.h()},h(){l(t,"class","boolean svelte-o0qsb5")},m(e,a){m(e,t,a),p(t,n)},p(e,t){16&t&&u!==(u=e[9].value+"")&&S(n,u)},d(e){e&&c(t)}}}function Ai(e){let t,n,u=e[9].value+"";return{c(){t=a("span"),n=r(u),this.h()},l(e){t=i(e,"SPAN",{class:!0});var a=s(t);n=o(a,u),a.forEach(c),this.h()},h(){l(t,"class","number svelte-o0qsb5")},m(e,a){m(e,t,a),p(t,n)},p(e,t){16&t&&u!==(u=e[9].value+"")&&S(n,u)},d(e){e&&c(t)}}}function ki(e){let t,n,u,f,d=e[9].value.substring(1,e[9].value.length-1)+"";return{c(){t=r('"'),n=a("span"),u=r(d),f=r('"'),this.h()},l(e){t=o(e,'"'),n=i(e,"SPAN",{class:!0});var a=s(n);u=o(a,d),a.forEach(c),f=o(e,'"'),this.h()},h(){l(n,"class","string svelte-o0qsb5")},m(e,a){m(e,t,a),m(e,n,a),p(n,u),m(e,f,a)},p(e,t){16&t&&d!==(d=e[9].value.substring(1,e[9].value.length-1)+"")&&S(u,d)},d(e){e&&c(t),e&&c(n),e&&c(f)}}}function Ci(e){let t,n,u,f,d=e[9].value.substring(1,e[9].value.length-1)+"";return{c(){t=r('"'),n=a("span"),u=r(d),f=r('"'),this.h()},l(e){t=o(e,'"'),n=i(e,"SPAN",{class:!0});var a=s(n);u=o(a,d),a.forEach(c),f=o(e,'"'),this.h()},h(){l(n,"class","property svelte-o0qsb5")},m(e,a){m(e,t,a),m(e,n,a),p(n,u),m(e,f,a)},p(e,t){16&t&&d!==(d=e[9].value.substring(1,e[9].value.length-1)+"")&&S(u,d)},d(e){e&&c(t),e&&c(n),e&&c(f)}}}function Ni(e){let t,n,u=e[9].value+"";return{c(){t=a("span"),n=r(u),this.h()},l(e){t=i(e,"SPAN",{class:!0});var a=s(t);n=o(a,u),a.forEach(c),this.h()},h(){l(t,"class","grouping svelte-o0qsb5")},m(e,a){m(e,t,a),p(t,n)},p(e,t){16&t&&u!==(u=e[9].value+"")&&S(n,u)},d(e){e&&c(t)}}}function Ri(e){let t;function n(e,t){return"grouping"===e[9].type?Ni:"property"===e[9].type?Ci:"string"===e[9].type?ki:"number"===e[9].type?Ai:"boolean"===e[9].type?Pi:"null"===e[9].type?Ei:ji}let a=n(e),r=a(e);return{c(){r.c(),t=f()},l(e){r.l(e),t=f()},m(e,n){r.m(e,n),m(e,t,n)},p(e,i){a===(a=n(e))&&r?r.p(e,i):(r.d(1),r=a(e),r&&(r.c(),r.m(t.parentNode,t)))},d(e){r.d(e),e&&c(t)}}}function Ti(e){let t,n,r,o,f,b,O,S,I,w,x=[...Array(e[3])],j=[];for(let t=0;t<x.length;t+=1)j[t]=xi(wi(e,x,t));let E=e[4],P=[];for(let t=0;t<E.length;t+=1)P[t]=Ri(Ii(e,E,t));return{c(){t=a("div"),n=a("div");for(let e=0;e<j.length;e+=1)j[e].c();r=d(),o=a("div"),f=a("pre");for(let e=0;e<P.length;e+=1)P[e].c();b=d(),O=a("textarea"),this.h()},l(e){t=i(e,"DIV",{class:!0});var a=s(t);n=i(a,"DIV",{class:!0});var l=s(n);for(let e=0;e<j.length;e+=1)j[e].l(l);l.forEach(c),r=h(a),o=i(a,"DIV",{class:!0});var m=s(o);f=i(m,"PRE",{class:!0});var p=s(f);for(let e=0;e<P.length;e+=1)P[e].l(p);p.forEach(c),b=h(m),O=i(m,"TEXTAREA",{class:!0,"aria-label":!0}),s(O).forEach(c),m.forEach(c),a.forEach(c),this.h()},h(){l(n,"class","line-numbers svelte-o0qsb5"),l(f,"class","highlighted svelte-o0qsb5"),l(O,"class","src svelte-o0qsb5"),l(O,"aria-label","Code Editor"),l(o,"class","editable svelte-o0qsb5"),l(t,"class",S="Editor "+e[1]+" svelte-o0qsb5")},m(a,i){m(a,t,i),p(t,n);for(let e=0;e<j.length;e+=1)j[e].m(n,null);p(t,r),p(t,o),p(o,f);for(let e=0;e<P.length;e+=1)P[e].m(f,null);p(o,b),p(o,O),e[7](O),y(O,e[0]),I||(w=[v(O,"input",e[8]),v(O,"input",e[6])],I=!0)},p(e,[a]){if(8&a){let t;for(x=[...Array(e[3])],t=0;t<x.length;t+=1){const r=wi(e,x,t);j[t]?j[t].p(r,a):(j[t]=xi(r),j[t].c(),j[t].m(n,null))}for(;t<j.length;t+=1)j[t].d(1);j.length=x.length}if(16&a){let t;for(E=e[4],t=0;t<E.length;t+=1){const n=Ii(e,E,t);P[t]?P[t].p(n,a):(P[t]=Ri(n),P[t].c(),P[t].m(f,null))}for(;t<P.length;t+=1)P[t].d(1);P.length=E.length}1&a&&y(O,e[0]),2&a&&S!==(S="Editor "+e[1]+" svelte-o0qsb5")&&l(t,"class",S)},i:u,o:u,d(n){n&&c(t),g(j,n),g(P,n),e[7](null),I=!1,$(w)}}}function Di(e,t,n){let a,r,i,{theme:s="solarized-dark"}=t,{value:o=""}=t;return e.$$set=e=>{"theme"in e&&n(1,s=e.theme),"value"in e&&n(0,o=e.value)},e.$$.update=()=>{1&e.$$.dirty&&n(3,a=(o.match(/\n/g)||[]).length+1),1&e.$$.dirty&&n(4,(Si.reset(o),r=Array.from(Si)))},[o,s,i,a,r,()=>{i.focus()},function(t){b(e,t)},function(e){O[e?"unshift":"push"]((()=>{i=e,n(2,i)}))},function(){o=this.value,n(0,o)}]}class qi extends e{constructor(e){super(),t(this,e,Di,Ti,n,{theme:1,value:0,focus:5})}get focus(){return this.$$.ctx[5]}}function Mi(e,t,n){const a=e.slice();return a[16]=t[n],a[18]=n,a}function Vi(e){let t,n,u,f;function d(){return e[11](e[18])}return{c(){t=a("button"),n=r("×"),this.h()},l(e){t=i(e,"BUTTON",{class:!0});var a=s(t);n=o(a,"×"),a.forEach(c),this.h()},h(){l(t,"class","tab-close svelte-1ylgy73")},m(e,a){m(e,t,a),p(t,n),u||(f=v(t,"click",d),u=!0)},p(t,n){e=t},d(e){e&&c(t),u=!1,f()}}}function Li(e){let t,n,u,f,y,g,$,b,O=e[16].label+"",w=!e[16].persistent&&e[0].length>e[5]&&Vi(e);function x(){return e[12](e[18])}return{c(){t=a("button"),n=a("span"),u=r(O),f=d(),w&&w.c(),this.h()},l(e){t=i(e,"BUTTON",{role:!0,id:!0,"aria-selected":!0,"aria-controls":!0,class:!0});var a=s(t);n=i(a,"SPAN",{class:!0});var r=s(n);u=o(r,O),r.forEach(c),f=h(a),w&&w.l(a),a.forEach(c),this.h()},h(){l(n,"class","tab-label svelte-1ylgy73"),l(t,"role","tab"),l(t,"id",y=`${e[2]}-tab-${e[18]}`),l(t,"aria-selected",g=e[18]===e[1]),l(t,"aria-controls","tabpanel"),l(t,"class","svelte-1ylgy73"),I(t,"active",e[18]===e[4])},m(e,a){m(e,t,a),p(t,n),p(n,u),p(t,f),w&&w.m(t,null),$||(b=v(t,"click",x),$=!0)},p(n,a){e=n,1&a&&O!==(O=e[16].label+"")&&S(u,O),!e[16].persistent&&e[0].length>e[5]?w?w.p(e,a):(w=Vi(e),w.c(),w.m(t,null)):w&&(w.d(1),w=null),4&a&&y!==(y=`${e[2]}-tab-${e[18]}`)&&l(t,"id",y),2&a&&g!==(g=e[18]===e[1])&&l(t,"aria-selected",g),16&a&&I(t,"active",e[18]===e[4])},d(e){e&&c(t),w&&w.d(),$=!1,b()}}}function Ji(e){let t,n,u,f,d,h;return{c(){t=a("button"),n=a("span"),u=r("+"),this.h()},l(e){t=i(e,"BUTTON",{role:!0,id:!0,class:!0});var a=s(t);n=i(a,"SPAN",{class:!0});var r=s(n);u=o(r,"+"),r.forEach(c),a.forEach(c),this.h()},h(){l(n,"class","tab-label svelte-1ylgy73"),l(t,"role","tab"),l(t,"id",f=`${e[2]}-tab-${e[0].length}`),l(t,"class","svelte-1ylgy73")},m(a,r){m(a,t,r),p(t,n),p(n,u),d||(h=v(t,"click",e[9]),d=!0)},p(e,n){5&n&&f!==(f=`${e[2]}-tab-${e[0].length}`)&&l(t,"id",f)},d(e){e&&c(t),d=!1,h()}}}function _i(e){let t,n,r,o,u,f,y,v,$=e[0],b=[];for(let t=0;t<$.length;t+=1)b[t]=Li(Mi(e,$,t));let S=e[3]&&Ji(e);function I(t){e[14](t)}let N={};return void 0!==e[0][e[1]].text&&(N.value=e[0][e[1]].text),u=new qi({props:N}),e[13](u),O.push((()=>w(u,"value",I))),u.$on("input",e[15]),{c(){t=a("div");for(let e=0;e<b.length;e+=1)b[e].c();n=d(),S&&S.c(),r=d(),o=a("div"),x(u.$$.fragment),this.h()},l(e){t=i(e,"DIV",{role:!0,class:!0});var a=s(t);for(let e=0;e<b.length;e+=1)b[e].l(a);n=h(a),S&&S.l(a),a.forEach(c),r=h(e),o=i(e,"DIV",{role:!0,id:!0,"aria-labelledby":!0,class:!0});var l=s(o);j(u.$$.fragment,l),l.forEach(c),this.h()},h(){l(t,"role","tablist"),l(t,"class","svelte-1ylgy73"),l(o,"role","tabpanel"),l(o,"id","tabpanel"),l(o,"aria-labelledby",y=`${e[2]}-tab-${e[1]}`),l(o,"class","svelte-1ylgy73")},m(e,a){m(e,t,a);for(let e=0;e<b.length;e+=1)b[e].m(t,null);p(t,n),S&&S.m(t,null),m(e,r,a),m(e,o,a),E(u,o,null),v=!0},p(e,[a]){if(1335&a){let r;for($=e[0],r=0;r<$.length;r+=1){const i=Mi(e,$,r);b[r]?b[r].p(i,a):(b[r]=Li(i),b[r].c(),b[r].m(t,n))}for(;r<b.length;r+=1)b[r].d(1);b.length=$.length}e[3]?S?S.p(e,a):(S=Ji(e),S.c(),S.m(t,null)):S&&(S.d(1),S=null);const r={};!f&&3&a&&(f=!0,r.value=e[0][e[1]].text,P((()=>f=!1))),u.$set(r),(!v||6&a&&y!==(y=`${e[2]}-tab-${e[1]}`))&&l(o,"aria-labelledby",y)},i(e){v||(A(u.$$.fragment,e),v=!0)},o(e){k(u.$$.fragment,e),v=!1},d(n){n&&c(t),g(b,n),S&&S.d(),n&&c(r),n&&c(o),e[13](null),C(u)}}}function zi(e,t,n){let a,{ns:r=""}=t,{tabs:i=[]}=t,{newTab:s}=t,{active:o=0}=t,{selected:c=0}=t,{minTabs:l=1}=t;const m=N();function p(e){n(1,c=e),a.focus()}function u(e){c>=e&&c>0&&n(1,c-=1),i.splice(e,1),n(0,i),a.focus()}return e.$$set=e=>{"ns"in e&&n(2,r=e.ns),"tabs"in e&&n(0,i=e.tabs),"newTab"in e&&n(3,s=e.newTab),"active"in e&&n(4,o=e.active),"selected"in e&&n(1,c=e.selected),"minTabs"in e&&n(5,l=e.minTabs)},[i,c,r,s,o,l,a,m,p,function(){n(0,i[i.length]=s(),i),n(1,c=i.length-1),a.focus()},u,e=>u(e),e=>p(e),function(e){O[e?"unshift":"push"]((()=>{a=e,n(6,a)}))},function(t){e.$$.not_equal(i[c].text,t)&&(i[c].text=t,n(0,i))},e=>m("input",i)]}class Ui extends e{constructor(e){super(),t(this,e,zi,_i,n,{ns:2,tabs:0,newTab:3,active:4,selected:1,minTabs:5})}}function Fi(e,t,n){const a=e.slice();return a[2]=t[n],a}function Bi(e){let t;function n(e,t){return e[1].output?Gi:Ki}let a=n(e),r=a(e);return{c(){r.c(),t=f()},l(e){r.l(e),t=f()},m(e,n){r.m(e,n),m(e,t,n)},p(e,i){a===(a=n(e))&&r?r.p(e,i):(r.d(1),r=a(e),r&&(r.c(),r.m(t.parentNode,t)))},d(e){r.d(e),e&&c(t)}}}function Ki(e){let t,n=e[1]+"";return{c(){t=r(n)},l(e){t=o(e,n)},m(e,n){m(e,t,n)},p(e,a){1&a&&n!==(n=e[1]+"")&&S(t,n)},d(e){e&&c(t)}}}function Gi(e){let t,n,l=e[1].output.errors,p=[];for(let t=0;t<l.length;t+=1)p[t]=Hi(Fi(e,l,t));return{c(){t=r("Invalid\n    "),n=a("ul");for(let e=0;e<p.length;e+=1)p[e].c()},l(e){t=o(e,"Invalid\n    "),n=i(e,"UL",{});var a=s(n);for(let e=0;e<p.length;e+=1)p[e].l(a);a.forEach(c)},m(e,a){m(e,t,a),m(e,n,a);for(let e=0;e<p.length;e+=1)p[e].m(n,null)},p(e,t){if(1&t){let a;for(l=e[1].output.errors,a=0;a<l.length;a+=1){const r=Fi(e,l,a);p[a]?p[a].p(r,t):(p[a]=Hi(r),p[a].c(),p[a].m(n,null))}for(;a<p.length;a+=1)p[a].d(1);p.length=l.length}},d(e){e&&c(t),e&&c(n),g(p,e)}}}function Zi(e){let t,n,u,f,d,h,y=e[2].instanceLocation+"",v=e[2].absoluteKeywordLocation+"";return{c(){t=a("li"),n=a("code"),u=r(y),f=r(" fails schema constraint "),d=a("code"),h=r(v),this.h()},l(e){t=i(e,"LI",{class:!0});var a=s(t);n=i(a,"CODE",{class:!0});var r=s(n);u=o(r,y),r.forEach(c),f=o(a," fails schema constraint "),d=i(a,"CODE",{class:!0});var l=s(d);h=o(l,v),l.forEach(c),a.forEach(c),this.h()},h(){l(n,"class","svelte-1sdf2dp"),l(d,"class","svelte-1sdf2dp"),l(t,"class","svelte-1sdf2dp")},m(e,a){m(e,t,a),p(t,n),p(n,u),p(t,f),p(t,d),p(d,h)},p(e,t){1&t&&y!==(y=e[2].instanceLocation+"")&&S(u,y),1&t&&v!==(v=e[2].absoluteKeywordLocation+"")&&S(h,v)},d(e){e&&c(t)}}}function Hi(e){let t,n=!e[2].valid&&!e[2].keyword.endsWith("#validate"),a=n&&Zi(e);return{c(){a&&a.c(),t=f()},l(e){a&&a.l(e),t=f()},m(e,n){a&&a.m(e,n),m(e,t,n)},p(e,r){1&r&&(n=!e[2].valid&&!e[2].keyword.endsWith("#validate")),n?a?a.p(e,r):(a=Zi(e),a.c(),a.m(t.parentNode,t)):a&&(a.d(1),a=null)},d(e){a&&a.d(e),e&&c(t)}}}function Wi(e){let t,n=e[0]?"Valid":"";return{c(){t=r(n)},l(e){t=o(e,n)},m(e,n){m(e,t,n)},p(e,a){1&a&&n!==(n=e[0]?"Valid":"")&&S(t,n)},d(e){e&&c(t)}}}function Xi(e){let t;return{c(){t=r("Validating ...")},l(e){t=o(e,"Validating ...")},m(e,n){m(e,t,n)},p:u,d(e){e&&c(t)}}}function Qi(e){let t,n,a={ctx:e,current:null,token:null,hasCatch:!0,pending:Xi,then:Wi,catch:Bi,value:0,error:1};return R(n=e[0],a),{c(){t=f(),a.block.c()},l(e){t=f(),a.block.l(e)},m(e,n){m(e,t,n),a.block.m(e,a.anchor=n),a.mount=()=>t.parentNode,a.anchor=t},p(t,[r]){e=t,a.ctx=e,1&r&&n!==(n=e[0])&&R(n,a)||T(a,e,r)},i:u,o:u,d(e){e&&c(t),a.block.d(e),a.token=null,a=null}}}function Yi(e,t,n){let{results:a}=t;return e.$$set=e=>{"results"in e&&n(0,a=e.results)},[a]}class es extends e{constructor(e){super(),t(this,e,Yi,Qi,n,{results:0})}}function ts(e){let t,n,r,o,u;const f=e[2].default,y=D(f,e,e[1],null);return{c(){t=a("a"),n=q("svg"),r=q("path"),o=d(),y&&y.c(),this.h()},l(e){t=i(e,"A",{href:!0,class:!0});var a=s(t);n=i(a,"svg",{height:!0,viewBox:!0,version:!0,"aria-hidden":!0,class:!0},1);var l=s(n);r=i(l,"path",{"fill-rule":!0,d:!0},1),s(r).forEach(c),l.forEach(c),o=h(a),y&&y.l(a),a.forEach(c),this.h()},h(){l(r,"fill-rule","evenodd"),l(r,"d","M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"),l(n,"height","1.5em"),l(n,"viewBox","0 0 16 16"),l(n,"version","1.1"),l(n,"aria-hidden","true"),l(n,"class","svelte-i8toq"),l(t,"href",e[0]),l(t,"class","svelte-i8toq")},m(e,a){m(e,t,a),p(t,n),p(n,r),p(t,o),y&&y.m(t,null),u=!0},p(e,[n]){y&&y.p&&(!u||2&n)&&M(y,f,e,e[1],n,null,null),(!u||1&n)&&l(t,"href",e[0])},i(e){u||(A(y,e),u=!0)},o(e){k(y,e),u=!1},d(e){e&&c(t),y&&y.d(e)}}}function ns(e,t,n){let{$$slots:a={},$$scope:r}=t,{href:i=""}=t;return e.$$set=e=>{"href"in e&&n(0,i=e.href),"$$scope"in e&&n(1,r=e.$$scope)},[i,r,a]}class as extends e{constructor(e){super(),t(this,e,ns,ts,n,{href:0})}}function rs(e){let t,n,r,o,u;const f=e[2].default,y=D(f,e,e[1],null);return{c(){t=a("a"),n=q("svg"),r=q("path"),o=d(),y&&y.c(),this.h()},l(e){t=i(e,"A",{href:!0,class:!0});var a=s(t);n=i(a,"svg",{height:!0,viewBox:!0,version:!0,"aria-hidden":!0,class:!0},1);var l=s(n);r=i(l,"path",{d:!0},1),s(r).forEach(c),l.forEach(c),o=h(a),y&&y.l(a),a.forEach(c),this.h()},h(){l(r,"d","M240,250h100v-50h100V0H240V250z M340,50h50v100h-50V50z M480,0v200h100V50h50v150h50V50h50v150h50V0H480z M0,200h100V50h50v150h50V0H0V200z"),l(n,"height","1em"),l(n,"viewBox","0 0 780 250"),l(n,"version","1.1"),l(n,"aria-hidden","true"),l(n,"class","svelte-wj8h0n"),l(t,"href",e[0]),l(t,"class","svelte-wj8h0n")},m(e,a){m(e,t,a),p(t,n),p(n,r),p(t,o),y&&y.m(t,null),u=!0},p(e,[n]){y&&y.p&&(!u||2&n)&&M(y,f,e,e[1],n,null,null),(!u||1&n)&&l(t,"href",e[0])},i(e){u||(A(y,e),u=!0)},o(e){k(y,e),u=!1},d(e){e&&c(t),y&&y.d(e)}}}function is(e,t,n){let{$$slots:a={},$$scope:r}=t,{href:i=""}=t;return e.$$set=e=>{"href"in e&&n(0,i=e.href),"$$scope"in e&&n(1,r=e.$$scope)},[i,r,a]}class ss extends e{constructor(e){super(),t(this,e,is,rs,n,{href:0})}}function os(e){let t,n,r,o,u,f,y,v,g;const $=e[2].default,b=D($,e,e[1],null);return{c(){t=a("a"),n=q("svg"),r=q("g"),o=q("path"),u=q("path"),f=q("path"),y=q("path"),v=d(),b&&b.c(),this.h()},l(e){t=i(e,"A",{href:!0,class:!0});var a=s(t);n=i(a,"svg",{version:!0,viewBox:!0,height:!0,class:!0},1);var l=s(n);r=i(l,"g",{transform:!0,id:!0},1);var m=s(r);o=i(m,"path",{id:!0,d:!0,style:!0},1),s(o).forEach(c),u=i(m,"path",{id:!0,d:!0,style:!0},1),s(u).forEach(c),f=i(m,"path",{id:!0,d:!0,style:!0},1),s(f).forEach(c),y=i(m,"path",{id:!0,d:!0,style:!0},1),s(y).forEach(c),m.forEach(c),l.forEach(c),v=h(a),b&&b.l(a),a.forEach(c),this.h()},h(){l(o,"id","path4544"),l(o,"d","m 122.99401,114.18985 c -4.32897,-0.9404 -7.58044,-3.47848 -8.71251,-6.80095 -0.78921,-2.31618 -0.67682,-6.07238 0.33363,-11.150598 0.48507,-2.437836 0.88169,-5.347843 0.88139,-6.466688 -9.8e-4,-3.718098 -1.71106,-5.735418 -5.1001,-6.016462 l -1.9549,-0.162116 v -2.392655 -2.392657 l 1.85208,-0.250855 c 2.70243,-0.366031 3.74441,-1.02838 4.57629,-2.908984 0.61121,-1.381726 0.68884,-2.068648 0.50552,-4.472869 -0.11913,-1.562244 -0.53527,-4.348568 -0.92477,-6.191832 -0.98954,-4.682868 -0.94822,-8.485471 0.11707,-10.773163 1.56862,-3.368589 5.43705,-5.854553 9.93248,-6.382903 l 1.93299,-0.227185 v 2.518015 2.518015 h -1.29973 c -1.77186,0 -4.2497,1.262413 -4.8835,2.488054 -0.60797,1.175674 -0.65405,2.864146 -0.15834,5.802223 0.78343,4.643508 1.04707,9.098344 0.67592,11.421636 -0.42464,2.658142 -1.97477,5.796328 -3.6791,7.448236 l -1.18012,1.143813 1.61497,1.982752 c 1.99051,2.443801 2.76458,4.148744 3.24284,7.142561 0.37835,2.368341 0.0844,7.282673 -0.67072,11.213982 -1.05359,5.48514 0.1623,7.65141 4.66209,8.30613 l 1.67569,0.24382 v 2.44782 c 0,2.79211 0.17086,2.69708 -3.43917,1.91286 z"),V(o,"fill","stroke-width:0.35277775"),l(u,"id","path4546"),l(u,"d","m 152.2304,112.24932 v -2.42987 l 2.04969,-0.42336 c 2.26276,-0.46736 4.054,-1.8634 4.45842,-3.47475 0.1274,-0.50758 -0.11267,-3.16398 -0.53347,-5.90311 -1.37183,-8.929552 -0.6114,-13.537042 2.85482,-17.297452 l 1.48237,-1.60818 -1.1108,-1.26512 c -3.97855,-4.53132 -4.66885,-8.552208 -3.15364,-18.369547 0.76342,-4.946305 0.76409,-4.994322 0.087,-6.173611 -0.79713,-1.388278 -3.28385,-2.776033 -4.97438,-2.776033 h -1.15997 v -2.469445 c 0,-2.811057 -0.0583,-2.773846 3.24583,-2.072788 3.9645,0.841179 6.80448,2.853272 8.27787,5.864775 0.84544,1.728026 0.97275,2.400136 0.94911,5.010889 -0.015,1.658349 -0.35758,4.682054 -0.76125,6.719346 -1.49867,7.563594 -1.3651,9.576204 0.7654,11.532814 0.98915,0.90842 1.64012,1.17274 3.37032,1.36849 l 2.14439,0.24261 v 2.42387 2.42388 l -1.6757,7.1e-4 c -2.1517,7e-4 -3.9323,0.90924 -4.83869,2.46889 -0.95194,1.63803 -0.89239,5.20675 0.17364,10.40695 0.90648,4.421902 1.05253,8.458452 0.3882,10.728752 -0.70059,2.39406 -3.81995,5.29609 -6.74745,6.27718 -1.26118,0.42266 -2.96775,0.87096 -3.79236,0.99623 l -1.49931,0.22775 z"),V(u,"stroke-width","0.35277778"),l(f,"id","path4548"),l(f,"d","m 131.74239,108.26592 c -1.02163,-1.2988 -0.87294,-3.53652 0.38087,-5.73185 0.92776,-1.62446 4.80862,-6.948549 7.61066,-10.440949 l 1.13094,-1.40958 -1.80213,-5.22523 c -2.02147,-5.86123 -2.0098,-5.97467 0.65581,-6.37225 l 1.46834,-0.219 1.64076,3.3506 c 0.90242,1.84283 1.76982,3.35061 1.92755,3.35061 0.15774,0 1.77489,-1.75542 3.59368,-3.90092 3.15918,-3.72667 3.35688,-3.89165 4.42591,-3.69334 0.64552,0.11974 1.21858,0.0465 1.35432,-0.17316 0.31818,-0.51481 1.23083,0.24704 1.23083,1.02746 0,0.32009 -0.45438,1.13409 -1.00972,1.80888 -2.26771,2.75549 -7.10417,9.27155 -7.10417,9.5713 0,0.17685 0.97502,2.45302 2.16671,5.05816 l 2.1667,4.736609 -0.65823,0.98459 c -0.36203,0.54152 -0.66236,1.12603 -0.6674,1.29891 -0.005,0.17288 -0.27769,0.48371 -0.60588,0.69073 -0.83174,0.52464 -1.44656,-0.11541 -3.9894,-4.153119 -1.16417,-1.84856 -2.23163,-3.36491 -2.37215,-3.36967 -0.31309,-0.0106 -3.7911,5.131969 -6.47955,9.580639 -2.37093,3.92324 -1.93885,3.4204 -3.26614,3.80106 -0.95533,0.27398 -1.19348,0.19843 -1.79831,-0.57048 z"),V(f,"stroke-width","0.35277775"),l(y,"id","path4550"),l(y,"d","m 131.98567,83.677091 c -2.15148,-3.8472 -6.0183,-9.42829 -7.57842,-10.93815 -0.79252,-0.76698 -1.44094,-1.57494 -1.44094,-1.79546 0,-0.6016 1.61695,-1.21975 3.19058,-1.21975 1.69822,0 3.49597,1.47777 5.0997,4.19203 0.58208,0.98515 1.15641,1.79434 1.27629,1.79819 0.11988,0.004 0.80873,-1.65116 1.53078,-3.67779 1.5464,-4.34039 5.62351,-12.777999 7.22453,-14.951229 1.3726,-1.86316 3.42936,-2.865165 5.90274,-2.875676 3.23375,-0.01374 3.24268,0.130067 0.20474,3.296663 -4.63599,4.832327 -6.76321,8.809632 -11.25155,21.037252 -1.24637,3.39549 -2.39032,6.47895 -2.54212,6.85214 -0.23022,0.56597 -0.49833,0.28096 -1.61633,-1.71822 z"),V(y,"stroke-width","0.35277775"),l(r,"transform","translate(-104.22785,-45.507923)"),l(r,"id","layer1"),l(n,"version","1.1"),l(n,"viewBox","0 0 70.423268 70.42326"),l(n,"height","1.25em"),l(n,"class","svelte-27u907"),l(t,"href",e[0]),l(t,"class","svelte-27u907")},m(e,a){m(e,t,a),p(t,n),p(n,r),p(r,o),p(r,u),p(r,f),p(r,y),p(t,v),b&&b.m(t,null),g=!0},p(e,[n]){b&&b.p&&(!g||2&n)&&M(b,$,e,e[1],n,null,null),(!g||1&n)&&l(t,"href",e[0])},i(e){g||(A(b,e),g=!0)},o(e){k(b,e),g=!1},d(e){e&&c(t),b&&b.d(e)}}}function cs(e,t,n){let{$$slots:a={},$$scope:r}=t,{href:i=""}=t;return e.$$set=e=>{"href"in e&&n(0,i=e.href),"$$scope"in e&&n(1,r=e.$$scope)},[i,r,a]}class ls extends e{constructor(e){super(),t(this,e,cs,os,n,{href:0})}}function ms(e){let t;return{c(){t=r("hyperjump-io/json-schema.hyperjump.io")},l(e){t=o(e,"hyperjump-io/json-schema.hyperjump.io")},m(e,n){m(e,t,n)},d(e){e&&c(t)}}}function ps(e){let t;return{c(){t=r("hyperjump-io/json-schema-validator")},l(e){t=o(e,"hyperjump-io/json-schema-validator")},m(e,n){m(e,t,n)},d(e){e&&c(t)}}}function us(e){let t;return{c(){t=r("@hyperjump/json-schema")},l(e){t=o(e,"@hyperjump/json-schema")},m(e,n){m(e,t,n)},d(e){e&&c(t)}}}function fs(e){let t;return{c(){t=r("@hyperjump/json-schema-core")},l(e){t=o(e,"@hyperjump/json-schema-core")},m(e,n){m(e,t,n)},d(e){e&&c(t)}}}function ds(e){let t;return{c(){t=r("JSON Schema")},l(e){t=o(e,"JSON Schema")},m(e,n){m(e,t,n)},d(e){e&&c(t)}}}function hs(e){let t,n,r,o,u,f,y,v,g,$,b,O,S,I,w,P,N;return o=new as({props:{href:"https://github.com/hyperjump-io/json-schema.hyperjump.io",$$slots:{default:[ms]},$$scope:{ctx:e}}}),y=new as({props:{href:"https://github.com/hyperjump-io/json-schema-validator",$$slots:{default:[ps]},$$scope:{ctx:e}}}),$=new ss({props:{href:"https://www.npmjs.com/package/@hyperjump/json-schema",$$slots:{default:[us]},$$scope:{ctx:e}}}),S=new ss({props:{href:"https://www.npmjs.com/package/@hyperjump/json-schema-core",$$slots:{default:[fs]},$$scope:{ctx:e}}}),P=new ls({props:{href:"https://json-schema.org",$$slots:{default:[ds]},$$scope:{ctx:e}}}),{c(){t=a("footer"),n=a("ul"),r=a("li"),x(o.$$.fragment),u=d(),f=a("li"),x(y.$$.fragment),v=d(),g=a("li"),x($.$$.fragment),b=d(),O=a("li"),x(S.$$.fragment),I=d(),w=a("li"),x(P.$$.fragment),this.h()},l(e){t=i(e,"FOOTER",{class:!0});var a=s(t);n=i(a,"UL",{class:!0});var l=s(n);r=i(l,"LI",{class:!0});var m=s(r);j(o.$$.fragment,m),m.forEach(c),u=h(l),f=i(l,"LI",{class:!0});var p=s(f);j(y.$$.fragment,p),p.forEach(c),v=h(l),g=i(l,"LI",{class:!0});var d=s(g);j($.$$.fragment,d),d.forEach(c),b=h(l),O=i(l,"LI",{class:!0});var x=s(O);j(S.$$.fragment,x),x.forEach(c),I=h(l),w=i(l,"LI",{class:!0});var E=s(w);j(P.$$.fragment,E),E.forEach(c),l.forEach(c),a.forEach(c),this.h()},h(){l(r,"class","svelte-17tbtsq"),l(f,"class","svelte-17tbtsq"),l(g,"class","svelte-17tbtsq"),l(O,"class","svelte-17tbtsq"),l(w,"class","svelte-17tbtsq"),l(n,"class","links svelte-17tbtsq"),l(t,"class","svelte-17tbtsq")},m(e,a){m(e,t,a),p(t,n),p(n,r),E(o,r,null),p(n,u),p(n,f),E(y,f,null),p(n,v),p(n,g),E($,g,null),p(n,b),p(n,O),E(S,O,null),p(n,I),p(n,w),E(P,w,null),N=!0},p(e,[t]){const n={};1&t&&(n.$$scope={dirty:t,ctx:e}),o.$set(n);const a={};1&t&&(a.$$scope={dirty:t,ctx:e}),y.$set(a);const r={};1&t&&(r.$$scope={dirty:t,ctx:e}),$.$set(r);const i={};1&t&&(i.$$scope={dirty:t,ctx:e}),S.$set(i);const s={};1&t&&(s.$$scope={dirty:t,ctx:e}),P.$set(s)},i(e){N||(A(o.$$.fragment,e),A(y.$$.fragment,e),A($.$$.fragment,e),A(S.$$.fragment,e),A(P.$$.fragment,e),N=!0)},o(e){k(o.$$.fragment,e),k(y.$$.fragment,e),k($.$$.fragment,e),k(S.$$.fragment,e),k(P.$$.fragment,e),N=!1},d(e){e&&c(t),C(o),C(y),C($),C(S),C(P)}}}class ys extends e{constructor(e){super(),t(this,e,null,hs,n,{})}}const{Core:vs,Keywords:gs,Schema:$s}=Dt;$s.add(JSON.parse('{\n    "$id": "https://spec.openapis.org/oas/3.1/dialect/base",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2020-12/vocab/core": true,\n        "https://json-schema.org/draft/2020-12/vocab/applicator": true,\n        "https://json-schema.org/draft/2020-12/vocab/unevaluated": true,\n        "https://json-schema.org/draft/2020-12/vocab/validation": true,\n        "https://json-schema.org/draft/2020-12/vocab/meta-data": true,\n        "https://json-schema.org/draft/2020-12/vocab/format-annotation": true,\n        "https://json-schema.org/draft/2020-12/vocab/content": true,\n        "https://spec.openapis.org/oas/3.1/vocab/base": false\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "OpenAPI 3.1 Schema Object Dialect",\n    "allOf": [\n        { "$ref": "https://json-schema.org/draft/2020-12/schema" },\n        { "$ref": "https://spec.openapis.org/oas/3.1/meta/base" }\n    ]\n}')),$s.add(JSON.parse('{\n    "$id": "https://spec.openapis.org/oas/3.1/meta/base",\n    "$schema": "https://json-schema.org/draft/2020-12/schema",\n    "$vocabulary": {\n        "https://spec.openapis.org/oas/3.1/vocab/base": true\n    },\n    "$dynamicAnchor": "meta",\n    "title": "OAS Base vocabulary",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "example": true,\n        "discriminator": { "$ref": "#/$defs/discriminator" },\n        "externalDocs": { "$ref": "#/$defs/external-docs" },\n        "xml": { "$ref": "#/$defs/xml" }\n    },\n    "$defs": {\n        "extensible": {\n            "patternProperties": {\n                "^x-": true\n            }\n        },\n        "discriminator": {\n            "$ref": "#/$defs/extensible",\n            "type": "object",\n            "properties": {\n                "propertyName": {\n                    "type": "string"\n                },\n                "mapping": {\n                    "type": "object",\n                    "additionalProperties": {\n                        "type": "string"\n                    }\n                }\n            },\n            "required": ["propertyName"],\n            "unevaluatedProperties": false\n        },\n        "external-docs": {\n            "$ref": "#/$defs/extensible",\n            "type": "object",\n            "properties": {\n                "url": {\n                    "type": "string",\n                    "format": "uri-reference"\n                },\n                "description": {\n                    "type": "string"\n                }\n            },\n            "required": ["url"],\n            "unevaluatedProperties": false\n        },\n        "xml": {\n            "$ref": "#/$defs/extensible",\n            "type": "object",\n            "properties": {\n                "name": {\n                    "type": "string"\n                },\n                "namespace": {\n                    "type": "string",\n                    "format": "uri"\n                },\n                "prefix": {\n                    "type": "string"\n                },\n                "attribute": {\n                    "type": "boolean"\n                },\n                "wrapped": {\n                    "type": "boolean"\n                }\n            },\n            "unevaluatedProperties": false\n        }\n    }\n}')),vs.defineVocabulary("https://spec.openapis.org/oas/3.1/vocab/extensions",{example:gs.metaData,discriminator:gs.metaData,externalDocs:gs.metaData,xml:gs.metaData});const{Core:bs,Schema:Os}=Dt;bs.add,Os.get,bs.validate,bs.setMetaOutputFormat,bs.setShouldMetaValidate,bs.FLAG,bs.BASIC,bs.DETAILED,bs.VERBOSE;const{Core:Ss,Schema:Is,Instance:ws}=Dt;var xs={compile:async(e,t,n)=>{const a=await Is.step("items",n),r=Is.typeOf(a,"array")?Is.length(a):Number.MAX_SAFE_INTEGER;return Is.typeOf(e,"boolean")?[r,Is.value(e)]:[r,await Ss.compileSchema(e,t)]},interpret:([e,t],n,a,r)=>!ws.typeOf(n,"array")||("string"==typeof t?ws.every(((n,i)=>i<e||Ss.interpretSchema(t,n,a,r)),n):ws.every(((n,a)=>a<e||t),n))};const{Core:js,Schema:Es,Instance:Ps}=Dt,As=([e,t],n,a,r)=>!Ps.typeOf(n,"array")||Ps.every(((n,i)=>i<e||js.interpretSchema(t,n,a,r)),n);var ks={compile:async(e,t,n)=>{const a=await Es.step("items",n);return[Es.typeOf(a,"array")?Es.length(a):Number.MAX_SAFE_INTEGER,await js.compileSchema(e,t)]},interpret:As,collectEvaluatedItems:(e,t,n,a)=>As(e,t,n,a)&&new Set(Ps.map(((e,t)=>t),t))};const{Core:Cs,Schema:Ns,Instance:Rs}=Dt;var Ts={compile:async(e,t,n)=>{const a=await Ns.step("properties",n),r=Ns.typeOf(a,"object")?Ns.keys(a):[],i=await Ns.step("patternProperties",n),s=Ns.typeOf(i,"object")?Ns.keys(i).map((e=>new RegExp(e))):[];return Ns.typeOf(e,"boolean")?[r,s,Ns.value(e)]:[r,s,await Cs.compileSchema(e,t)]},interpret:([e,t,n],a,r,i)=>{if(!Rs.typeOf(a,"object"))return!0;const s=Rs.entries(a).filter((([n])=>!e.includes(n)&&!t.some((e=>e.test(n)))));return"string"==typeof n?s.every((([,e])=>Cs.interpretSchema(n,e,r,i))):0===s.length||n}};const{Core:Ds,Schema:qs,Instance:Ms}=Dt,Vs=([e,t,n],a,r,i)=>!Ms.typeOf(a,"object")||Ms.entries(a).filter((([n])=>!e.includes(n)&&!t.some((e=>e.test(n))))).every((([,e])=>Ds.interpretSchema(n,e,r,i)));var Ls={compile:async(e,t,n)=>{const a=await qs.step("properties",n),r=qs.typeOf(a,"object")?qs.keys(a):[],i=await qs.step("patternProperties",n);return[r,qs.typeOf(i,"object")?qs.keys(i).map((e=>new RegExp(e))):[],await Ds.compileSchema(e,t)]},interpret:Vs,collectEvaluatedProperties:(e,t,n,a)=>Vs(e,t,n,a)&&[new RegExp("")]};const{Core:Js,Schema:_s}=Dt;var zs={compile:(e,t)=>Ue.pipeline([_s.map((async e=>Js.compileSchema(await e,t))),Ue.all],e),interpret:(e,t,n,a)=>e.every((e=>Js.interpretSchema(e,t,n,a))),collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,r)=>{const i=e&&Js.collectEvaluatedProperties(r,t,n,a);return!1!==i&&[...e,...i]}),[]),collectEvaluatedItems:(e,t,n,a)=>e.reduce(((e,r)=>{const i=!1!==e&&Js.collectEvaluatedItems(r,t,n,a);return!1!==i&&new Set([...e,...i])}),new Set)};const{Core:Us,Schema:Fs}=Dt;var Bs={compile:(e,t)=>Ue.pipeline([Fs.map((async e=>Us.compileSchema(await e,t))),Ue.all],e),interpret:(e,t,n,a)=>e.filter((e=>Us.interpretSchema(e,t,n,a))).length>0,collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,r)=>{const i=Us.collectEvaluatedProperties(r,t,n,a);return!1!==i?[...e||[],...i]:e}),!1),collectEvaluatedItems:(e,t,n,a)=>e.reduce(((e,r)=>{const i=Us.collectEvaluatedItems(r,t,n,a);return!1!==i?new Set([...e||[],...i]):e}),!1)};const{Schema:Ks,Instance:Gs}=Dt;var Zs={compile:e=>mn(Ks.value(e)),interpret:(e,t)=>mn(Gs.value(t))===e};const{Core:Hs,Instance:Ws}=Dt;var Xs={compile:(e,t)=>Hs.compileSchema(e,t),interpret:(e,t,n,a)=>!Ws.typeOf(t,"array")||Ws.some((t=>Hs.interpretSchema(e,t,n,a)),t)};const{Core:Qs,Schema:Ys,Instance:eo}=Dt,to=({contains:e,minContains:t,maxContains:n},a,r,i)=>{if(!eo.typeOf(a,"array"))return!0;const s=eo.reduce(((t,n)=>Qs.interpretSchema(e,n,r,i)?t+1:t),0,a);return s>=t&&s<=n};var no={compile:async(e,t,n)=>{const a=await Qs.compileSchema(e,t),r=await Ys.step("minContains",n),i=Ys.typeOf(r,"number")?Ys.value(r):1,s=await Ys.step("maxContains",n);return{contains:a,minContains:i,maxContains:Ys.typeOf(s,"number")?Ys.value(s):Number.MAX_SAFE_INTEGER}},interpret:to,collectEvaluatedItems:(e,t,n,a)=>to(e,t,n,a)&&eo.reduce(((t,r,i)=>Qs.interpretSchema(e.contains,r,n,a)?t.add(i):t),new Set,t)};const{Core:ao,Schema:ro,Instance:io}=Dt,so=({contains:e,minContains:t,maxContains:n},a,r,i)=>{if(!io.typeOf(a,"array")&&!io.typeOf(a,"object"))return!0;const s=io.entries(a).reduce(((t,[,n])=>ao.interpretSchema(e,n,r,i)?t+1:t),0);return s>=t&&s<=n};var oo={compile:async(e,t,n)=>{const a=await ao.compileSchema(e,t),r=await ro.step("minContains",n),i=ro.typeOf(r,"number")?ro.value(r):1,s=await ro.step("maxContains",n);return{contains:a,minContains:i,maxContains:ro.typeOf(s,"number")?ro.value(s):Number.MAX_SAFE_INTEGER}},interpret:so,collectEvaluatedItems:(e,t,n,a)=>so(e,t,n,a)&&io.typeOf(t,"array")&&io.reduce(((t,r,i)=>ao.interpretSchema(e.contains,r,n,a)?t.add(i):t),new Set,t),collectEvaluatedProperties:(e,t,n,a)=>so(e,t,n,a)&&io.typeOf(t,"object")&&io.entries(t).reduce(((t,[r,i])=>(ao.interpretSchema(e.contains,i,n,a)&&t.push(r),t)),[],t)};const{Core:co,Schema:lo}=Dt;var mo={compile:async(e,t)=>{await Ue.pipeline([lo.entries,Ue.map((([,e])=>co.compileSchema(e,t))),Ue.all],e)},interpret:()=>!0};const{Core:po,Schema:uo,Instance:fo}=Dt;var ho={compile:(e,t)=>Ue.pipeline([uo.entries,Ue.map((async([e,n])=>[e,uo.typeOf(n,"array")?uo.value(n):await po.compileSchema(n,t)])),Ue.all],e),interpret:(e,t,n,a)=>{const r=fo.value(t);return!fo.typeOf(t,"object")||e.every((([e,i])=>!(e in r)||(Array.isArray(i)?i.every((e=>e in r)):po.interpretSchema(i,t,n,a))))}};const{Schema:yo,Instance:vo}=Dt;var go={compile:e=>Ue.pipeline([yo.entries,Ue.map((([e,t])=>[e,yo.value(t)])),Ue.all],e),interpret:(e,t)=>{const n=vo.value(t);return!vo.typeOf(t,"object")||e.every((([e,t])=>!(e in n)||t.every((e=>e in n))))}};const{Core:$o,Schema:bo,Instance:Oo}=Dt;var So={compile:(e,t)=>Ue.pipeline([bo.entries,Ue.map((async([e,n])=>[e,await $o.compileSchema(n,t)])),Ue.all],e),interpret:(e,t,n,a)=>{const r=Oo.value(t);return!Oo.typeOf(t,"object")||e.every((([e,i])=>!(e in r)||$o.interpretSchema(i,t,n,a)))},collectEvaluatedProperties:(e,t,n,a)=>e.reduce(((e,[r,i])=>{if(!e||!Oo.has(r,t))return e;const s=$o.collectEvaluatedProperties(i,t,n,a);return!1!==s&&e.concat(s)}),[])};const{Core:Io,Schema:wo}=Dt,{safeResolveUrl:xo,splitUrl:jo}=X;var Eo={compile:e=>{const t=xo(e.id,wo.value(e));return jo(t)},interpret:([e,t],n,a,r)=>{const i=t in a.metaData[e].dynamicAnchors?r[t]:e,s=wo.getAnchorPointer(a.metaData[i],t);return Io.interpretSchema(`${i}#${s}`,n,a,r)},collectEvaluatedProperties:Io.collectEvaluatedProperties,collectEvaluatedItems:Io.collectEvaluatedItems};const{Core:Po,Schema:Ao}=Dt,{safeResolveUrl:ko,splitUrl:Co}=X;var No={compile:e=>Co(Ao.value(e)),interpret:([e,t],n,a,r)=>{if(!(t in r))throw Error(`No dynamic anchor found for "${t}"`);const i=ko(r[t],e),s=Ao.getAnchorPointer(a.metaData[i],t);return Po.interpretSchema(`${i}#${s}`,n,a,r)},collectEvaluatedProperties:Po.collectEvaluatedProperties,collectEvaluatedItems:Po.collectEvaluatedItems};const{Schema:Ro,Instance:To}=Dt;var Do={compile:e=>Ro.value(e).map(mn),interpret:(e,t)=>e.some((e=>mn(To.value(t))===e))};const{Schema:qo,Instance:Mo}=Dt;var Vo={compile:async e=>qo.value(e),interpret:(e,t)=>!Mo.typeOf(t,"number")||Mo.value(t)<e};const{Schema:Lo,Instance:Jo}=Dt;var _o={compile:async e=>Lo.value(e),interpret:(e,t)=>!Jo.typeOf(t,"number")||Jo.value(t)>e};const{Core:zo}=Dt;var Uo={compile:(e,t)=>zo.compileSchema(e,t),interpret:(e,t,n,a)=>(zo.interpretSchema(e,t,n,a),!0),collectEvaluatedProperties:(e,t,n,a)=>zo.collectEvaluatedProperties(e,t,n,a)||[],collectEvaluatedItems:(e,t,n,a)=>zo.collectEvaluatedItems(e,t,n,a)||new Set};const{Core:Fo,Schema:Bo}=Dt,Ko=(e,t,n,a)=>{const r=n[e][2];return"boolean"==typeof r?r:r.every((([e,,r])=>Fo.getKeyword(e).interpret(r,t,n,a)))};var Go={compile:async(e,t,n)=>{if(Bo.has("if",n)){const a=await Bo.step("if",n);return[await Fo.compileSchema(a,t),await Fo.compileSchema(e,t)]}return[]},interpret:([e,t],n,a,r)=>void 0===e||!Ko(e,n,a,r)||Fo.interpretSchema(t,n,a,r),collectEvaluatedProperties:([e,t],n,a,r)=>void 0!==e&&Ko(e,n,a,r)?Fo.collectEvaluatedProperties(t,n,a,r):[],collectEvaluatedItems:([e,t],n,a,r)=>void 0!==e&&Ko(e,n,a,r)?Fo.collectEvaluatedItems(t,n,a,r):new Set};const{Core:Zo,Schema:Ho}=Dt,Wo=(e,t,n,a)=>{const r=n[e][2];return"boolean"==typeof r?r:r.every((([e,,r])=>Zo.getKeyword(e).interpret(r,t,n,a)))};var Xo={compile:async(e,t,n)=>{if(Ho.has("if",n)){const a=await Ho.step("if",n);return[await Zo.compileSchema(a,t),await Zo.compileSchema(e,t)]}return[]},interpret:([e,t],n,a,r)=>void 0===e||Wo(e,n,a,r)||Zo.interpretSchema(t,n,a,r),collectEvaluatedProperties:([e,t],n,a,r)=>void 0===e||Wo(e,n,a,r)?[]:Zo.collectEvaluatedProperties(t,n,a,r),collectEvaluatedItems:([e,t],n,a,r)=>void 0===e||Wo(e,n,a,r)?new Set:Zo.collectEvaluatedItems(t,n,a,r)};const{Core:Qo,Schema:Yo,Instance:ec}=Dt,tc=(e,t,n,a)=>!ec.typeOf(t,"array")||("string"==typeof e?ec.every((t=>Qo.interpretSchema(e,t,n,a)),t):ec.every(((t,r)=>!(r in e)||Qo.interpretSchema(e[r],t,n,a)),t));var nc={compile:(e,t)=>Yo.typeOf(e,"array")?Ue.pipeline([Yo.map((e=>Qo.compileSchema(e,t))),Ue.all],e):Qo.compileSchema(e,t),interpret:tc,collectEvaluatedItems:(e,t,n,a)=>tc(e,t,n,a)&&("string"==typeof e?new Set(ec.map(((e,t)=>t),t)):new Set(e.map(((e,t)=>t))))};const{Core:ac,Schema:rc,Instance:ic}=Dt,sc=([e,t],n,a,r)=>!ic.typeOf(n,"array")||ic.every(((n,i)=>i<e||ac.interpretSchema(t,n,a,r)),n);var oc={compile:async(e,t,n)=>{const a=await rc.step("prefixItems",n);return[rc.typeOf(a,"array")?rc.length(a):0,await ac.compileSchema(e,t)]},interpret:sc,collectEvaluatedItems:(e,t,n,a)=>sc(e,t,n,a)&&new Set(ic.map(((e,t)=>t),t))};const{Schema:cc,Instance:lc}=Dt;var mc={compile:e=>cc.value(e),interpret:(e,t)=>!lc.typeOf(t,"array")||lc.length(t)<=e};const{Schema:pc,Instance:uc}=Dt;var fc={compile:e=>pc.value(e),interpret:(e,t)=>!uc.typeOf(t,"string")||uc.length(t)<=e};const{Schema:dc,Instance:hc}=Dt;var yc={compile:e=>dc.value(e),interpret:(e,t)=>!hc.typeOf(t,"string")||[...hc.value(t)].length<=e};const{Schema:vc,Instance:gc}=Dt;var $c={compile:e=>vc.value(e),interpret:(e,t)=>!gc.typeOf(t,"object")||gc.keys(t).length<=e};const{Schema:bc,Instance:Oc}=Dt;var Sc={compile:async(e,t,n)=>{const a=await bc.step("exclusiveMaximum",n),r=bc.value(a);return[bc.value(e),r]},interpret:([e,t],n)=>{if(!Oc.typeOf(n,"number"))return!0;const a=Oc.value(n);return t?a<e:a<=e}};const{Schema:Ic,Instance:wc}=Dt;var xc={compile:async e=>Ic.value(e),interpret:(e,t)=>!wc.typeOf(t,"number")||wc.value(t)<=e};const{Schema:jc,Instance:Ec}=Dt;var Pc={compile:e=>jc.value(e),interpret:(e,t)=>!Ec.typeOf(t,"array")||Ec.length(t)>=e};const{Schema:Ac,Instance:kc}=Dt;var Cc={compile:e=>Ac.value(e),interpret:(e,t)=>!kc.typeOf(t,"string")||kc.value(t).length>=e};const{Schema:Nc,Instance:Rc}=Dt;var Tc={compile:e=>Nc.value(e),interpret:(e,t)=>!Rc.typeOf(t,"string")||[...Rc.value(t)].length>=e};const{Schema:Dc,Instance:qc}=Dt;var Mc={compile:e=>Dc.value(e),interpret:(e,t)=>{const n=qc.value(t);return!qc.typeOf(t,"object")||Object.keys(n).length>=e}};const{Schema:Vc,Instance:Lc}=Dt;var Jc={compile:async(e,t,n)=>{const a=await Vc.step("exclusiveMinimum",n),r=Vc.value(a);return[Vc.value(e),r]},interpret:([e,t],n)=>{if(!Lc.typeOf(n,"number"))return!0;const a=Lc.value(n);return t?a>e:a>=e}};const{Schema:_c,Instance:zc}=Dt;var Uc={compile:async e=>_c.value(e),interpret:(e,t)=>!zc.typeOf(t,"number")||zc.value(t)>=e};const{Schema:Fc,Instance:Bc}=Dt,Kc=(e,t)=>Math.abs(e-t)<1.1920929e-7;var Gc={compile:e=>Fc.value(e),interpret:(e,t)=>{if(!Bc.typeOf(t,"number"))return!0;const n=Bc.value(t)%e;return Kc(0,n)||Kc(e,n)}};const{Core:Zc}=Dt;var Hc={compile:Zc.compileSchema,interpret:(e,t,n,a)=>!Zc.interpretSchema(e,t,n,a)};const{Core:Wc,Schema:Xc}=Dt;var Qc={compile:(e,t)=>Ue.pipeline([Xc.map((async e=>Wc.compileSchema(await e,t))),Ue.all],e),interpret:(e,t,n,a)=>{let r=0;for(const i of e)if(Wc.interpretSchema(i,t,n,a)&&r++,r>1)break;return 1===r},collectEvaluatedProperties:(e,t,n,a)=>{let r=0;return e.reduce(((e,i)=>{if(r>1)return!1;const s=Wc.collectEvaluatedProperties(i,t,n,a);return s?0==r++&&s:e}),!1)},collectEvaluatedItems:(e,t,n,a)=>{let r=0;return e.reduce(((e,i)=>{if(r>1)return!1;const s=Wc.collectEvaluatedItems(i,t,n,a);return s?0==r++&&s:e}),!1)}};const{Schema:Yc,Instance:el}=Dt;var tl={compile:async(e,t,n)=>{const a=await Yc.value(e),r=await Yc.step("properties",n),i=Yc.typeOf(r,"object")?Yc.keys(r):[],s=new Set(i);return a.forEach((e=>i.remove(e))),[...s]},interpret:(e,t)=>!el.typeOf(t,"object")||e.every((e=>el.value(t).hasOwnProperty(e)))};const{Schema:nl,Instance:al}=Dt;var rl={compile:e=>new RegExp(nl.value(e),"u"),interpret:(e,t)=>!al.typeOf(t,"string")||e.test(al.value(t))};const{Core:il,Schema:sl,Instance:ol}=Dt,cl=(e,t,n,a)=>!ol.typeOf(t,"object")||e.every((([e,r])=>ol.entries(t).filter((([t])=>e.test(t))).every((([,e])=>il.interpretSchema(r,e,n,a)))));var ll={compile:(e,t)=>Ue.pipeline([sl.entries,Ue.map((async([e,n])=>[new RegExp(e,"u"),await il.compileSchema(n,t)])),Ue.all],e),interpret:cl,collectEvaluatedProperties:(e,t,n,a)=>cl(e,t,n,a)&&e.map((([e])=>e))};var ml={isObject:e=>"object"==typeof e&&!Array.isArray(e)&&null!==e,escapeRegExp:e=>e.replace(/[.*+\-?^${}()|[\]\\]/g,"\\$&")};const{Core:pl,Schema:ul,Instance:fl}=Dt,{escapeRegExp:dl}=ml,hl=(e,t,n,a)=>!fl.typeOf(t,"object")||fl.entries(t).filter((([t])=>t in e)).every((([t,r])=>pl.interpretSchema(e[t],r,n,a)));var yl={compile:(e,t)=>Ue.pipeline([ul.entries,Ue.reduce((async(e,[n,a])=>(e[n]=await pl.compileSchema(a,t),e)),Object.create(null))],e),interpret:hl,collectEvaluatedProperties:(e,t,n,a)=>hl(e,t,n,a)&&Object.keys(e).map((e=>new RegExp(`^${dl(e)}$`)))};const{Core:vl,Schema:gl,Instance:$l}=Dt;var bl={compile:async(e,t)=>Ue.pipeline([gl.entries,Ue.reduce((async(e,[n,a])=>(e[n]=await Ue.pipeline([gl.entries,Ue.reduce((async(e,[n,a])=>(e[n]=await vl.compileSchema(a,t),e)),{})],a),e)),{})],e),interpret:(e,t,n,a)=>!$l.typeOf(t,"object")||Object.entries(e).every((([e,r])=>!$l.has(e,t)||vl.interpretSchema(r[$l.value(t)[e]],t,n,a)))};const{Core:Ol,Instance:Sl}=Dt;var Il={compile:(e,t)=>Ol.compileSchema(e,t),interpret:(e,t,n,a)=>!Sl.typeOf(t,"object")||Sl.keys(t).every((t=>Ol.interpretSchema(e,Sl.cons(t),n,a)))};const{Core:wl,Schema:xl}=Dt;var jl={compile:async(e,t)=>{const n=await xl.get(xl.value(e),e);return wl.compileSchema(n,t)},interpret:wl.interpretSchema,collectEvaluatedProperties:wl.collectEvaluatedProperties,collectEvaluatedItems:wl.collectEvaluatedItems};const{Schema:El,Instance:Pl}=Dt;var Al={compile:e=>El.value(e),interpret:(e,t)=>!Pl.typeOf(t,"object")||e.every((e=>Pl.value(t).hasOwnProperty(e)))};const{Core:kl,Schema:Cl,Instance:Nl}=Dt,Rl=(e,t,n,a)=>!Nl.typeOf(t,"array")||Nl.every(((t,r)=>!(r in e)||kl.interpretSchema(e[r],t,n,a)),t);var Tl={compile:(e,t)=>Ue.pipeline([Cl.map((e=>kl.compileSchema(e,t))),Ue.all],e),interpret:Rl,collectEvaluatedItems:(e,t,n,a)=>Rl(e,t,n,a)&&new Set(e.map(((e,t)=>t)))};const{Schema:Dl,Instance:ql}=Dt;var Ml={compile:e=>Dl.value(e),interpret:(e,t)=>"string"==typeof e?ql.typeOf(t,e):e.some(ql.typeOf(t))};const{Core:Vl,Schema:Ll,Instance:Jl}=Dt,_l=([e,t],n,a,r)=>{if(!Jl.typeOf(n,"array"))return!0;const i=Vl.collectEvaluatedItems(e,n,a,r,!0);return!1===i||Jl.every(((e,s)=>i.has(s)||Vl.interpretSchema(t,Jl.step(s,n),a,r)),n)};var zl={compile:async(e,t,n)=>[Ll.uri(n),await Vl.compileSchema(e,t)],interpret:_l,collectEvaluatedItems:(e,t,n,a)=>_l(e,t,n,a)&&new Set(Jl.map(((e,t)=>t),t))};const{Core:Ul,Schema:Fl,Instance:Bl}=Dt,Kl=([e,t],n,a,r)=>{if(!Bl.typeOf(n,"object"))return!0;const i=Ul.collectEvaluatedProperties(e,n,a,r,!0);return!i||Bl.entries(n).filter((([e])=>!i.some((t=>e.match(t))))).every((([,e])=>Ul.interpretSchema(t,e,a,r)))};var Gl={compile:async(e,t,n)=>[Fl.uri(n),await Ul.compileSchema(e,t)],interpret:Kl,collectEvaluatedProperties:(e,t,n,a)=>Kl(e,t,n,a)&&[new RegExp("")]};const{Schema:Zl,Instance:Hl}=Dt;var Wl={compile:e=>Zl.value(e),interpret:(e,t)=>{if(!Hl.typeOf(t,"array")||!1===e)return!0;const n=Hl.map((e=>mn(Hl.value(e))),t);return new Set(n).size===n.length}};const{Keywords:Xl}=Dt;var Ql={additionalItems:xs,additionalItems6:ks,additionalProperties:Ts,additionalProperties6:Ls,allOf:zs,anyOf:Bs,const:Zs,contains:Xs,containsMinContainsMaxContains:no,containsMinContainsMaxContainsFUTURE:oo,definitions:mo,dependencies:ho,dependentRequired:go,dependentSchemas:So,dynamicRef:Eo,dynamicRefFUTURE:No,enum:Do,exclusiveMaximum:Vo,exclusiveMinimum:_o,if:Uo,then:Go,else:Xo,items:nc,items202012:oc,maxItems:mc,maxLength:fc,maxLength6:yc,maxProperties:$c,maximumExclusiveMaximum:Sc,maximum:xc,metaData:Xl.metaData,minItems:Pc,minLength:Cc,minLength6:Tc,minProperties:Mc,minimumExclusiveMinimum:Jc,minimum:Uc,multipleOf:Gc,not:Hc,oneOf:Qc,optional:tl,pattern:rl,patternProperties:ll,properties:yl,propertyDependencies:bl,propertyNames:Il,ref:jl,required:Al,tupleItems:Tl,type:Ml,unevaluatedItems:zl,unevaluatedProperties:Gl,uniqueItems:Wl,validate:Xl.validate};const{Core:Yl,Schema:em}=Dt,tm="https://json-schema.org/draft/future/schema";function nm(e){return{c:u,l:u,m:u,p:u,i:u,o:u,d:u}}function am(e){let t,n;return t=new es({props:{results:e[4]}}),{c(){x(t.$$.fragment)},l(e){j(t.$$.fragment,e)},m(e,a){E(t,e,a),n=!0},p(e,n){const a={};16&n&&(a.results=e[4]),t.$set(a)},i(e){n||(A(t.$$.fragment,e),n=!0)},o(e){k(t.$$.fragment,e),n=!1},d(e){C(t,e)}}}function rm(e){return{c:u,l:u,m:u,p:u,i:u,o:u,d:u}}function im(e){let t,n,u,f,y,v,g,$,b,S,I,N,D,q,M,V,J,_,z,U,F;function B(t){e[9](t)}function K(t){e[10](t)}g=new Ui({props:{ns:"schemas",tabs:e[0],newTab:e[5],active:0}}),g.$on("input",e[7]);let G={ns:"instances",tabs:e[1],newTab:e[6]};void 0!==e[2]&&(G.selected=e[2]),void 0!==e[2]&&(G.active=e[2]),S=new Ui({props:G}),O.push((()=>w(S,"selected",B))),O.push((()=>w(S,"active",K))),S.$on("input",e[8]),M=new es({props:{results:e[3]}});let Z={ctx:e,current:null,token:null,hasCatch:!1,pending:rm,then:am,catch:nm,value:12,blocks:[,,,]};return R(_=e[3],Z),U=new ys({}),{c(){t=d(),n=a("main"),u=a("h1"),f=r("Hyperjump - JSON Schema Validator"),y=d(),v=a("div"),x(g.$$.fragment),$=d(),b=a("div"),x(S.$$.fragment),D=d(),q=a("div"),x(M.$$.fragment),V=d(),J=a("div"),Z.block.c(),z=d(),x(U.$$.fragment),this.h()},l(e){L('[data-svelte="svelte-14138tz"]',document.head).forEach(c),t=h(e),n=i(e,"MAIN",{class:!0});var a=s(n);u=i(a,"H1",{class:!0});var r=s(u);f=o(r,"Hyperjump - JSON Schema Validator"),r.forEach(c),y=h(a),v=i(a,"DIV",{class:!0});var l=s(v);j(g.$$.fragment,l),l.forEach(c),$=h(a),b=i(a,"DIV",{class:!0});var m=s(b);j(S.$$.fragment,m),m.forEach(c),D=h(a),q=i(a,"DIV",{class:!0});var p=s(q);j(M.$$.fragment,p),p.forEach(c),V=h(a),J=i(a,"DIV",{class:!0});var d=s(J);Z.block.l(d),d.forEach(c),z=h(a),j(U.$$.fragment,a),a.forEach(c),this.h()},h(){document.title="Hyperjump - JSON Schema Validator",l(u,"class","svelte-1fbysc"),l(v,"class","editor-section svelte-1fbysc"),l(b,"class","editor-section svelte-1fbysc"),l(q,"class","results "+om+" svelte-1fbysc"),l(J,"class","results "+om+" svelte-1fbysc"),l(n,"class","svelte-1fbysc")},m(e,a){m(e,t,a),m(e,n,a),p(n,u),p(u,f),p(n,y),p(n,v),E(g,v,null),p(n,$),p(n,b),E(S,b,null),p(n,D),p(n,q),E(M,q,null),p(n,V),p(n,J),Z.block.m(J,Z.anchor=null),Z.mount=()=>J,Z.anchor=null,p(n,z),E(U,n,null),F=!0},p(t,[n]){e=t;const a={};1&n&&(a.tabs=e[0]),g.$set(a);const r={};2&n&&(r.tabs=e[1]),!I&&4&n&&(I=!0,r.selected=e[2],P((()=>I=!1))),!N&&4&n&&(N=!0,r.active=e[2],P((()=>N=!1))),S.$set(r);const i={};8&n&&(i.results=e[3]),M.$set(i),Z.ctx=e,8&n&&_!==(_=e[3])&&R(_,Z)||T(Z,e,n)},i(e){F||(A(g.$$.fragment,e),A(S.$$.fragment,e),A(M.$$.fragment,e),A(Z.block),A(U.$$.fragment,e),F=!0)},o(e){k(g.$$.fragment,e),k(S.$$.fragment,e),k(M.$$.fragment,e);for(let e=0;e<3;e+=1){const t=Z.blocks[e];k(t)}k(U.$$.fragment,e),F=!1},d(e){e&&c(t),e&&c(n),C(g),C(S),C(M),Z.block.d(),Z.token=null,Z=null,C(U)}}}em.setConfig(tm,"baseToken","$id"),em.setConfig(tm,"embeddedToken","$id"),em.setConfig(tm,"anchorToken","$anchor"),em.setConfig(tm,"dynamicAnchorToken","$dynamicAnchor"),em.setConfig(tm,"vocabularyToken","$vocabulary"),em.setConfig(tm,"mandatoryVocabularies",["https://json-schema.org/draft/future/vocab/core"]),em.add(JSON.parse('{\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$id": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/core": true,\n        "https://json-schema.org/draft/future/vocab/applicator": true,\n        "https://json-schema.org/draft/future/vocab/unevaluated": true,\n        "https://json-schema.org/draft/future/vocab/validation": true,\n        "https://json-schema.org/draft/future/vocab/meta-data": true,\n        "https://json-schema.org/draft/future/vocab/format-annotation": true,\n        "https://json-schema.org/draft/future/vocab/content": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Core and Validation specifications meta-schema",\n    "allOf": [\n        {"$ref": "meta/core"},\n        {"$ref": "meta/applicator"},\n        {"$ref": "meta/validation"},\n        {"$ref": "meta/meta-data"},\n        {"$ref": "meta/format-annotation"},\n        {"$ref": "meta/content"}\n    ],\n    "type": ["object", "boolean"],\n    "properties": {\n        "definitions": {\n            "$comment": "While no longer an official keyword as it is replaced by $defs, this keyword is retained in the meta-schema to prevent incompatible extensions as it remains in common use.",\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        },\n        "dependencies": {\n            "$comment": "\\"dependencies\\" is no longer a keyword, but schema authors should avoid redefining it to facilitate a smooth transition to \\"dependentSchemas\\" and \\"dependentRequired\\"",\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$dynamicRef": "#meta" },\n                    { "$ref": "meta/validation#/$defs/stringArray" }\n                ]\n            }\n        }\n    }\n}')),em.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/core",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/core": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Core vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference",\n            "$comment": "Non-empty fragments not allowed.",\n            "pattern": "^[^#]*#?$"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$anchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z_][-A-Za-z0-9._]*$"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$dynamicRef": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$dynamicAnchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z_][-A-Za-z0-9._]*$"\n        },\n        "$vocabulary": {\n            "type": "object",\n            "propertyNames": {\n                "type": "string",\n                "format": "uri"\n            },\n            "additionalProperties": {\n                "type": "boolean"\n            }\n        },\n        "$comment": {\n            "type": "string"\n        },\n        "$defs": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        }\n    }\n}')),Yl.defineVocabulary("https://json-schema.org/draft/future/vocab/core",{validate:Ql.validate,$defs:Ql.definitions,$dynamicRef:Ql.dynamicRefFUTURE,$ref:Ql.ref}),em.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/applicator",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/applicator": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Applicator vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "prefixItems": { "$ref": "#/$defs/schemaArray" },\n        "items": { "$dynamicRef": "#meta" },\n        "contains": { "$dynamicRef": "#meta" },\n        "additionalProperties": { "$dynamicRef": "#meta" },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$dynamicRef": "#meta" },\n            "propertyNames": { "format": "regex" },\n            "default": {}\n        },\n        "dependentSchemas": {\n            "type": "object",\n            "additionalProperties": {\n                "$dynamicRef": "#meta"\n            }\n        },\n        "propertyDependencies": {\n            "type": "object",\n            "additionalProperties": {\n                "type": "object",\n                "additionalProperties": { "$dynamicRef": "#meta" },\n                "default": {}\n            },\n            "default": {}\n        },\n        "propertyNames": { "$dynamicRef": "#meta" },\n        "if": { "$dynamicRef": "#meta" },\n        "then": { "$dynamicRef": "#meta" },\n        "else": { "$dynamicRef": "#meta" },\n        "allOf": { "$ref": "#/$defs/schemaArray" },\n        "anyOf": { "$ref": "#/$defs/schemaArray" },\n        "oneOf": { "$ref": "#/$defs/schemaArray" },\n        "not": { "$dynamicRef": "#meta" }\n    },\n    "$defs": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$dynamicRef": "#meta" }\n        }\n    }\n}')),Yl.defineVocabulary("https://json-schema.org/draft/future/vocab/applicator",{additionalProperties:Ql.additionalProperties6,allOf:Ql.allOf,anyOf:Ql.anyOf,contains:Ql.containsMinContainsMaxContainsFUTURE,dependentSchemas:Ql.dependentSchemas,if:Ql.if,then:Ql.then,else:Ql.else,items:Ql.items202012,not:Ql.not,oneOf:Ql.oneOf,patternProperties:Ql.patternProperties,prefixItems:Ql.tupleItems,properties:Ql.properties,propertyDependencies:Ql.propertyDependencies,propertyNames:Ql.propertyNames}),em.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/validation",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/validation": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Validation vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minLength": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "maxItems": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minItems": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxContains": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minContains": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 1\n        },\n        "maxProperties": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/$defs/stringArray" },\n        "optional": { "$ref": "#/$defs/stringArray" },\n        "dependentRequired": {\n            "type": "object",\n            "additionalProperties": {\n                "$ref": "#/$defs/stringArray"\n            }\n        },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/$defs/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/$defs/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        }\n    },\n    "$defs": {\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 0\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    }\n}')),Yl.defineVocabulary("https://json-schema.org/draft/future/vocab/validation",{const:Ql.const,dependentRequired:Ql.dependentRequired,enum:Ql.enum,exclusiveMaximum:Ql.exclusiveMaximum,exclusiveMinimum:Ql.exclusiveMinimum,maxItems:Ql.maxItems,maxLength:Ql.maxLength6,maxProperties:Ql.maxProperties,maximum:Ql.maximum,minItems:Ql.minItems,minLength:Ql.minLength6,minProperties:Ql.minProperties,minimum:Ql.minimum,multipleOf:Ql.multipleOf,optional:Ql.optional,pattern:Ql.pattern,required:Ql.required,type:Ql.type,uniqueItems:Ql.uniqueItems}),em.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/meta-data",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/meta-data": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Meta-data vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": true,\n        "deprecated": {\n            "type": "boolean",\n            "default": false\n        },\n        "readOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "writeOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "examples": {\n            "type": "array",\n            "items": true\n        }\n    }\n}')),Yl.defineVocabulary("https://json-schema.org/draft/future/vocab/meta-data",{default:Ql.metaData,deprecated:Ql.metaData,description:Ql.metaData,examples:Ql.metaData,readOnly:Ql.metaData,title:Ql.metaData,writeOnly:Ql.metaData}),em.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/format-annotation",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/format-annotation": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Format vocabulary meta-schema for annotation results",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),Yl.defineVocabulary("https://json-schema.org/draft/future/vocab/format-annotation",{format:Ql.metaData}),em.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/format-assertion",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/format-assertion": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Format vocabulary meta-schema for assertion results",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),em.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/content",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/content": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Content vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "contentMediaType": { "type": "string" },\n        "contentEncoding": { "type": "string" },\n        "contentSchema": { "$dynamicRef": "#meta" }\n    }\n}')),Yl.defineVocabulary("https://json-schema.org/draft/future/vocab/content",{contentEncoding:Ql.metaData,contentMediaType:Ql.metaData,contentSchema:Ql.metaData}),em.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/future/meta/unevaluated",\n    "$schema": "https://json-schema.org/draft/future/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/future/vocab/unevaluated": true\n    },\n    "$dynamicAnchor": "meta",\n\n    "title": "Unevaluated applicator vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "unevaluatedItems": { "$dynamicRef": "#meta" },\n        "unevaluatedProperties": { "$dynamicRef": "#meta" }\n    }\n}')),Yl.defineVocabulary("https://json-schema.org/draft/future/vocab/unevaluated",{unevaluatedItems:Ql.unevaluatedItems,unevaluatedProperties:Ql.unevaluatedProperties});const sm="https://json-schema.hyperjump.io/schema",om="solarized-dark";function cm(e,t,n){let a,r;const i=function(){let e=1;return(t,n,a=!1)=>{const r=n||`${sm}${++e}`;return{label:t||`Schema ${e}`,text:`{\n  "$id": "${r}",\n  "$schema": "https://json-schema.org/draft/2020-12/schema"\n}`,persistent:a}}}(),s=function(){let e=1;return()=>({label:"Instance "+e++,text:""})}();let o=[i("Schema",sm,!0)],c=[s("Instance")],l=0;const m=function(e,t){let n;return({detail:a})=>{clearTimeout(n),n=setTimeout((()=>e(a)),t)}},p=m((e=>n(0,o=e)),750),u=m((e=>n(1,c=e)),750);return gi.setMetaOutputFormat(gi.BASIC),e.$$.update=()=>{1&e.$$.dirty&&n(3,a=async function(){o.forEach(((e,t)=>{const n=0===t?sm:"";gi.add(JSON.parse(e.text||"true"),n,"https://json-schema.org/draft/2020-12/schema")}));const e=await gi.get(sm);return gi.validate(e)}()),14&e.$$.dirty&&n(4,r=async function(){if(""!==c[l].text){let e;try{e=await a}catch(e){}if(e){const t=e(JSON.parse(c[l].text),gi.BASIC);if(t.valid)return t;throw{output:t}}}}())},[o,c,l,a,r,i,s,p,u,function(e){l=e,n(2,l)},function(e){l=e,n(2,l)}]}export default class extends e{constructor(e){super(),t(this,e,cm,im,n,{})}}
